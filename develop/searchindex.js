Search.setIndex({"docnames": ["api_reference/accounting", "api_reference/adapters/betfair", "api_reference/adapters/binance", "api_reference/adapters/index", "api_reference/adapters/interactive_brokers", "api_reference/analysis", "api_reference/backtest", "api_reference/cache", "api_reference/common", "api_reference/config", "api_reference/core", "api_reference/data", "api_reference/execution", "api_reference/index", "api_reference/indicators", "api_reference/infrastructure", "api_reference/live", "api_reference/model/currency", "api_reference/model/data", "api_reference/model/events", "api_reference/model/identifiers", "api_reference/model/index", "api_reference/model/instruments", "api_reference/model/objects", "api_reference/model/orderbook", "api_reference/model/orders", "api_reference/model/position", "api_reference/model/tick_scheme", "api_reference/msgbus", "api_reference/network", "api_reference/persistence", "api_reference/portfolio", "api_reference/risk", "api_reference/serialization", "api_reference/system", "api_reference/trading", "concepts/adapters", "concepts/advanced/advanced_orders", "concepts/advanced/data", "concepts/advanced/emulated_orders", "concepts/advanced/index", "concepts/advanced/portfolio_statistics", "concepts/architecture", "concepts/execution", "concepts/index", "concepts/instruments", "concepts/logging", "concepts/orders", "concepts/strategies", "developer_guide/coding_standards", "developer_guide/cython", "developer_guide/environment_setup", "developer_guide/index", "developer_guide/packaged_data", "developer_guide/rust", "developer_guide/testing", "getting_started/index", "getting_started/installation", "getting_started/quick_start", "guides/backtest_example", "guides/index", "guides/loading_external_data", "index", "integrations/betfair", "integrations/binance", "integrations/ib", "integrations/index"], "filenames": ["api_reference/accounting.md", "api_reference/adapters/betfair.md", "api_reference/adapters/binance.md", "api_reference/adapters/index.md", "api_reference/adapters/interactive_brokers.md", "api_reference/analysis.md", "api_reference/backtest.md", "api_reference/cache.md", "api_reference/common.md", "api_reference/config.md", "api_reference/core.md", "api_reference/data.md", "api_reference/execution.md", "api_reference/index.md", "api_reference/indicators.md", "api_reference/infrastructure.md", "api_reference/live.md", "api_reference/model/currency.md", "api_reference/model/data.md", "api_reference/model/events.md", "api_reference/model/identifiers.md", "api_reference/model/index.md", "api_reference/model/instruments.md", "api_reference/model/objects.md", "api_reference/model/orderbook.md", "api_reference/model/orders.md", "api_reference/model/position.md", "api_reference/model/tick_scheme.md", "api_reference/msgbus.md", "api_reference/network.md", "api_reference/persistence.md", "api_reference/portfolio.md", "api_reference/risk.md", "api_reference/serialization.md", "api_reference/system.md", "api_reference/trading.md", "concepts/adapters.md", "concepts/advanced/advanced_orders.md", "concepts/advanced/data.md", "concepts/advanced/emulated_orders.md", "concepts/advanced/index.md", "concepts/advanced/portfolio_statistics.md", "concepts/architecture.md", "concepts/execution.md", "concepts/index.md", "concepts/instruments.md", "concepts/logging.md", "concepts/orders.md", "concepts/strategies.md", "developer_guide/coding_standards.md", "developer_guide/cython.md", "developer_guide/environment_setup.md", "developer_guide/index.md", "developer_guide/packaged_data.md", "developer_guide/rust.md", "developer_guide/testing.md", "getting_started/index.md", "getting_started/installation.md", "getting_started/quick_start.md", "guides/backtest_example.md", "guides/index.md", "guides/loading_external_data.md", "index.md", "integrations/betfair.md", "integrations/binance.md", "integrations/ib.md", "integrations/index.md"], "titles": ["Accounting", "Betfair", "Binance", "Adapters", "Interactive Brokers", "Analysis", "Backtest", "Cache", "Common", "Config", "Core", "Data", "Execution", "API Reference", "Indicators", "Infrastructure", "Live", "Currency", "Data", "Events", "Identifiers", "Model", "Instruments", "Objects", "Order Book", "Orders", "Position", "Tick Scheme", "Message Bus", "Network", "Persistence", "Portfolio", "Risk", "Serialization", "System", "Trading", "Adapters", "Advanced Orders", "Data", "Emulated Orders", "Advanced", "Portfolio Statistics", "Architecture", "Execution", "Concepts", "Instruments", "Logging", "Orders", "Strategies", "Coding Standards", "Cython", "Environment Setup", "Developer Guide", "Packaged Data", "Rust", "Testing", "Getting Started", "Installation", "Quick Start", "Complete Backtest Example", "Guides", "Loading External Data", "NautilusTrader Documentation", "Betfair", "Binance", "Interactive Brokers", "Integrations"], "terms": {"The": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 65, 66], "subpackag": [0, 3, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 21, 28, 29, 30, 31, 32, 33, 35, 36, 42, 44], "defin": [0, 10, 19, 21, 22, 23, 27, 33, 38, 41, 42, 43, 44, 45, 47, 48, 58, 61, 64], "both": [0, 10, 11, 12, 25, 28, 37, 41, 42, 43, 44, 45, 46, 52, 62, 64, 66], "differ": [0, 8, 37, 40, 42, 43, 47, 48, 58, 60, 64], "type": [0, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 28, 29, 35, 36, 38, 43, 45, 48, 49, 50, 52, 54, 58, 62, 65, 66], "manag": [0, 20, 26, 31, 32, 42, 44, 47, 62, 64], "machineri": [0, 42], "There": [0, 39, 41, 42, 43, 44, 45, 46, 48, 49, 55, 58, 61, 63, 64, 65], "i": [0, 1, 5, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66], "also": [0, 8, 28, 29, 37, 39, 41, 43, 44, 45, 47, 49, 54, 55, 57, 58, 59, 61, 62, 64], "an": [0, 1, 2, 4, 5, 6, 8, 10, 12, 13, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 52, 54, 55, 58, 59, 61, 62, 64, 65, 66], "exchangeratecalcul": 0, "calcul": [0, 5, 10, 19, 22, 26, 28, 32, 41], "exchang": [0, 1, 2, 3, 6, 12, 17, 19, 20, 22, 27, 29, 32, 37, 42, 44, 45, 47, 48, 58, 63, 64, 65, 66], "rate": [0, 2, 5, 8, 22, 32, 41, 45, 58, 64], "between": [0, 8, 11, 12, 13, 22, 27, 42, 43, 44, 45, 47, 54, 58, 60, 62, 64], "fx": [0, 35, 45, 47, 58, 59, 61, 62, 65], "crypto": [0, 2, 17, 27, 45, 47, 61, 62, 64, 65, 66], "pair": [0, 29, 43, 45, 48, 59, 61, 64, 65], "accountmanag": 0, "mainli": [0, 30, 42], "us": [0, 1, 2, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 22, 23, 25, 28, 29, 32, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 62, 63, 64, 65, 66], "from": [0, 2, 5, 8, 10, 11, 12, 13, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 53, 54, 55, 58, 59, 60, 61, 62, 64], "portfolio": [0, 5, 42, 43, 46, 62], "oper": [0, 8, 10, 11, 12, 42, 43, 45, 46, 52, 57, 62], "accountfactori": 0, "support": [0, 16, 29, 30, 39, 42, 43, 44, 45, 47, 48, 50, 62, 64, 66], "custom": [0, 8, 19, 25, 28, 35, 36, 39, 42, 43, 46, 62, 64], "specif": [0, 8, 10, 15, 18, 19, 22, 25, 27, 32, 33, 35, 36, 37, 42, 43, 45, 47, 52, 54, 60, 66], "integr": [0, 1, 2, 3, 4, 29, 36, 42, 44, 45, 55, 57, 62, 63, 64, 65], "These": [0, 8, 14, 19, 25, 37, 41, 42, 43, 47, 52, 55, 64], "can": [0, 3, 7, 8, 12, 14, 19, 20, 22, 23, 25, 26, 28, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65], "regist": [0, 5, 8, 17, 22, 28, 41, 43, 48, 58, 63, 64, 65], "factori": [0, 8, 36, 45, 63, 64, 65], "instanti": [0, 19, 36, 43, 45, 48, 59, 61, 63, 64, 65], "when": [0, 2, 5, 8, 10, 11, 12, 18, 19, 22, 25, 26, 29, 35, 37, 39, 42, 43, 44, 45, 47, 48, 49, 50, 54, 55, 57, 58, 59, 61, 63, 64, 65, 66], "accountst": [0, 19], "event": [0, 2, 8, 10, 12, 16, 18, 22, 25, 26, 28, 29, 35, 38, 39, 42, 43, 44, 46, 48, 58, 62], "receiv": [0, 8, 20, 28, 29, 36, 38, 42, 43, 45, 46, 50, 58, 63, 64, 65], "class": [0, 1, 2, 5, 6, 8, 10, 11, 12, 14, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 41, 42, 43, 45, 46, 47, 48, 50, 58, 59, 62, 63, 64, 65], "marginaccount": 0, "bool": [0, 1, 6, 8, 10, 12, 17, 18, 19, 20, 22, 25, 26, 28, 29, 31], "calculate_account_st": 0, "fals": [0, 8, 10, 12, 17, 18, 19, 22, 25, 26, 29, 39, 47, 49, 61, 64], "base": [0, 1, 2, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 35, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 58, 62], "provid": [0, 3, 5, 6, 7, 8, 10, 12, 14, 15, 18, 19, 25, 28, 29, 31, 32, 35, 42, 43, 44, 45, 46, 47, 48, 49, 58, 59, 61, 62, 64, 66], "margin": [0, 19, 22, 23, 37, 44, 47, 58, 59, 64], "paramet": [0, 2, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 32, 35, 36, 37, 39, 42, 43, 45, 46, 47, 48, 49, 58, 59], "initi": [0, 2, 5, 8, 10, 11, 12, 18, 19, 22, 23, 25, 26, 31, 35, 38, 43, 45, 47, 48, 58, 66], "state": [0, 5, 8, 19, 21, 39, 44, 62, 66], "option": [0, 1, 5, 6, 8, 10, 11, 12, 19, 22, 23, 25, 27, 28, 29, 32, 36, 37, 41, 43, 44, 45, 46, 47, 48, 49, 57, 58, 61, 62, 63, 64, 65], "If": [0, 1, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 37, 39, 42, 43, 44, 46, 48, 54, 55, 58, 60, 61, 64, 65], "should": [0, 5, 8, 10, 11, 12, 17, 19, 20, 25, 27, 29, 32, 37, 39, 44, 45, 46, 49, 55, 58, 59, 60, 61, 64, 66], "order": [0, 1, 5, 6, 8, 12, 19, 20, 22, 23, 26, 28, 29, 38, 40, 41, 42, 45, 48, 52, 58, 60, 61, 62, 63, 65, 66], "fill": [0, 5, 6, 12, 19, 25, 26, 37, 47], "rais": [0, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 32, 35, 42, 55, 58], "valueerror": [0, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 32, 35, 42], "account_typ": [0, 19, 36, 58, 59, 64], "equal": [0, 5, 8, 12, 18, 22, 23, 25, 26, 28, 29, 32, 47], "appli": [0, 25, 26, 45, 47, 49, 59], "self": [0, 1, 6, 8, 10, 12, 18, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 38, 39, 40, 41, 43, 45, 47, 48, 50, 58, 64], "void": [0, 8, 10, 12, 25, 26, 27, 28, 32, 36, 50], "given": [0, 2, 5, 8, 10, 12, 13, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 32, 35, 36, 43, 45, 47, 65, 66], "account_id": [0, 12, 19, 25, 26], "id": [0, 2, 5, 8, 10, 11, 12, 18, 19, 20, 22, 23, 25, 26, 28, 36, 39, 43, 45, 46, 47, 48, 51, 58, 59, 61, 64, 66], "base_curr": [0, 19, 22, 26, 58, 59, 63], "system": [0, 7, 8, 18, 19, 20, 21, 25, 26, 28, 29, 38, 39, 43, 44, 45, 47, 48, 50, 51, 52, 54, 57, 58, 62, 64, 66], "method": [0, 8, 18, 19, 29, 31, 32, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 52, 55, 58, 59, 61, 62, 64], "intend": [0, 8, 10, 28, 43, 47, 48], "call": [0, 8, 10, 11, 28, 29, 36, 38, 41, 43, 45, 48, 50, 54, 55], "user": [0, 8, 19, 25, 28, 35, 38, 40, 42, 43, 44, 45, 48, 58, 59, 60, 61, 62, 64, 66], "code": [0, 8, 13, 17, 35, 36, 39, 43, 50, 51, 52, 54, 59, 61, 62], "balanc": [0, 5, 19, 23, 48, 58], "currenc": [0, 5, 19, 22, 23, 26, 32, 35, 41, 44, 58, 65], "none": [0, 1, 5, 6, 8, 10, 11, 12, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 32, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 58, 64], "accountbal": [0, 19, 23], "return": [0, 1, 2, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 35, 36, 39, 41, 43, 50, 55, 58, 64, 66], "current": [0, 2, 8, 10, 12, 19, 25, 26, 29, 32, 36, 39, 45, 46, 47, 49, 55, 57, 58, 59, 61, 62, 66], "total": [0, 5, 12, 19, 22, 23, 25, 26, 32, 43, 48], "For": [0, 5, 23, 28, 38, 41, 43, 44, 45, 46, 47, 48, 49, 51, 55, 57, 58, 59, 61, 64], "multi": [0, 5, 19, 44, 46, 62, 64, 66], "specifi": [0, 5, 10, 17, 23, 25, 36, 43, 45, 46, 47, 54, 57, 64, 65], "queri": [0, 12, 28, 43, 58, 63], "default": [0, 5, 6, 8, 11, 12, 16, 17, 18, 19, 22, 23, 25, 27, 29, 39, 41, 42, 43, 44, 46, 47, 49, 58, 59, 61, 64], "set": [0, 8, 10, 14, 26, 37, 38, 39, 42, 43, 46, 47, 48, 49, 53, 54, 58, 59, 61, 63, 64, 65], "applic": [0, 8, 19, 22, 26, 44, 47, 66], "inform": [0, 8, 18, 19, 22, 44, 45, 49, 50, 52, 58, 60, 61, 63, 64, 65], "rather": [0, 8, 49, 61], "than": [0, 8, 10, 12, 17, 18, 23, 25, 28, 49, 59, 61], "monei": [0, 5, 12, 19, 22, 23, 26, 31, 32], "zero": [0, 8, 23, 25, 26, 28, 29, 47, 58], "amount": [0, 23, 43, 54, 59, 61, 66], "balance_fre": 0, "free": [0, 8, 23, 52, 54, 59, 61], "balance_lock": 0, "lock": [0, 23, 37], "balance_tot": 0, "dict": [0, 2, 5, 6, 8, 10, 12, 18, 19, 22, 23, 25, 26, 29, 31, 43, 46, 58, 59, 65], "balances_fre": 0, "balances_lock": [0, 31], "balances_tot": 0, "nautilu": [0, 7, 19, 20, 36, 37, 38, 44, 45, 47, 48, 58, 59, 60, 61, 62, 63, 64], "calculate_commiss": 0, "instrument": [0, 2, 8, 12, 18, 19, 20, 23, 25, 26, 27, 32, 43, 44, 47, 48, 59, 62, 63, 64], "quantiti": [0, 8, 12, 18, 19, 22, 23, 25, 26, 32, 37, 43, 44, 58, 59, 61], "last_qti": [0, 12, 19], "price": [0, 2, 6, 8, 12, 18, 19, 22, 23, 25, 26, 27, 32, 44, 47, 59, 61, 64], "last_px": [0, 12, 19], "liquiditysid": [0, 12, 19, 25], "liquidity_sid": [0, 12, 19, 25], "inverse_as_quot": [0, 22], "commiss": [0, 12, 19, 26, 32], "gener": [0, 3, 5, 7, 10, 12, 13, 16, 18, 19, 21, 26, 28, 29, 36, 40, 41, 42, 43, 45, 47, 49, 52, 54, 55, 60, 62, 64], "transact": 0, "result": [0, 5, 6, 10, 22, 26, 37, 38, 42, 45, 48, 49, 58, 59, 61, 64], "quot": [0, 19, 22, 26, 32, 39, 45, 58, 59, 61, 62, 64], "standard": [0, 8, 10, 22, 25, 26, 42, 45, 47, 54, 58, 64, 66], "invers": [0, 22, 26], "maker": [0, 12, 19, 22, 47], "taker": [0, 12, 19, 22], "liquid": [0, 8, 12, 19, 22, 25, 45, 47], "side": [0, 8, 10, 12, 19, 20, 25, 26, 28, 29, 43, 58, 60], "instead": [0, 22, 46, 50], "no_liquidity_sid": [0, 12, 19], "calculate_margin_init": 0, "calculate_margin_maint": 0, "positionsid": [0, 12, 19, 25, 26, 58], "mainten": [0, 22, 23, 45], "posit": [0, 5, 8, 12, 18, 19, 20, 22, 23, 25, 29, 32, 37, 41, 44, 45, 47, 58, 64], "long": [0, 5, 12, 19, 25, 26, 47, 58], "short": [0, 5, 12, 19, 25, 26, 47, 58], "calculate_pnl": [0, 26], "orderfil": [0, 19, 25, 26], "list": [0, 5, 8, 10, 12, 19, 20, 25, 26, 27, 28, 29, 35, 36, 39, 42, 43, 58, 62], "pnl": [0, 5, 19, 26, 41], "doe": [0, 8, 23, 25, 28, 32, 48, 49, 58, 59, 61, 62], "includ": [0, 5, 6, 8, 10, 12, 18, 19, 20, 25, 26, 28, 29, 32, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 55, 57, 58, 62, 63, 64, 65], "ani": [0, 2, 5, 6, 8, 10, 11, 19, 20, 21, 23, 25, 28, 29, 35, 36, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 54, 55, 58, 59, 60, 61, 62], "clear_margin": 0, "instrumentid": [0, 2, 8, 12, 18, 19, 20, 22, 23, 25, 26, 31, 36, 43, 45, 47, 48, 58, 65], "instrument_id": [0, 2, 8, 12, 18, 19, 22, 23, 25, 26, 31, 36, 43, 45, 47, 48, 58, 59, 61, 64], "clear": [0, 47, 49, 59, 61], "clear_margin_init": 0, "clear_margin_maint": 0, "default_leverag": 0, "leverag": [0, 44, 47, 62], "decim": [0, 2, 5, 8, 12, 17, 19, 22, 23, 25, 26, 27, 32, 43, 47, 48, 59], "event_count": [0, 25, 26], "count": [0, 8, 25, 26, 28, 29], "int": [0, 1, 2, 5, 6, 8, 10, 12, 17, 18, 22, 23, 25, 26, 27, 28, 29, 32, 38, 43, 48, 50, 58], "all": [0, 5, 8, 10, 11, 12, 16, 18, 19, 20, 22, 25, 28, 32, 33, 35, 36, 38, 39, 43, 44, 45, 47, 48, 49, 50, 51, 54, 55, 57, 59, 62, 64, 65, 66], "accountid": [0, 12, 19, 20, 25, 26], "is_cash_account": 0, "cash": [0, 44, 45, 58], "is_margin_account": 0, "is_unleverag": 0, "last_ev": [0, 25, 26], "last": [0, 2, 5, 12, 18, 19, 25, 26, 39, 43, 44, 47, 48, 55], "found": [0, 5, 6, 10, 17, 28, 36, 42, 43, 47, 49, 50, 54, 55, 61, 64], "marginbal": [0, 19, 23], "margin_init": [0, 22, 23, 45], "margin_maint": [0, 22, 23, 45], "margins_init": [0, 31], "margins_maint": [0, 31], "set_default_leverag": 0, "valu": [0, 2, 5, 6, 8, 10, 12, 18, 19, 20, 22, 23, 25, 26, 27, 29, 35, 41, 43, 44, 45, 46, 47, 49, 54, 55, 58, 59, 61, 63, 64, 65], "typeerror": [0, 6, 8, 12, 18, 42], "1": [0, 6, 8, 10, 29, 32, 35, 38, 41, 44, 47, 48, 53, 58, 64], "set_leverag": 0, "starting_bal": [0, 58, 59], "start": [0, 1, 2, 8, 10, 27, 29, 35, 36, 48, 57, 59, 60, 61, 63, 64, 65], "accounttyp": [0, 19], "update_bal": 0, "allow_zero": 0, "true": [0, 1, 8, 10, 17, 18, 26, 29, 36, 47, 48, 58, 59, 64, 65], "updat": [0, 2, 6, 12, 19, 32, 39, 45, 47, 53, 58, 63, 64], "guarante": [0, 25, 26, 42, 54, 62], "everi": [0, 42, 43, 47], "therefor": [0, 55, 64], "we": [0, 13, 38, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 64], "onli": [0, 2, 8, 10, 12, 19, 25, 28, 31, 36, 39, 42, 45, 51, 57, 59, 61, 62, 64], "ar": [0, 5, 8, 10, 11, 12, 14, 18, 19, 23, 25, 28, 29, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "allow": [0, 22, 33, 36, 37, 38, 42, 44, 47, 58, 59, 63, 65], "just": [0, 10, 43, 54, 55, 59, 61], "asset": [0, 22, 23, 45, 61, 62, 64], "empti": [0, 8, 10, 19, 25, 41, 49], "update_commiss": 0, "neg": [0, 6, 8, 12, 17, 19, 22, 23, 25, 26, 28, 29, 32], "which": [0, 3, 7, 8, 10, 14, 18, 19, 20, 25, 26, 28, 29, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 64, 65, 66], "repres": [0, 2, 6, 8, 10, 11, 12, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 35, 43, 45, 58], "credit": 0, "update_margin": 0, "update_margin_init": 0, "0": [0, 6, 8, 10, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 32, 37, 41, 43, 45, 47, 58, 59], "update_margin_maint": 0, "object": [0, 2, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 25, 26, 27, 28, 29, 31, 32, 35, 36, 38, 39, 43, 44, 45, 46, 49, 55, 58, 59, 61, 62, 64], "one": [0, 6, 8, 12, 25, 28, 37, 43, 45, 47, 58, 59, 61, 64], "versu": 0, "anoth": [0, 37], "get_rat": 0, "from_curr": 0, "to_curr": 0, "pricetyp": [0, 18, 44, 58], "price_typ": [0, 18, 58], "bid_quot": 0, "ask_quot": 0, "doubl": [0, 5, 6, 8, 10, 19, 22, 23, 25, 26, 27, 50], "dictionari": [0, 2, 12, 18, 19, 20, 22, 23, 25, 26, 37, 43, 45, 46, 63, 65], "bid": [0, 12, 22, 25, 27, 44, 47, 59, 61], "ask": [0, 12, 22, 25, 27, 44, 47, 59, 61], "convert": [0, 5, 10, 29, 35, 59, 61, 63, 65, 66], "convers": [0, 10, 35, 47], "symbol": [0, 20, 22, 25, 26, 45, 64, 65, 66], "length": [0, 10, 29], "note": [0, 5, 8, 10, 18, 26, 28, 44, 60, 61, 65], "insuffici": [0, 41], "data": [0, 3, 5, 10, 12, 22, 29, 30, 35, 39, 41, 42, 43, 45, 48, 54, 62, 63, 65, 66], "rolloverinterestcalcul": 0, "pd": [0, 5, 10, 35, 41, 47, 59, 61], "datafram": [0, 5, 10, 35, 61], "rollov": 0, "interest": [0, 42, 64], "rate_data_csv_path": 0, "term": [0, 29, 44, 47, 59, 60, 61, 64], "csv": [0, 53, 59, 61], "sinc": [0, 8, 39, 45, 48, 62], "1956": 0, "str": [0, 1, 2, 5, 6, 8, 10, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 35, 38, 43, 46, 48, 58, 59], "calc_overnight_r": 0, "date": [0, 44, 47, 48, 60], "forex": [0, 27, 35, 47, 59, 61, 65], "overnight": 0, "rang": [0, 5, 6, 8, 25, 45, 53, 66], "6": [0, 29], "7": 0, "01": [0, 10, 53, 58, 59, 61], "bp": 0, "get_rate_data": 0, "creat": [0, 8, 19, 37, 38, 43, 45, 47, 58, 59, 62, 63, 64, 65], "static": [0, 2, 5, 8, 12, 17, 18, 19, 20, 22, 23, 25, 26, 42, 62], "creation": [0, 19, 37, 39, 47, 64], "register_account_typ": 0, "unicod": [0, 8, 10, 12, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 35], "issuer": [0, 20], "account_cl": 0, "keyerror": [0, 8, 25, 26, 28], "ha": [0, 8, 10, 12, 19, 25, 28, 39, 42, 43, 45, 47, 48, 50, 59, 61, 62, 64], "alreadi": [0, 25, 26, 28, 39, 43, 46, 47, 48, 58, 59, 61], "register_calculated_account": 0, "been": [0, 8, 19, 25, 28, 39, 42, 43, 48, 59, 61, 62], "api": [1, 2, 3, 4, 28, 36, 37, 39, 42, 44, 45, 46, 47, 48, 52, 60, 61, 62], "spot": [1, 36, 45, 47, 64, 66], "bet": [1, 44, 45, 62, 63, 66], "betfairstreamcli": 1, "client": [1, 3, 8, 12, 16, 19, 20, 25, 26, 29, 39, 42, 43, 44, 45, 63, 64, 65, 66], "betfaircli": 1, "logger_adapt": 1, "loggeradapt": [1, 8, 29], "message_handl": 1, "loop": [1, 8, 16, 28, 29, 36, 44, 61], "abstracteventloop": [1, 8, 29], "host": [1, 29], "port": [1, 29, 42, 58], "crlf": [1, 29], "byte": [1, 29], "encod": [1, 29], "socketcli": [1, 29], "stream": [1, 2, 38, 44, 63, 64, 65, 66], "async": [1, 8, 29], "connect": [1, 28, 29, 36, 42, 63, 64, 65, 66], "disconnect": [1, 29], "is_connect": [1, 29], "is_run": [1, 8, 29], "run": [1, 5, 6, 7, 8, 29, 35, 39, 41, 42, 43, 44, 48, 49, 50, 51, 55, 57, 61, 62, 65, 66], "is_stop": [1, 8, 29], "stop": [1, 6, 8, 12, 25, 27, 29, 32, 37], "post_connect": [1, 29], "action": [1, 29, 39, 43, 45, 66], "perform": [1, 5, 8, 10, 11, 12, 29, 41, 42, 43, 44, 46, 49, 52, 54, 55, 58, 59, 61, 62, 64, 66], "post": [1, 29, 62, 64], "e": [1, 8, 12, 25, 26, 28, 29, 43, 45, 46, 49, 58, 62, 64, 65], "send": [1, 8, 19, 28, 29, 36, 38, 43], "further": [1, 29, 44, 46, 47, 48], "messag": [1, 6, 8, 19, 29, 43, 46, 47, 58, 62], "post_disconnect": [1, 29], "post_reconnect": [1, 29], "reconnect": [1, 29], "raw": [1, 5, 22, 23, 29, 35, 36, 45, 58, 66], "ssl": [1, 29, 57], "betfairorderstreamcli": 1, "logger": [1, 8, 28, 29, 36, 45, 46, 50], "partition_matched_by_strategy_ref": 1, "include_overall_posit": 1, "customer_strategy_ref": 1, "kwarg": [1, 29], "betfairmarketstreamcli": 1, "callabl": [1, 8, 10, 11, 12, 28, 29], "market": [1, 6, 8, 12, 19, 20, 22, 23, 25, 26, 37, 39, 43, 44, 45, 48, 58, 61, 62, 63, 64, 65, 66], "binancefuturesmarkpriceupd": 2, "mark": [2, 28, 42, 47, 64, 66], "index": [2, 8, 10, 23, 47, 62], "estimated_settl": 2, "funding_r": 2, "ts_next_fund": 2, "ts_event": [2, 8, 10, 12, 18, 19, 22, 35, 38, 59, 61], "ts_init": [2, 8, 10, 11, 12, 18, 19, 22, 25, 26, 35, 36, 38, 59, 61], "fund": [2, 64], "estim": 2, "settl": [2, 22], "hour": [2, 18, 44], "befor": [2, 8, 28, 47, 59, 61, 62, 66], "settlement": [2, 45], "uint64_t": [2, 6, 8, 10, 11, 12, 18, 19, 22, 23, 25, 26, 29, 35], "unix": [2, 8, 10, 11, 12, 18, 19, 22, 25, 26, 35, 38, 51, 66], "timestamp": [2, 5, 8, 10, 11, 12, 18, 19, 22, 25, 26, 35, 38, 47, 59, 61, 66], "nanosecond": [2, 6, 8, 10, 11, 12, 18, 19, 22, 25, 26, 29, 35, 38, 44, 62, 66], "next": [2, 8, 10, 35, 49, 58, 59], "occur": [2, 8, 10, 12, 18, 19, 22, 25, 26, 35, 39], "wa": [2, 8, 10, 11, 12, 18, 19, 22, 25, 26, 35, 42, 43, 49, 62], "refer": [2, 5, 8, 10, 12, 18, 19, 20, 22, 23, 25, 27, 35, 39, 44, 45, 46, 47, 48, 49, 54, 58, 60, 61, 64], "http": [2, 3, 5, 8, 10, 12, 18, 19, 20, 22, 23, 25, 29, 35, 37, 50, 53, 57, 58, 59, 61, 64], "doc": [2, 44, 49, 52, 58, 60, 64, 66], "github": [2, 58], "io": [2, 50, 58], "apidoc": 2, "en": [2, 8, 10, 20, 25, 50], "from_dict": [2, 12, 18, 19, 23], "pars": [2, 17, 18, 20, 23, 36, 38, 59, 61, 64], "to_dict": [2, 12, 18, 19, 23, 25, 26], "obj": [2, 12, 18, 19, 22], "represent": [2, 12, 18, 19, 22, 23, 25, 26, 29], "thi": [2, 8, 10, 11, 12, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66], "classmethod": [2, 5, 8, 18, 22, 35], "fully_qualified_nam": [2, 5, 8, 18, 22, 35], "cl": [2, 8, 18, 22, 35], "fulli": [2, 5, 8, 18, 22, 35, 52, 55, 62], "qualifi": [2, 5, 8, 18, 22, 35], "name": [2, 5, 8, 17, 18, 20, 22, 27, 28, 29, 35, 36, 44, 46, 48, 49, 57, 58, 59, 61, 66], "www": [2, 5, 8, 12, 18, 19, 20, 22, 23, 25, 35, 37, 53, 59, 61], "python": [2, 5, 8, 10, 13, 18, 22, 35, 39, 40, 42, 45, 49, 50, 51, 52, 57, 58], "org": [2, 5, 8, 10, 18, 20, 22, 35, 53, 57], "dev": [2, 5, 8, 18, 22, 35, 51, 57], "pep": [2, 5, 8, 18, 22, 35], "3155": [2, 5, 8, 18, 22, 35], "brokerag": [3, 29, 66], "each": [3, 16, 29, 36, 37, 41, 42, 43, 46, 47, 48, 53, 58, 59, 61, 66], "implement": [3, 8, 11, 12, 13, 14, 15, 16, 19, 21, 31, 32, 33, 35, 36, 40, 41, 43, 44, 46, 52, 54, 55, 62], "lower": [3, 25, 28, 47, 52, 58, 64], "level": [3, 8, 10, 20, 27, 29, 35, 36, 37, 40, 44, 46, 47, 49, 52, 54, 55, 58, 60, 62, 64, 66], "rest": [3, 6, 62, 63, 64], "websocket": [3, 29, 62, 64], "venu": [3, 8, 11, 12, 19, 20, 22, 25, 26, 29, 31, 36, 39, 42, 43, 44, 45, 62, 64, 66], "compon": [3, 5, 6, 7, 10, 11, 20, 25, 28, 29, 32, 33, 35, 36, 39, 43, 44, 50, 55, 58, 59, 61, 62, 64, 66], "built": [3, 21, 23, 29, 33, 41, 43, 44, 47, 48, 52, 54, 58, 64, 65], "top": [3, 11, 12, 25, 35, 36, 49, 55], "group": [5, 6, 10, 11, 12, 16, 32, 33, 35, 37, 41, 42], "relat": [5, 6, 10, 11, 12, 25, 37, 42, 43, 45, 52], "trade": [5, 8, 11, 12, 16, 19, 20, 21, 22, 23, 25, 26, 32, 37, 38, 39, 41, 42, 43, 46, 47, 48, 52, 61, 62, 63, 65, 66], "statist": [5, 42, 62], "portfolioanalyz": [5, 31, 41], "analyz": [5, 14, 31, 41, 42], "track": [5, 43], "metric": 5, "register_statist": [5, 41], "portfoliostatist": [5, 41], "deregister_statist": 5, "deregist": [5, 28], "reset": [5, 8, 12], "field": [5, 8, 19, 20, 59, 61, 64], "properti": [5, 12, 19, 25, 45, 66], "nautilus_trad": [5, 36, 38, 41, 42, 43, 45, 48, 57, 58, 59, 61], "model": [5, 6, 27, 42, 43, 45, 48, 58, 59, 61, 62], "seri": [5, 10, 41, 43, 53], "calculate_statist": 5, "account": [5, 12, 19, 20, 23, 25, 26, 31, 32, 42, 58, 63, 65], "add_posit": 5, "add": [5, 8, 10, 12, 43, 48, 58, 61, 63, 64, 65], "add_trad": 5, "position_id": [5, 12, 19, 25, 26, 39, 58], "positionid": [5, 8, 12, 19, 20, 25, 26], "realized_pnl": [5, 19, 26, 41], "realiz": [5, 19, 26, 41, 54], "add_return": 5, "datetim": [5, 8, 12, 18, 19, 25, 35, 46, 59, 61], "float": [5, 6, 22, 23, 27, 41, 43, 58], "entri": [5, 8, 19, 26, 32, 37, 47, 58, 61], "total_pnl": [5, 26], "unrealized_pnl": [5, 19, 26, 31], "unreal": [5, 19, 26], "contain": [5, 8, 10, 12, 18, 19, 20, 23, 25, 26, 28, 37, 40, 42, 43, 50, 53, 58, 59, 61, 64], "total_pnl_percentag": 5, "percentag": [5, 8, 10, 22, 32, 45, 47], "chang": [5, 8, 12, 19, 25, 27, 28, 45, 49, 51, 54, 55, 62], "get_performance_stats_pnl": 5, "profit": [5, 8, 25, 37, 47], "loss": [5, 8, 25, 32, 37, 47], "get_performance_stats_return": 5, "get_performance_stats_gener": 5, "get_stats_pnls_format": 5, "backtest": [5, 8, 11, 12, 30, 38, 39, 42, 46, 48, 50, 61, 62], "format": [5, 8, 10, 18, 20, 23, 46, 58, 59, 61], "print": [5, 10], "footer": 5, "get_stats_returns_format": 5, "get_stats_general_format": 5, "reportprovid": 5, "variou": [5, 8, 27, 28, 42, 44, 48, 51, 53, 58, 59, 61], "report": [5, 19, 55, 58], "generate_orders_report": 5, "generate_order_fills_report": [5, 58], "generate_positions_report": [5, 58], "generate_account_report": [5, 58], "time": [5, 8, 10, 12, 13, 18, 19, 25, 28, 29, 35, 37, 41, 42, 44, 48, 53, 54, 55, 58, 61, 62, 64], "json": [5, 8, 29, 44, 45, 46, 59, 61], "serializ": 5, "primit": [5, 43, 50, 52, 54], "calculate_from_return": 5, "A": [5, 7, 8, 10, 23, 25, 28, 36, 42, 44, 45, 47, 48, 53, 58, 65], "calculate_from_realized_pnl": [5, 41], "calculate_from_ord": 5, "calculate_from_posit": 5, "expect": [5, 10, 18, 20, 29, 35, 41, 42, 50, 54, 58, 66], "longratio": 5, "precis": [5, 17, 22, 23, 26, 27], "2": [5, 43, 57, 58], "ratio": [5, 29, 59, 61], "output": [5, 8, 41, 55, 58], "avglos": 5, "averag": [5, 10, 12, 19, 25, 26, 29], "loser": [5, 41], "maxlos": 5, "maximum": [5, 8, 22, 27, 29, 44, 45, 53], "minlos": 5, "minimum": [5, 8, 22, 27, 29, 45, 46, 65], "profitfactor": 5, "annual": 5, "factor": [5, 29, 62], "win": [5, 41, 42], "returnsaverag": 5, "returnsaverageloss": 5, "lose": 5, "returnsaveragewin": 5, "returnsvolatil": 5, "period": [5, 20, 43, 45, 49], "252": 5, "volatil": 5, "downsampl": 5, "daili": [5, 46, 64], "bin": [5, 18, 29], "dai": [5, 8, 12, 18, 19, 25, 44, 47], "riskreturnratio": 5, "risk": [5, 19, 25, 39, 42, 62], "sharperatio": 5, "sharp": 5, "sortinoratio": 5, "sortino": 5, "winrat": [5, 41], "avgwinn": 5, "winner": [5, 41], "maxwinn": 5, "minwinn": 5, "fillmodel": 6, "prob_fill_on_limit": 6, "prob_fill_on_stop": 6, "prob_slippag": 6, "random_se": 6, "probabilist": 6, "dynam": [6, 43, 52], "probabl": 6, "slippag": [6, 25], "limit": [6, 8, 12, 19, 25, 32, 37, 39, 43, 44, 48, 49, 58, 64], "its": [6, 8, 25, 29, 39, 43, 45, 52, 54, 55, 61, 62], "slip": 6, "tick": [6, 18, 22, 26, 39, 43, 44, 45, 47, 48, 58, 59, 61, 62, 64], "random": [6, 10], "seed": [6, 19], "argument": [6, 29, 42, 43, 49, 61], "within": [6, 8, 13, 19, 36, 38, 42, 47, 54, 62, 64], "is_limit_fil": 6, "indic": [6, 8, 10, 18, 26, 29, 42, 43, 47, 58], "whether": [6, 8, 10, 17, 18, 19, 25, 26, 29, 39, 47, 49, 63, 64, 65], "is_slip": 6, "is_stop_fil": 6, "aggress": [6, 25], "execut": [6, 8, 11, 19, 20, 25, 37, 42, 44, 45, 58, 62, 63, 64, 65, 66], "latencymodel": 6, "base_latency_nano": 6, "nanoseconds_in_millisecond": 6, "insert_latency_nano": 6, "update_latency_nano": 6, "cancel_latency_nano": 6, "latenc": [6, 29], "simul": [6, 42, 44, 58], "o": [6, 36, 43, 46, 59, 61, 62, 65], "1_000_000_000": 6, "insert": [6, 8], "cancel": [6, 8, 12, 19, 25, 39, 47, 48, 66], "reach": [6, 8, 19, 25, 26, 47], "backtestresult": [6, 58], "trader_id": [6, 8, 12, 19, 25, 26, 28, 46], "machine_id": [6, 8], "run_config_id": 6, "instance_id": [6, 8, 46], "run_id": 6, "run_start": 6, "run_finish": 6, "backtest_start": 6, "backtest_end": 6, "elapsed_tim": 6, "iter": [6, 8, 12, 29], "total_ev": 6, "total_ord": 6, "total_posit": 6, "stats_pnl": 6, "stats_return": 6, "singl": [6, 7, 8, 12, 16, 18, 20, 28, 42, 44, 45, 46, 48, 53, 58, 59, 61, 64], "complet": [6, 28, 46, 48, 51, 54, 58, 64], "ensure_plot": 6, "func": 6, "decor": 6, "function": [6, 8, 10, 31, 38, 40, 42, 47, 48, 49, 52, 54, 59, 62, 64, 66], "requir": [6, 8, 19, 22, 23, 25, 37, 38, 39, 42, 43, 45, 47, 48, 50, 57, 58, 59, 61, 64], "plot": 6, "librari": [6, 8, 42, 52, 54, 57, 62], "ensur": [6, 10, 11, 12, 25, 41, 44, 46, 47, 49, 50, 53, 54, 56, 60, 65], "instal": [6, 42, 51, 56, 58, 62, 65], "better": [6, 25, 47, 59, 61], "error": [6, 8, 28, 36, 46, 47, 49, 54, 55, 58, 61, 66], "about": [6, 42, 47, 58, 59, 61], "how": [6, 37, 42, 43, 47, 48, 52, 54, 58, 59], "common": [7, 16, 36, 37, 39, 43, 52, 63, 64, 65], "infrastructur": [7, 42, 44, 46], "central": [7, 11, 12, 20, 43, 45, 49, 59, 61], "access": [7, 43, 54, 62, 66], "mani": [7, 8, 21, 29, 42, 50, 54, 58, 59, 61, 62, 64], "part": [8, 25, 29, 42, 45, 48, 49, 50], "assembl": [8, 42], "framework": [8, 10, 35, 44, 52, 55], "more": [8, 10, 13, 22, 25, 28, 37, 40, 43, 44, 45, 47, 49, 50, 58, 59, 60, 61, 62, 64], "domain": [8, 10, 19, 21, 23, 35, 42], "concept": [8, 42, 52, 60, 64], "introduc": [8, 44, 52, 60, 62], "abov": [8, 25, 28, 39, 42, 44, 45, 46, 48, 55, 58], "core": [8, 11, 12, 28, 38, 39, 45, 47, 52, 54, 58, 59, 61, 62], "layer": [8, 10, 11, 12, 42, 44], "cach": [8, 11, 12, 15, 29, 39, 42, 43, 45, 57, 58], "test": [8, 42, 44, 45, 49, 53, 54, 57, 58, 59, 60, 61, 66], "live": [8, 11, 12, 29, 37, 38, 39, 41, 42, 46, 47, 48, 50, 62, 63, 64, 65, 66], "control": [8, 39], "instanc": [8, 20, 38, 39, 43, 46, 48, 58, 59, 61], "identifi": [8, 10, 43, 45, 48, 58], "high": [8, 11, 12, 18, 35, 42, 44, 46, 52, 54, 55, 62], "queue": 8, "uuid4": [8, 10, 11, 12, 19, 25, 36], "activ": [8, 28, 39, 43, 47, 50, 64], "expir": [8, 12, 19, 25, 48], "directli": [8, 10, 11, 12, 18, 19, 25, 32, 39, 43, 44, 55, 58], "through": [8, 10, 11, 12, 19, 25, 28, 32, 36, 39, 44, 45, 50, 52, 54, 56, 59, 61, 62], "concret": [8, 10, 11, 12, 19, 25, 32], "subclass": [8, 10, 11, 12, 18, 19, 25, 31, 32, 38, 45], "cancel_tim": 8, "correspond": [8, 12, 19, 20, 52, 61, 63, 64, 65], "label": [8, 10, 38], "valid": [8, 10, 17, 18, 19, 20, 22, 25, 27, 28, 29, 43, 45, 63, 64, 65], "string": [8, 10, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 43, 46, 48, 61], "local_now": 8, "tzinfo": 8, "tz": [8, 10, 35, 59, 61], "local": [8, 19, 22, 25, 35, 39, 52, 66], "timezon": [8, 10, 35, 53], "assum": [8, 42, 43, 50, 64], "target": 8, "awar": [8, 10, 35, 37, 52], "next_time_n": 8, "find": [8, 22, 27, 36, 40, 42, 44, 50, 52, 59, 61], "particular": [8, 23, 28, 36, 43, 45, 55], "register_default_handl": 8, "handler": [8, 28, 29, 36, 38, 64], "timeev": 8, "set_time_alert": 8, "alert_tim": 8, "callback": [8, 10, 11, 28, 36, 64], "alert": [8, 43], "pass": [8, 10, 11, 12, 16, 19, 25, 38, 39, 41, 42, 43, 45, 48, 49, 58, 59, 61, 63, 64, 65], "uniqu": [8, 10, 20, 45, 48], "must": [8, 10, 11, 12, 18, 19, 20, 23, 25, 28, 29, 43, 45, 48, 53, 54, 55, 64, 65, 66], "past": 8, "immedi": [8, 37, 43, 47, 63, 64, 65], "being": [8, 20, 28, 37, 39, 43, 47, 48, 50, 52, 54, 58], "invalid": [8, 10, 12, 25, 42, 45], "fail": 8, "condit": [8, 23, 25, 35, 36, 42, 43, 47, 54, 55, 62], "check": [8, 10, 18, 25, 38, 39, 45, 49, 51, 55, 61, 64], "set_time_alert_n": 8, "alert_time_n": 8, "set_tim": 8, "timedelta": [8, 18], "interv": [8, 43], "start_tim": [8, 59, 64], "stop_tim": 8, "until": [8, 25, 39, 47], "repeat": 8, "indefinit": 8, "now": [8, 35, 38, 39, 44, 46, 58, 61, 62], "set_timer_n": 8, "interval_n": 8, "start_time_n": 8, "stop_time_n": 8, "timer_count": 8, "timer_nam": 8, "second": [8, 10, 18, 44, 58], "wikipedia": [8, 10, 20], "wiki": [8, 10, 20], "unix_tim": 8, "timestamp_m": 8, "millisecond": [8, 10, 44, 66], "m": [8, 10, 46, 59, 61], "timestamp_n": [8, 12, 36], "n": [8, 10, 22, 27], "utc_now": 8, "utc": [8, 10, 25, 35, 46, 47, 59, 61], "liveclock": [8, 36], "asyncio": [8, 29, 36], "monoton": [8, 38], "testclock": 8, "unit": [8, 22, 23, 32, 54, 55], "advance_tim": 8, "to_time_n": 8, "advanc": [8, 25, 28, 47, 62], "timeeventhandl": 8, "sort": [8, 59], "chronolog": 8, "traderid": [8, 12, 19, 20, 25, 26, 28], "componentid": [8, 20], "component_id": 8, "component_nam": 8, "messagebu": [8, 28, 42], "msgbu": [8, 28, 42], "config": [8, 43, 48, 49, 58, 59, 63, 64, 65], "consid": [8, 25, 28, 39, 42, 44, 54, 60, 64], "bu": [8, 42, 43, 62], "either": [8, 20, 23, 29, 36, 37, 39, 44, 47, 58, 63, 64, 65, 66], "happen": [8, 37], "constructor": [8, 39, 43, 45, 48], "trader": [8, 12, 14, 19, 20, 25, 26, 28, 37, 39, 41, 43, 46, 47, 58, 62, 64, 65], "thu": [8, 18, 62], "pre_initi": 8, "otherwis": [8, 12, 19, 43, 45], "associ": [8, 12, 19, 23, 25, 26, 28, 47], "taken": [8, 49, 54, 64], "__name__": 8, "configur": [8, 36, 39, 41, 43, 44, 50, 57], "degrad": 8, "while": [8, 43, 65], "on_degrad": 8, "except": [8, 10, 25, 48, 50, 55], "rerais": 8, "remain": [8, 25, 37, 43, 47, 50], "do": [8, 28, 36, 38, 42, 49, 58, 59, 61, 64], "overrid": [8, 17, 45], "dispos": 8, "on_dispos": [8, 58], "fault": 8, "idempot": 8, "irrevers": 8, "No": [8, 39, 64], "other": [8, 12, 18, 19, 25, 29, 33, 42, 45, 47, 49, 55, 58, 61, 62, 64], "after": 8, "on_fault": 8, "is_degrad": 8, "is_dispos": 8, "is_fault": 8, "is_initi": 8, "on_reset": 8, "resum": 8, "on_resum": 8, "on_start": [8, 58, 64], "componentst": 8, "on_stop": [8, 58], "componentfsmfactori": 8, "finit": 8, "machin": [8, 56, 62], "get_state_transition_t": 8, "transit": [8, 10, 21, 54], "tabl": [8, 10, 39, 60], "c": [8, 10, 28, 39, 42, 49, 50, 52, 54, 57, 62], "enum": [8, 10, 35, 36, 47, 58, 64], "orderfactori": [8, 37, 39, 43, 47], "strategyid": [8, 12, 19, 20, 25, 26, 43, 48], "strategy_id": [8, 12, 19, 25, 26, 43], "initial_order_id_count": 8, "initial_order_list_id_count": 8, "tag": [8, 19, 20, 25, 37, 47], "numer": [8, 29], "sent": [8, 19, 25, 28, 29, 39, 43], "strategi": [8, 12, 19, 20, 25, 26, 32, 35, 36, 38, 39, 43, 44, 45, 47, 59, 62, 64, 66], "bracket": 8, "ordersid": [8, 12, 19, 25, 26, 43, 47, 58], "order_sid": [8, 12, 19, 25, 43, 47, 58], "entry_trigger_pric": 8, "entry_pric": 8, "sl_trigger_pric": 8, "tp_trigger_pric": 8, "tp_price": 8, "ordertyp": [8, 12, 19, 25], "entry_order_typ": 8, "tp_order_typ": 8, "timeinforc": [8, 12, 19, 25, 43, 47], "time_in_forc": [8, 12, 19, 25, 43, 47], "gtc": [8, 12, 19, 25, 47], "expire_tim": [8, 12, 25, 47], "entry_post_onli": 8, "tp_post_onli": 8, "triggertyp": [8, 12, 19, 25, 39, 43, 47], "emulation_trigg": [8, 19, 25, 39, 43], "no_trigg": [8, 12, 25], "contingencytyp": [8, 12, 19, 25, 37], "contingency_typ": [8, 12, 19, 25], "ouo": 8, "execalgorithmid": [8, 12, 19, 20, 25, 43], "entry_exec_algorithm_id": 8, "sl_exec_algorithm_id": 8, "tp_exec_algorithm_id": 8, "entry_exec_algorithm_param": 8, "tp_exec_algorithm_param": 8, "sl_exec_algorithm_param": 8, "orderlist": [8, 12, 25], "take": [8, 37, 43, 45, 47, 49, 58, 59, 60, 61], "alwai": [8, 25, 42, 45, 46, 49], "stop_market": [8, 37, 39, 44, 47, 64], "have": [8, 19, 23, 28, 37, 39, 42, 43, 45, 48, 49, 58, 59, 61, 62, 63, 64, 65], "forc": [8, 12, 19, 25, 48, 62], "bui": [8, 12, 19, 25, 26, 43, 47, 58], "sell": [8, 12, 19, 25, 26, 47, 58], "trigger": [8, 10, 12, 19, 25, 39, 42, 62], "child": [8, 12, 25, 37, 43, 47], "limit_if_touch": [8, 39, 44, 47, 64], "market_if_touch": [8, 39, 44, 47, 64], "gtd": [8, 12, 19, 25, 47, 62], "make": [8, 12, 19, 25, 39, 42, 43, 44, 48, 51, 54, 57, 58, 61, 62], "emul": [8, 12, 19, 25, 43], "well": [8, 10, 25, 28, 42, 43, 44, 45, 50, 58, 61], "tp": 8, "sl": 8, "conting": [8, 12, 19, 25, 43, 62], "algorithm": [8, 12, 14, 19, 20, 25, 47, 62], "create_list": 8, "new": [8, 17, 19, 22, 35, 43, 47, 49, 57], "first": [8, 25, 28, 38, 43, 44, 50, 56, 57, 58, 62, 64], "generate_client_order_id": 8, "clientorderid": [8, 12, 19, 20, 25, 26, 43], "logic": [8, 11, 12, 21, 28, 39, 42, 45, 49, 62], "sequenc": [8, 25, 43], "generate_order_list_id": 8, "orderlistid": [8, 12, 19, 20, 25], "post_onli": [8, 12, 19, 25, 47], "reduce_onli": [8, 12, 19, 25, 47], "display_qti": [8, 12, 25, 47], "exec_algorithm_id": [8, 12, 19, 25, 43], "exec_algorithm_param": [8, 19, 25, 43], "limitord": [8, 25, 43, 47], "ioc": [8, 12, 19, 25, 47, 62], "fok": [8, 12, 19, 25, 43, 47, 62], "at_the_open": [8, 12, 19, 25, 47, 62], "at_the_clos": [8, 12, 19, 25, 47, 62], "carri": [8, 12, 19, 25, 41, 43], "reduc": [8, 12, 19, 25, 37, 43, 54, 55, 59, 62], "instruct": [8, 12, 19, 25, 37, 58, 62, 66], "displai": [8, 12, 25, 41], "public": [8, 12, 25], "book": [8, 12, 25, 45, 47, 61, 62], "iceberg": [8, 12, 25, 47, 62], "arbitrari": [8, 19, 25, 41, 58], "delimit": [8, 19, 23, 25, 29], "epoch": [8, 25], "greater": [8, 17, 23, 25, 52, 54], "trigger_pric": [8, 12, 19, 25, 47, 64], "trigger_typ": [8, 12, 25, 47], "limitiftouchedord": [8, 25], "lit": [8, 25], "marketord": [8, 25, 43, 47], "often": [8, 19, 42, 47, 48, 55], "marketiftouchedord": [8, 25, 47], "mit": [8, 25], "market_to_limit": [8, 39, 43, 44, 47], "markettolimitord": [8, 25, 47], "set_client_order_id_count": 8, "intern": [8, 17, 18, 28, 29, 32, 43, 48, 53, 58, 59], "set_order_list_id_count": 8, "stop_limit": [8, 39, 44, 47, 64], "stoplimitord": [8, 25, 47], "stopmarketord": [8, 25, 47], "trailing_stop_limit": [8, 39, 44, 47], "limit_offset": [8, 12, 25, 47], "trailing_offset": [8, 12, 25, 47, 64], "trailingoffsettyp": [8, 12, 25, 47], "trailing_offset_typ": [8, 12, 25, 47], "trailingstoplimitord": [8, 25, 47], "trail": [8, 12, 25, 49], "offset": [8, 12, 25], "typic": [8, 25, 36, 37, 45, 47, 58, 61], "delta": [8, 25], "no_trailing_offset": [8, 12, 25], "trailing_stop_market": [8, 39, 44, 47, 64], "trailingstopmarketord": [8, 25, 47], "clientorderidgener": 8, "initial_count": 8, "identifiergener": 8, "": [8, 19, 25, 29, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 52, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66], "set_count": 8, "counter": 8, "orderlistidgener": 8, "positionidgener": 8, "flip": 8, "append": [8, 46, 64, 66], "f": [8, 36, 50, 58, 59, 61], "get_count": 8, "loglevel": [8, 46, 50], "level_stdout": 8, "info": [8, 11, 19, 22, 25, 26, 46, 58, 64], "level_fil": 8, "debug": [8, 46], "file_log": 8, "directori": [8, 42, 46, 55, 57, 59, 61], "file_nam": 8, "file_format": 8, "component_level": 8, "bypass": [8, 46], "write": [8, 29, 39, 48, 54, 59], "stdout": [8, 46, 58], "file": [8, 37, 51, 52, 54, 57, 58, 59], "enabl": [8, 44, 54, 57], "path": [8, 39, 46, 58, 59, 61], "work": [8, 38, 42, 44, 45, 46, 47, 48, 50, 52, 58, 59, 60, 64, 66], "suffix": [8, 46], "plain": [8, 46, 61], "text": [8, 46, 59, 61], "unless": [8, 42, 52, 55, 66], "file_auto": 8, "addit": [8, 19, 22, 39, 43, 49, 54, 58, 62], "per": [8, 27, 39, 41, 43, 47, 49, 61, 64], "filter": [8, 14, 28, 29, 35, 43, 53, 65], "where": [8, 10, 19, 25, 27, 28, 35, 39, 42, 47, 48, 49, 52, 59, 61, 62, 64, 66], "kei": [8, 10, 18, 29, 36, 43, 62], "g": [8, 12, 25, 26, 43, 45, 46, 49, 58, 64], "actor": [8, 36, 38, 42, 43, 44, 45, 62, 64], "change_clock": 8, "is_bypass": 8, "mode": [8, 17, 50], "adapt": [8, 29, 38, 42, 44, 45, 57, 62, 63, 64, 65, 66], "critic": [8, 49, 54, 55, 62], "msg": [8, 28, 29], "logcolor": 8, "color": 8, "red": 8, "annot": 8, "record": [8, 29], "normal": [8, 28, 39, 50, 64, 66], "ex": [8, 57], "stack": [8, 11, 12, 42], "trace": [8, 50], "get_logg": 8, "encapsul": 8, "warn": [8, 39, 43, 46, 66], "yellow": 8, "log_memori": 8, "nautilus_head": 8, "maxsiz": 8, "strip": 8, "back": [8, 15, 38, 39, 62], "coroutin": 8, "less": [8, 23, 25, 61], "size": [8, 18, 22, 26, 32, 43, 44, 45, 47, 59, 61], "infinit": 8, "integ": [8, 10, 22, 23, 29], "await": [8, 36, 45], "put": 8, "block": [8, 46, 47, 48, 52, 54, 55, 61], "item": 8, "remov": [8, 47, 55], "get": [8, 29, 45, 52, 60, 64], "unlik": [8, 25], "you": [8, 28, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65], "reliabl": [8, 42, 62], "know": [8, 39, 43, 58, 59], "qsize": 8, "your": [8, 25, 38, 41, 42, 43, 48, 49, 52, 56, 57, 58, 61, 63, 64, 65, 66], "thread": [8, 28, 42, 46, 62], "won": [8, 64], "t": [8, 28, 42, 47, 49, 50, 59, 64], "interrupt": 8, "capac": 8, "safe": [8, 28, 42, 49, 50, 54, 62], "same": [8, 18, 19, 28, 37, 39, 45, 46, 48, 54, 62, 66], "full": [8, 25, 37, 39, 43, 45, 47, 58, 64, 66], "never": [8, 25, 47], "wait": [8, 58], "avail": [8, 27, 36, 44, 45, 46, 47, 50, 57, 58, 61, 63, 64, 65], "get_nowait": 8, "queueempti": 8, "peek_back": 8, "without": [8, 20, 58, 62], "pop": 8, "peek_front": 8, "front": 8, "peek_index": 8, "indexerror": 8, "out": [8, 15, 41, 58, 61, 62, 64], "onto": [8, 54, 58], "slot": 8, "ad": [8, 52, 58, 61, 66], "put_nowait": 8, "queueful": 8, "number": [8, 20, 22, 23, 27, 28, 29, 32, 39, 43, 45, 47, 48], "to_list": 8, "copi": [8, 36, 58], "throttler": 8, "output_send": 8, "output_drop": 8, "buffer": [8, 29], "drop": [8, 10], "Will": [8, 17, 28, 29, 35, 43], "throttl": [8, 58], "would": [8, 25, 28, 41, 42, 48, 55, 58, 61], "exce": [8, 58], "unbound": 8, "so": [8, 11, 12, 17, 19, 25, 39, 42, 43, 49, 52, 53, 55, 58, 60, 61, 62, 64], "bound": 8, "upstream": 8, "is_limit": 8, "recv_count": 8, "sent_count": [8, 28], "livetim": 8, "ts_now": 8, "deleg": [8, 10, 11], "is_expir": 8, "iterate_next_tim": 8, "hash": [8, 18], "pop_ev": 8, "event_id": [8, 10, 19], "continu": [8, 39, 64], "looptim": 8, "threadtim": 8, "handl": [8, 12, 17, 23, 28, 30, 36, 43, 48, 51, 52, 55, 62, 64], "constant": [10, 42], "low": [10, 18, 29, 35, 64, 66], "throughout": [10, 18, 39, 42, 43, 44, 49, 52, 55, 60], "main": [10, 36, 43, 44, 46, 47, 48, 52, 57, 58], "focu": 10, "here": [10, 12, 36, 40, 43, 44, 48, 49, 50, 52, 58, 62], "effici": [10, 14, 16, 37, 42, 49, 62], "re": [10, 25, 28, 47, 48, 51, 52, 55, 62, 64], "usabl": 10, "form": 10, "entir": [10, 39, 41, 45, 62], "design": [10, 16, 21, 36, 38, 44, 46, 52, 54, 55, 62, 66], "philosophi": [10, 52, 62], "massag": 10, "finitestatemachin": 10, "correct": [10, 42, 43, 44, 45, 47, 54, 60, 61, 62], "entiti": [10, 20, 44], "complex": [10, 29, 43, 44, 50, 58, 62], "modul": [10, 29, 35, 42, 52, 58, 59, 61, 62], "iso": [10, 17, 46], "8601": [10, 46], "as_utc_index": 10, "datetimeindex": 10, "as_utc_timestamp": 10, "dt": [10, 59, 61], "dt_to_unix_nano": [10, 59, 61], "panda": [10, 59, 61], "accur": [10, 42], "microsecond": 10, "\u03bc": 10, "format_iso8601": 10, "input": [10, 41, 46, 58], "is_datetime_utc": 10, "els": [10, 17, 18, 26, 55, 58], "is_tz_awar": 10, "time_object": 10, "is_tz_naiv": 10, "naiv": 10, "maybe_dt_to_unix_nano": 10, "int64": 10, "maybe_unix_nanos_to_dt": 10, "nano": 10, "micros_to_nano": 10, "micro": 10, "round": [10, 18, 22, 27, 29], "millis_to_nano": 10, "milli": 10, "nanos_to_micro": 10, "nanos_to_milli": 10, "nanos_to_sec": 10, "secs_to_milli": 10, "sec": 10, "secs_to_nano": 10, "unix_nanos_to_dt": 10, "tupl": [10, 27, 65], "case": [10, 36, 38, 43, 44, 45, 55, 58, 59, 61, 63, 64, 65], "hold": [10, 12, 29, 39, 42, 62], "determinist": [10, 62], "state_machin": 10, "state_transition_t": 10, "initial_st": 10, "trigger_pars": 10, "state_pars": 10, "consist": [10, 11, 12, 44, 49, 62, 64], "parser": [10, 59], "need": [10, 25, 28, 38, 39, 43, 46, 47, 48, 49, 50, 51, 54, 57, 58, 59, 60, 61, 62, 64, 66], "state_str": 10, "process": [10, 28, 29, 39, 47, 61], "combin": [10, 20, 37, 44, 45, 54], "lookup": 10, "invalidstatetrigg": [10, 25], "add_not": 10, "with_traceback": 10, "tb": 10, "__traceback__": 10, "command": [10, 11, 12, 19, 36, 39, 42, 43, 48, 50, 51, 55], "command_id": [10, 11, 12], "document": [10, 12, 13, 37, 40, 42, 44, 47, 48, 54, 60, 64], "document_id": 10, "request": [10, 11, 25, 28, 29, 43, 44, 64, 65, 66], "request_id": [10, 11, 36], "respons": [10, 11, 28, 54], "correlation_id": [10, 11, 36], "response_id": [10, 11], "correl": [10, 11, 28], "basis_points_as_percentag": 10, "basis_point": [10, 47, 64], "basi": [10, 37, 47, 64], "point": [10, 12, 23, 28, 39, 42, 43, 47, 49, 64], "express": [10, 22, 26, 47, 62], "100": [10, 27, 47, 55, 64], "fast_mad": 10, "ndarrai": 10, "mean": [10, 28, 58, 59, 62, 66], "absolut": [10, 29], "deviat": 10, "numpi": [10, 49], "arrai": [10, 29], "fast_mad_with_mean": 10, "pre": [10, 39, 49, 51, 58], "fast_mean": 10, "evalu": [10, 49], "10x": 10, "faster": 10, "np": 10, "200": [10, 18, 47], "fast_mean_iter": 10, "next_valu": 10, "current_valu": 10, "expected_length": 10, "drop_left": 10, "left": [10, 40, 42, 55, 60], "fast_std": 10, "std": 10, "fast_std_with_mean": 10, "25x": 10, "pseudo": 10, "univers": [10, 28, 42, 62], "version": [10, 43, 50, 57], "4": 10, "128": 10, "bit": [10, 29, 57], "rfc": 10, "4122": 10, "panic": [10, 20], "runtim": [10, 20, 42, 45, 49, 52, 54, 62], "universally_unique_identifi": 10, "tool": [11, 32, 35, 42, 51, 52, 57, 62], "platform": [11, 12, 13, 14, 39, 40, 42, 43, 44, 45, 46, 47, 48, 54, 57, 60, 62, 64], "architectur": [11, 12, 55], "somewhat": [11, 12], "mirror": [11, 12], "beneath": [11, 12], "databas": [11, 12, 39, 57, 59, 61], "altern": [11, 12, 43, 44, 51, 55, 64], "abl": [11, 12, 19, 28, 38, 48, 54, 58, 62, 66], "written": [11, 12, 46, 62], "due": [11, 12, 19, 38, 62], "reusabl": [11, 12], "help": [11, 12, 25, 32, 35, 43, 44, 50, 52, 60, 62], "datacommand": 11, "clientid": [11, 12, 20, 36, 38, 64], "client_id": [11, 12, 36, 38, 64], "datatyp": [11, 18, 36, 38, 64], "data_typ": [11, 18, 36, 38, 64], "explicitli": [11, 12, 19, 25, 36, 42, 64, 66], "enough": [11, 19, 43, 50, 62, 65], "rout": [11, 37], "datarequest": [11, 36], "datarespons": 11, "subscrib": [11, 18, 28, 38, 39, 43, 44, 45, 64], "subscript": [11, 28, 64], "unsubscrib": [11, 28], "engin": [12, 16, 36, 41, 42, 43, 59, 61, 62], "matchingcor": [12, 39], "trigger_stop_ord": 12, "fill_market_ord": 12, "fill_limit_ord": 12, "match": [12, 19, 20, 25, 26, 28, 35, 39, 45, 66], "add_ord": 12, "delete_ord": 12, "get_ord": 12, "client_order_id": [12, 19, 25, 26, 43], "get_orders_ask": 12, "get_orders_bid": 12, "is_limit_match": 12, "is_stop_trigg": 12, "is_touch_trigg": 12, "match_limit_if_touched_ord": 12, "match_limit_ord": 12, "match_market_if_touched_ord": 12, "match_ord": 12, "order_typ": [12, 19, 25], "match_stop_limit_ord": 12, "match_stop_market_ord": 12, "order_exist": 12, "cancelallord": 12, "tradingcommand": 12, "cancelord": [12, 19], "venueorderid": [12, 19, 20, 25, 26], "venue_order_id": [12, 19, 25, 26], "assign": [12, 19, 20, 23, 25, 26, 28, 39, 47, 64], "onix": [12, 19, 20, 23, 37], "biz": [12, 19, 20, 23, 37], "fix": [12, 17, 19, 20, 23, 27, 37, 47, 58, 62], "5": [12, 18, 19, 20, 23, 37, 43, 47], "sp2": [12, 19, 23, 37], "msgtype_f_70": 12, "html": [12, 19, 20, 23, 37, 50], "modifyord": [12, 19], "modifi": [12, 19, 37, 39, 66], "exist": [12, 28, 43, 46, 47, 55, 59, 61, 66], "msgtype_g_71": 12, "queryord": 12, "submitord": [12, 39], "submit": [12, 19, 25, 47, 64, 66], "msgtype_d_68": 12, "submitorderlist": 12, "order_list": 12, "batch": [12, 32, 58], "bulk": [12, 25, 37, 42], "parent": [12, 19, 22, 25, 37, 43, 47], "neworderlist": 12, "protocol": [12, 20, 29], "msgtype_e_69": 12, "has_emulated_ord": 12, "least": [12, 25, 64], "executionmassstatu": 12, "report_id": 12, "mass": 12, "statu": [12, 25, 66], "those": [12, 36, 62], "open": [12, 18, 19, 25, 26, 47, 49, 58, 62, 64], "add_order_report": 12, "orderstatusreport": 12, "tradereport": 12, "add_position_report": 12, "positionstatusreport": 12, "add_trade_report": 12, "order_report": 12, "position_report": 12, "trade_report": 12, "executionreport": 12, "orderstatu": [12, 25], "order_statu": 12, "filled_qti": [12, 25], "ts_accept": 12, "ts_last": [12, 25, 26], "order_list_id": [12, 19, 25, 37], "no_conting": [12, 25], "avg_px": [12, 25], "cancel_reason": 12, "ts_trigger": [12, 25], "origin": [12, 20, 25, 29, 39, 43, 62], "accept": [12, 19, 25, 55], "reason": [12, 19, 41, 48, 49, 54, 55, 58, 59, 61, 62, 64, 66], "leaves_qti": [12, 25], "leav": [12, 25, 47], "position_sid": [12, 25], "venue_position_id": 12, "flat": [12, 19, 25, 26, 47], "ticket": [12, 49], "om": [12, 26], "resolut": [12, 44, 62], "signed_decimal_qti": [12, 25, 26], "sign": [12, 19, 25, 26, 29], "tradeid": [12, 19, 20, 25, 26], "trade_id": [12, 19, 25, 26], "welcom": [13, 40, 44, 49, 52, 56, 60, 62], "cython": [13, 39, 40, 42, 49, 51, 52, 54], "nautilustrad": [13, 36, 40, 42, 43, 44, 47, 48, 50, 52, 56, 58, 60, 61, 63, 64, 65, 66], "automat": [13, 36, 46, 47, 51, 58], "latest": [13, 45, 46, 50, 57, 58], "sourc": [13, 18, 44, 48, 54, 59, 60, 61, 62, 64], "repositori": 13, "develop": [13, 42, 51, 55, 57, 58, 62], "branch": 13, "sphinx": 13, "still": [13, 19, 43, 49, 50, 64], "extend": [13, 42, 52, 62], "beta": [13, 64], "phase": [13, 64], "futur": [13, 36, 43, 44, 45, 47, 54, 60, 62, 64, 65, 66], "mai": [13, 18, 23, 25, 26, 28, 37, 39, 42, 43, 45, 48, 55, 58, 61, 64], "separ": [13, 20, 23, 36, 37, 45, 46, 48, 49, 57, 58, 59, 61, 64], "stabl": [13, 46, 57], "releas": [13, 37], "master": 13, "signal": [14, 58], "discoveri": 14, "idea": [14, 62], "inspir": [14, 62], "own": [14, 52, 54, 66], "proprietari": 14, "technologi": [15, 42], "box": [15, 62], "redi": [15, 57, 62], "overarch": 16, "uvloop": [16, 44, 62], "uint8_t": [17, 23], "uint16_t": 17, "iso4217": 17, "currencytyp": 17, "currency_typ": 17, "medium": [17, 35], "denomin": [17, 23, 29], "up": [17, 23, 37, 38, 44, 45, 48, 50, 58, 59, 60, 61, 64], "9": [17, 23, 57], "uint16": 17, "4217": 17, "overflowerror": [17, 23, 29], "from_str": [17, 18, 20, 23, 45, 47, 48, 58, 59, 61], "strict": 17, "unknown": [17, 29], "veri": [17, 38, 58], "like": [17, 43, 48, 51, 58, 59, 61, 62], "cryptocurr": [17, 45, 64], "robust": [17, 41, 49, 62], "8": [17, 29], "is_crypto": 17, "is_fiat": 17, "fiat": [17, 45], "uint8": [17, 23, 26], "overwrit": 17, "map": [17, 18, 19, 27, 52], "overwritten": 17, "bar": [18, 44, 61, 62, 64], "bartyp": 18, "bar_typ": [18, 43, 48, 59], "close": [18, 19, 25, 26, 29, 37, 47, 48, 49, 66], "volum": [18, 44, 61, 64], "is_revis": 18, "aggreg": [18, 44], "revis": 18, "previou": [18, 28, 35], "is_single_pric": 18, "ohlc": 18, "barspecif": [18, 44], "step": [18, 27, 44, 49, 50, 51, 52, 54, 62], "baraggreg": [18, 44], "rule": [18, 35], "sampl": [18, 59], "check_information_aggreg": 18, "check_threshold_aggreg": 18, "threshold": [18, 58], "check_time_aggreg": 18, "exampl": [18, 20, 23, 28, 29, 40, 41, 43, 44, 45, 46, 47, 48, 55, 57, 58, 61, 64], "mid": [18, 44, 47, 58], "from_timedelta": 18, "durat": [18, 19, 26], "minut": [18, 44, 59, 61], "is_information_aggreg": 18, "driven": [18, 42, 62], "tick_run": [18, 44], "volume_run": [18, 44], "value_run": [18, 44], "is_threshold_aggreg": 18, "tick_imbal": [18, 44], "volume_imbal": [18, 44], "value_imbal": [18, 44], "is_time_aggreg": 18, "week": [18, 44], "month": [18, 44, 53, 59, 61], "ambigu": 18, "bar_spec": 18, "aggregationsourc": 18, "aggregation_sourc": 18, "extern": [18, 20, 59], "dataengin": [18, 38, 45], "necessari": [18, 28, 29, 39, 43, 45, 47, 52, 54, 58, 64, 65], "accordingli": 18, "publish": [18, 28, 36, 43, 44, 45, 66], "It": [18, 20, 38, 39, 41, 43, 44, 45, 48, 52, 54, 57, 59, 60, 61, 62, 64, 66], "is_externally_aggreg": 18, "is_internally_aggreg": 18, "spec": [18, 49], "metadata": [18, 36, 38, 64], "hashabl": 18, "content": [18, 60], "themselv": [18, 37, 42], "topic": [18, 28, 60], "genericdata": 18, "wrapper": 18, "wrap": [18, 59], "fundament": [19, 23, 47, 54], "is_report": 19, "orderaccept": 19, "reconcili": 19, "orderev": [19, 25], "ordstatu": 19, "39": 19, "dure": [19, 41, 49, 52, 58], "tagnum_39": 19, "ordercancelreject": 19, "reject": [19, 25, 45], "ordercancel": 19, "orderdeni": 19, "deni": [19, 25, 39], "could": [19, 21, 28, 36, 38, 43, 49, 50, 51, 55, 61], "unsupport": [19, 66], "featur": [19, 28, 40, 44, 50, 52, 54, 58, 60, 64], "exceed": [19, 45], "denied_reason": 19, "valid_str": 19, "orderexpir": 19, "no_order_sid": [19, 25, 43], "is_bui": [19, 25], "is_sel": [19, 25], "orderiniti": [19, 25, 39, 43], "linked_order_id": [19, 25, 37], "parent_order_id": [19, 25], "exec_spawn_id": [19, 25, 43], "over": [19, 43, 44, 48, 49, 59, 61, 64], "wire": [19, 43, 48], "exactli": [19, 29, 39, 45], "had": 19, "emulationtrigg": 19, "link": [19, 25, 37, 42, 47, 61, 62], "spawn": [19, 25], "primari": [19, 25, 43, 66], "ordermodifyreject": 19, "orderpendingcancel": 19, "pend": [19, 23], "orderpendingupd": 19, "orderreject": 19, "ordersubmit": 19, "ordertrigg": 19, "stoplimit": 19, "orderupd": 19, "positionchang": 19, "opening_order_id": [19, 26], "signed_qti": [19, 26], "peak_qti": [19, 26], "avg_px_open": [19, 26], "avg_px_clos": [19, 26], "realized_return": [19, 26], "ts_open": [19, 26], "positionev": 19, "idt": 19, "peak": [19, 26], "direct": [19, 26, 28, 43, 47, 48], "closing_order_id": [19, 26], "param": [19, 43, 66], "duration_n": [19, 26], "ts_close": [19, 26], "positionclos": 19, "positionopen": [19, 58], "correctli": [20, 23, 38, 43, 49, 58, 59, 61], "two": [20, 22, 25, 27, 29, 36, 37, 43, 46, 47, 48, 49, 61, 63, 64, 65], "hyphen": [20, 48], "ib": [20, 57, 65, 66], "d02851908": 20, "firm": [20, 62], "get_id": 20, "get_issu": 20, "tagnum_1003": 20, "ticker": [20, 22, 25, 26, 44, 64], "charact": [20, 28, 49], "aud": [20, 45, 47, 59, 63], "usd": [20, 23, 45, 47, 53, 58, 59, 61, 65], "idealpro": [20, 47, 65], "btcusdt": [20, 36, 45, 47, 64], "binanc": [20, 36, 43, 45, 47, 48, 66], "emacross": [20, 59], "001": [20, 43, 46, 48], "get_tag": 20, "is_extern": 20, "global": 20, "interact": [20, 37, 42, 43, 47, 52, 57, 66], "did": 20, "tradabl": [20, 22, 45], "financi": [20, 22, 23, 26, 27, 61], "ticker_symbol": 20, "1003": 20, "onc": [20, 25, 28, 39, 43, 47, 48, 51, 59, 61], "counterparti": 20, "abbrevi": 20, "tester": [20, 46], "rich": [21, 42, 52, 62], "agnost": [21, 62], "seek": [21, 47, 50], "wai": [21, 28, 38, 39, 42, 44, 45, 46, 47, 53, 58, 62, 64, 66], "around": [21, 50], "native_symbol": 22, "assetclass": 22, "asset_class": 22, "assettyp": 22, "asset_typ": 22, "quote_curr": [22, 26], "is_invers": [22, 26], "price_precis": [22, 26, 27], "size_precis": [22, 26], "size_incr": 22, "multipli": [22, 26, 45], "maker_fe": [22, 45], "taker_fe": [22, 45], "price_incr": 22, "lot_siz": 22, "max_quant": [22, 45], "min_quant": [22, 45], "max_not": [22, 45], "min_not": [22, 45], "max_pric": [22, 27, 45], "min_pric": [22, 27, 45], "tick_scheme_nam": 22, "act": [22, 38, 47, 52, 55, 58, 64], "nativ": [22, 29, 45, 62, 64, 66], "cost": [22, 26], "increment": [22, 27], "contract": [22, 23, 45, 47, 54, 64, 65], "determin": [22, 28, 29, 43, 44, 61], "lot": [22, 45, 52, 62], "board": 22, "fee": [22, 47], "notion": [22, 26, 45], "scheme": 22, "base_from_dict": 22, "base_to_dict": 22, "get_base_curr": 22, "get_settlement_curr": 22, "linear": 22, "quanto": 22, "settlement_curr": 22, "make_pric": [22, 43, 45], "make_qti": [22, 43, 45], "printabl": 22, "next_ask_pric": [22, 27], "num_tick": 22, "awai": [22, 25, 27, 47], "nearest": [22, 27], "move": [22, 27, 37, 47], "next_bid_pric": [22, 27], "notional_valu": [22, 26], "marginaccountbal": 23, "money_max": 23, "9_223_372_036": 23, "money_min": 23, "as_decim": 23, "as_doubl": 23, "from_raw": 23, "whitespac": 23, "1000000": 23, "00": [23, 43, 47], "infer": [23, 36, 64], "to_str": 23, "place": [23, 25, 27, 37, 47, 50, 55, 59], "vari": [23, 47], "certain": [23, 28, 42, 43, 45, 47, 58], "under": [23, 41, 43, 49, 64, 66], "price_max": 23, "price_min": 23, "whole": 23, "fraction": 23, "from_int": [23, 47, 58, 59, 61], "int64_t": 23, "digit": 23, "follow": [23, 29, 36, 37, 38, 39, 41, 43, 44, 46, 47, 49, 50, 51, 53, 57, 58, 59, 61, 63, 64, 65, 66], "raw_to_f64": 23, "non": [23, 58], "capabl": [23, 43, 58, 60, 62, 64], "store": [23, 59, 61], "share": [23, 42, 45, 48, 57, 64], "quantity_max": 23, "18_446_744_073": 23, "quantity_min": 23, "qty": 23, "init_id": 25, "offer": [25, 45, 47, 55, 62, 63, 65], "increas": [25, 38, 62], "likelihood": 25, "speed": [25, 62], "protect": [25, 61], "far": 25, "higher": [25, 28, 44, 46, 60, 62], "On": [25, 36], "moo": 25, "moc": 25, "interactivebrok": 25, "com": [25, 50, 53, 57, 58, 59, 61], "php": 25, "closing_sid": 25, "has_pric": 25, "has_trigger_pric": 25, "summari": [25, 26, 47, 50], "descript": [25, 26, 35, 48], "init_ev": 25, "is_aggress": 25, "is_cancel": 25, "is_child_ord": 25, "is_clos": [25, 26], "longer": [25, 39, 49, 55], "possibl": [25, 27, 28, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 54, 57, 64, 66], "status": 25, "is_conting": 25, "is_emul": [25, 39], "held": [25, 32, 37], "is_inflight": 25, "flight": 25, "pending_cancel": 25, "pending_upd": 25, "is_open": [25, 26], "partially_fil": 25, "is_parent_ord": 25, "is_pass": 25, "passiv": 25, "is_pending_cancel": 25, "is_pending_upd": 25, "is_post_onli": 25, "is_primari": 25, "is_reduce_onli": 25, "is_spawn": 25, "last_trade_id": [25, 26], "opposite_sid": 25, "opposit": [25, 26, 47], "side_str": 25, "10": [25, 26, 29, 43, 47, 48, 53, 57, 58, 59], "25": [25, 26], "transform_pi": 25, "would_reduce_onli": 25, "position_qti": 25, "against": [25, 37, 47, 57], "expire_time_n": 25, "favor": [25, 37], "loo": 25, "loc": 25, "expiri": 25, "attain": 25, "penetr": 25, "significantli": [25, 42], "below": [25, 36, 39, 42, 43, 46, 48, 49, 57, 58, 59, 61, 64, 65], "basic": [25, 48, 58], "becom": [25, 37, 43, 47, 52, 62, 64], "enter": [25, 47, 49], "elimin": [25, 54, 62], "cannot": [25, 36, 47, 62], "expos": [25, 58], "even": [25, 48, 49], "is_trigg": 25, "To": [25, 29, 42, 43, 44, 49, 54, 57, 58, 59, 60, 63, 64, 65, 66], "mtl": 25, "best": [25, 37, 47, 52], "partial": [25, 37, 47, 59], "remaind": [25, 47, 59], "portion": [25, 47], "touch": 25, "similar": [25, 36, 42, 61], "init": [25, 57], "depend": [26, 35, 43, 45, 51, 57, 59, 62, 64], "duplic": [26, 48], "cost_curr": 26, "is_long": 26, "is_opposite_sid": 26, "is_short": 26, "In": [26, 36, 37, 43, 54, 58, 61, 62, 64], "side_from_order_sid": 26, "space": [27, 49], "fixedtickschem": 27, "min_tick": 27, "max_tick": 27, "tickschem": 27, "tieredtickschem": 27, "tier": [27, 47], "max_ticks_per_ti": 27, "find_tick_index": 27, "get_tick_schem": 27, "list_tick_schem": 27, "register_tick_schem": 27, "tick_schem": 27, "round_down": 27, "down": [27, 39], "round_up": 27, "loos": [28, 42], "coupl": [28, 42, 49, 59, 61], "clock": [28, 36, 43], "facilit": [28, 42, 44, 62], "pattern": [28, 42], "produc": [28, 29, 42, 45, 46, 52], "consum": [28, 37, 42, 46], "pub": [28, 42], "sub": [28, 42], "req": [28, 42], "rep": [28, 42], "endpoint": [28, 29, 64], "wildcard": 28, "hierarch": 28, "asterisk": 28, "question": 28, "potenti": [28, 44, 52], "comp": 28, "anyth": 28, "begin": [28, 29, 58], "comput": 28, "mp": 28, "camp": 28, "p": [28, 58], "coop": 28, "address": [28, 29, 43, 62], "has_subscrib": 28, "give": [28, 62], "is_subscrib": 28, "prioriti": [28, 42, 66], "pub_count": 28, "highest": [28, 40, 42, 60, 62], "registr": 28, "req_count": 28, "log": [28, 29, 36, 47, 50, 58, 64, 66], "res_count": 28, "prior": [28, 29], "shouldn": 28, "most": [28, 29, 39, 42, 45, 54, 62, 63, 64, 65], "what": [28, 38, 49, 50, 54, 64], "inappropri": 28, "effect": [28, 42], "sound": [28, 45], "behaviour": [28, 47, 54], "is_matching_pi": 28, "organ": [28, 45], "inherit": [29, 35, 41, 43, 48], "assist": [29, 42, 52], "feed": [29, 64], "servic": 29, "httpclient": [29, 36], "nameserv": 29, "ttl_dns_cach": 29, "86400": 29, "ssl_context": 29, "sslcontext": 29, "union": 29, "fingerprint": 29, "connector_kwarg": 29, "latency_qs": 29, "1000": [29, 48], "asynchron": [29, 44, 62], "dn": 29, "context": [29, 36, 39, 44, 47, 49, 62], "connector": 29, "word": 29, "maxlen": 29, "dequ": 29, "avg_lat": 29, "trip": 29, "affect": [29, 35], "hit": [29, 47], "server": [29, 48, 58], "yet": 29, "session": [29, 35, 41, 47], "delet": [29, 58], "url": 29, "header": [29, 57, 61], "clientrespons": 29, "max_lat": 29, "min_lat": 29, "clientsess": 29, "aiohttp": 29, "u": [29, 54, 57, 58, 61, 66], "utf": 29, "socket": 29, "read": [29, 31, 37, 40, 42, 45, 50, 56, 58, 59, 61], "carriag": 29, "line": [29, 49, 50, 55, 58, 59, 61], "split": [29, 43, 59, 61], "wsmsgtype": 29, "qualnam": [29, 35], "boundari": [29, 35, 42, 54, 64, 66], "intflag": 29, "as_integer_ratio": 29, "whose": [29, 37, 43], "bit_count": 29, "ones": 29, "binari": [29, 42, 57, 62], "known": [29, 37, 47], "popul": 29, "13": 29, "0b1101": 29, "3": [29, 53, 57], "bit_length": 29, "37": 29, "0b100101": 29, "conjug": 29, "ration": 29, "lowest": [29, 40, 42, 54, 60], "from_byt": 29, "byteord": 29, "big": 29, "bytearrai": 29, "signific": 29, "littl": [29, 55, 58], "end": [29, 35, 43, 44, 47, 49, 59, 61], "sy": 29, "complement": 29, "imag": [29, 58], "imaginari": 29, "real": [29, 42, 44, 62], "to_byt": 29, "websocketcli": [29, 36], "max_retry_connect": 29, "pong_msg": 29, "log_send": 29, "log_recv": 29, "web": [29, 58], "attempt": [29, 37, 42, 49, 66], "pong": 29, "recv": 29, "ws_url": 29, "ws_kwarg": 29, "connection_retry_count": 29, "retri": 29, "max": [29, 41, 53], "send_json": 29, "unknown_message_count": 29, "storag": [30, 42, 59, 61], "retriev": [30, 42, 63, 65], "portfoliofacad": 31, "facad": 31, "abstract": [31, 32, 42, 47, 55], "is_completely_flat": 31, "is_flat": 31, "is_net_long": 31, "is_net_short": 31, "net_exposur": 31, "net_posit": 31, "positions": 32, "fixedrisks": 32, "stop_loss": 32, "equiti": [32, 45, 62, 65], "commission_r": 32, "exchange_r": 32, "hard_limit": 32, "unit_batch_s": 32, "v": [32, 58], "hard": 32, "risk_bp": 32, "xrate": 32, "update_instru": 32, "sizer": 32, "besid": 33, "packag": [35, 44, 51, 57, 58, 62, 65], "major": [35, 42, 62], "interfac": [35, 42, 54, 66], "economicnewseventfilt": 35, "impact": [35, 43], "news_data": 35, "econom": 35, "three": [35, 44], "letter": 35, "next_ev": 35, "time_now": 35, "newsev": 35, "unfiltered_data_start": 35, "unfiltered_data_end": 35, "prev_ev": 35, "forexsess": 35, "forexsessionfilt": 35, "local_from_utc": 35, "next_end": 35, "mondai": 35, "fridai": 35, "sydnei": 35, "0700": 35, "1600": 35, "australia": 35, "tokyo": 35, "0900": 35, "1800": 35, "asia": 35, "london": 35, "0800": 35, "europ": 35, "york": 35, "1700": 35, "america": 35, "new_york": 35, "next_start": 35, "prev_end": 35, "prev_start": 35, "newsimpact": 35, "compris": 36, "instrumentprovid": [36, 45], "datacli": 36, "executioncli": [36, 39, 43], "suggest": 36, "standalon": 36, "discov": [36, 45], "purpos": [36, 48, 59, 61, 62], "sandbox": [36, 39, 42, 44], "environ": [36, 39, 44, 52, 57, 58, 62, 63, 64, 65], "consumpt": [36, 38], "testnet": 36, "import": [36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 58, 60, 61, 65], "binanceaccounttyp": [36, 64], "get_cached_binance_http_cli": 36, "binancefuturesinstrumentprovid": 36, "usdt_futur": [36, 64], "get_event_loop": 36, "getenv": [36, 65], "binance_futures_testnet_api_kei": [36, 64], "secret": 36, "binance_futures_testnet_api_secret": [36, 64], "is_testnet": 36, "load_all_async": [36, 45], "behavior": 36, "tradingnod": [36, 44, 63, 64, 65], "load": [36, 58, 64, 65], "instrumentproviderconfig": [36, 64, 65], "load_al": [36, 64], "load_id": [36, 65], "perp": [36, 45, 47, 48, 64], "ethusdt": [36, 43, 45, 47, 48], "request_instru": 36, "anywher": 36, "anytim": 36, "pyx": [36, 51, 52], "cpdef": [36, 43], "not_non": 36, "cdef": 36, "_handle_instrument_respons": 36, "_clock": 36, "_send_data_req": 36, "py": [36, 43, 50, 51, 58], "def": [36, 38, 41, 43, 45, 48, 58, 59, 61, 64], "_instrument_provid": 36, "_log": [36, 50, 58], "_handle_data_respons": 36, "guid": [37, 38, 40, 42, 47, 49, 51, 56, 57, 58, 59, 66], "conjunct": [37, 47], "broker": [37, 42, 47, 48, 57, 58, 66], "involv": [37, 43, 50, 58], "larger": [37, 44, 66], "togeth": [37, 47, 53, 64], "relationship": [37, 47], "construct": [37, 42, 54, 64, 66], "thei": [37, 39, 40, 47, 55, 64], "1385": 37, "tagnum_1385": 37, "marketplac": 37, "made": [37, 39, 42, 45, 48], "stock": [37, 65], "effort": 37, "unexecut": 37, "reduct": 37, "done": [37, 58, 61], "easi": [37, 39], "modular": [38, 42, 62, 66], "natur": 38, "flexibl": [38, 43, 44, 48, 58, 62, 64], "cover": [38, 40, 54, 55], "some": [38, 42, 43, 45, 46, 49, 50, 52, 54, 58, 64, 66], "mydatapoint": 38, "__init__": [38, 43, 48, 58], "x": [38, 41, 61], "y": [38, 46, 58, 59, 61], "z": 38, "super": [38, 48, 58], "As": [38, 43, 49, 59, 64], "see": [38, 39, 42, 43, 45, 46, 48, 50, 57, 58, 59, 61, 64, 65], "them": [38, 42, 43, 45, 58], "subscribe_data": [38, 64], "some_optional_categori": 38, "my_adapt": 38, "on_data": [38, 64], "isinst": [38, 58, 64], "someth": [38, 64], "regardless": 39, "util": [39, 42, 44, 49, 52, 62], "orderemul": [39, 43], "bid_ask": [39, 47], "subject": [39, 40, 49], "regular": [39, 43], "retain": [39, 45], "progress": [39, 61], "stage": [39, 59], "submit_ord": [39, 43, 48, 58], "Then": [39, 56, 58, 59, 63, 64, 65], "riskengin": [39, 43, 45], "insid": [39, 65], "arriv": [39, 42, 43], "transform": 39, "treat": 39, "attach": [39, 47], "modif": [39, 47, 51], "executionengin": [39, 43], "via": [39, 43, 44, 46, 58, 62, 65], "submiss": 39, "ye": [39, 64], "orders_emul": 39, "is_order_emul": 39, "orders_emulated_count": 39, "detail": [39, 40, 46, 47, 48, 58, 60, 61], "Or": [39, 45], "is_emulated_c": 39, "advis": [39, 66], "reli": 39, "job": [39, 52, 62], "crash": [39, 42], "shut": 39, "reload": 39, "rememb": 39, "lost": 39, "choos": [40, 48], "although": [40, 43, 55, 61], "varieti": [41, 66], "analys": 41, "categor": 41, "calculate_": 41, "precondit": 41, "len": [41, 61], "stat": [41, 64], "degener": 41, "nan": 41, "turn": 41, "tear": 41, "sheet": 41, "head": 41, "deriv": [41, 43, 64], "describ": [42, 44, 49, 58], "techniqu": 42, "emploi": 42, "ddd": 42, "achiev": [42, 44, 48, 54, 63, 64, 65], "decis": 42, "off": [42, 43, 49, 59, 61], "compet": 42, "roughli": 42, "weight": 42, "testabl": [42, 62], "maintain": [42, 54, 55, 58, 62], "deploy": [42, 44, 62], "codebas": [42, 44, 49, 50, 52, 54, 55], "actual": [42, 43, 48, 61, 62, 65], "compos": 42, "histor": [42, 44, 59, 61, 62, 64, 66], "paper": [42, 44], "much": [42, 47, 59, 61], "formal": [42, 54], "nautiluskernel": 42, "kernel": 42, "style": 42, "plug": 42, "hook": [42, 51], "extrem": 42, "view": [42, 49], "understand": [42, 43, 50, 52], "research": [42, 59, 61, 62], "overhead": 42, "switch": 42, "didn": 42, "improv": [42, 50], "predict": 42, "synchron": [42, 58], "Of": 42, "lmax": 42, "award": 42, "disruptor": 42, "articl": 42, "martin": 42, "fowler": 42, "cohes": 42, "navig": [42, 57], "nav": 42, "menu": 42, "network": [42, 44, 62], "serial": [42, 43, 44, 45, 48], "analysi": 42, "persist": [42, 58, 59, 61, 62], "catalog": [42, 58, 61], "componentri": 42, "node": [42, 44, 46, 58, 59, 63, 64, 65], "foundat": 42, "nautilus_cor": 42, "collect": [42, 46, 49], "rust": [42, 46, 57], "cbindgen": [42, 54], "product": [42, 52, 55, 62, 64], "resid": 42, "bind": [42, 62], "extens": [42, 51, 52, 55, 62], "compil": [42, 51, 52, 54, 57, 62], "cpython": [42, 52, 62], "build": [42, 47, 48, 49, 52, 57, 58, 63, 64, 65], "wheel": [42, 57, 62], "softwar": [42, 44, 62], "memori": [42, 52, 54, 61, 62], "rustc": [42, 57], "unsaf": 42, "section": [42, 54, 63, 64, 65], "bloat": 42, "docstr": 42, "undocu": 42, "third": 42, "parti": 42, "multipl": [43, 44, 49, 58, 59, 61, 62], "simultan": [43, 62], "sever": [43, 47, 52, 64], "crucial": 43, "execalgorithm": 43, "liveexecutionengin": 43, "liveexecutioncli": 43, "submit_order_list": [43, 48], "modify_ord": 43, "cancel_ord": 43, "cancel_all_ord": 43, "close_posit": [43, 58], "close_all_posit": [43, 58], "query_ord": 43, "hood": 43, "relev": [43, 49], "look": [43, 60], "arrow": [43, 44], "movement": 43, "across": [43, 44, 62], "individu": [43, 46, 64], "explain": [43, 49, 54, 58], "conveni": [43, 45, 58], "boilerpl": [43, 59], "prefer": [43, 48, 51], "show": [43, 59], "simpl": [43, 58, 59, 61, 62], "order_factori": [43, 47, 58], "trade_s": [43, 48, 58, 59], "5000": [43, 47], "last_trad": [43, 47], "horizon_sec": 43, "20": [43, 47, 48, 59], "interval_sec": 43, "aim": [43, 49, 62, 66], "evenli": 43, "spread": 43, "horizon": 43, "smaller": 43, "minim": [43, 48, 58], "concentr": 43, "final": [43, 51, 55, 61, 63, 64, 65], "demonstr": [43, 58], "backtestengin": [43, 44, 58], "ema_cross_twap": 43, "emacrosstwap": 43, "emacrosstwapconfig": 43, "exec_algorithm": 43, "twapexecalgorithm": 43, "add_exec_algorithm": 43, "ethusdt_bin": 43, "250": [43, 47], "05": 43, "fast_ema_period": [43, 48, 59], "slow_ema_period": [43, 48, 59], "twap_horizon_sec": 43, "twap_interval_sec": 43, "timer": [43, 48], "addition": 43, "secondari": 43, "becaus": [43, 54, 64], "thoroughli": 43, "starter": 43, "on_ord": 43, "noqa": 43, "too": 43, "readi": [43, 58], "spawn_market": 43, "spawn_market_to_limit": 43, "spawn_limit": 43, "aris": 43, "desir": [43, 48], "routin": 43, "intent": [43, 55], "simpli": [43, 48, 58, 59, 61, 64], "convent": [43, 46, 49, 50], "spawn_sequ": 43, "20230404": 43, "000": [43, 47], "e1": 43, "terminologi": 43, "chosen": [43, 59, 61], "avoid": [43, 54, 55], "conflict": [43, 66], "confus": 43, "deal": 43, "aid": [43, 54, 55], "keep": [43, 49, 55, 62], "orders_for_exec_algorithm": 43, "orders_for_exec_spawn": 43, "truth": [44, 60], "discrep": [44, 60], "stai": [44, 60], "interchag": [44, 60], "deploi": [44, 62], "project": [44, 51, 54, 55, 57, 62, 66], "respect": [44, 55], "subcompon": 44, "easili": [44, 61, 62], "nearli": 44, "messagepack": 44, "apach": 44, "feather": 44, "commun": [44, 62], "backtestnod": [44, 58, 59], "parquetdatacatalog": [44, 59], "ingest": [44, 48, 64], "demo": 44, "boost": 44, "linux": [44, 57, 62], "maco": [44, 57, 62], "comprehens": 44, "orderbookdelta": 44, "l1": 44, "l2": 44, "l3": 44, "orderbooksnapshot": 44, "quotetick": [44, 58, 59, 61], "tradetick": [44, 61], "venuestatusupd": 44, "instrumentstatusupd": 44, "k": [44, 45], "dollar": 44, "currencypair": 45, "cryptoperpetu": 45, "perpetu": [45, 47, 64, 66], "swap": [45, 58], "cryptofutur": 45, "deliver": [45, 58], "underli": [45, 52], "bettinginstru": 45, "sport": [45, 66], "game": 45, "ethereum": 45, "dataset": 45, "incorrectli": 45, "truncat": 45, "surpris": 45, "testinstrumentprovid": [45, 59, 61], "audusd": [45, 59], "default_fx_cci": [45, 59, 61], "binanceinstrumentprovid": [45, 64], "binance_http_cli": 45, "live_logg": 45, "flexibli": 45, "autom": [45, 62], "definit": [45, 52, 54, 61, 64], "subscribe_instru": 45, "on_instru": 45, "upon": 45, "90500": 45, "150": 45, "recommend": [45, 50, 51, 52, 56, 57], "demand": [45, 47], "necessarili": [45, 47, 64], "unifi": [45, 47, 66], "mpsc": 46, "channel": 46, "crossbeam": 46, "writer": 46, "stderr": 46, "vector": [46, 62], "loggingconfig": [46, 50, 58], "By": [46, 59], "dbg": 46, "inf": 46, "wrn": 46, "err": 46, "rotat": 46, "consol": 46, "log_level": [46, 50, 58], "_": 46, "d": [46, 59, 61], "001_2023": 46, "03": [46, 53], "23_635a4539": 46, "4fe2": 46, "4cb1": 46, "9be3": 46, "3079ba8d879": 46, "log_directori": 46, "basenam": 46, "log_file_nam": 46, "log_component_level": 46, "mention": 46, "config_nod": [46, 65], "tradingnodeconfig": [46, 50, 63, 64, 65], "log_level_fil": 46, "log_file_format": 46, "omit": [46, 63, 64, 65], "backtestengineconfig": [46, 50, 58, 59], "along": 47, "larg": [47, 61, 62], "essenti": 47, "provis": 47, "exact": 47, "stand": 47, "howev": [47, 48, 49, 50, 52, 55, 57, 58, 61, 62, 64], "explanatori": 47, "restrict": [47, 55], "brief": 47, "good": [47, 48], "til": 47, "kill": 47, "opg": 47, "ever": 47, "particip": 47, "aggressor": 47, "simulatedexchang": 47, "visibl": [47, 50], "hidden": 47, "equival": 47, "double_last": 47, "consecut": 47, "double_bid_ask": 47, "last_or_bid_ask": 47, "mid_point": 47, "100bp": 47, "price_ti": 47, "easiest": 47, "care": [47, 54], "don": [47, 50], "simpler": 47, "clariti": 47, "clearli": [47, 66], "comment": [47, 49, 55], "ecn": [47, 58], "100_000": [47, 59, 61], "usdt": [47, 64], "btc": [47, 65], "notic": 47, "currenex": 47, "50": [47, 49], "gbp": 47, "3000": 47, "30010": 47, "middai": 47, "6th": 47, "june": 47, "2022": 47, "50_000": 47, "30000": 47, "06": [47, 53], "06t12": 47, "jpy": [47, 65], "200_000": 47, "10000": 47, "30_100": 47, "30_150": 47, "30100": 47, "30150": 47, "take_profit": 47, "ethusd": 47, "coin_m": 47, "trailing_stop": 47, "72000": 47, "71000": 47, "00100": 47, "1_250_000": 47, "00050": 47, "heart": 48, "experi": 48, "discuss": 48, "momentum": 48, "etc": [48, 58, 59, 61, 65], "itself": [48, 54], "strategyconfig": [48, 58], "mystrategi": 48, "distribut": 48, "fire": 48, "remot": 48, "opt": 48, "beyond": [48, 50, 64], "launch": 48, "mystrategyconfig": 48, "order_id_tag": 48, "parameter": 48, "our": [48, 58, 59, 61], "though": [48, 49], "sens": [48, 61], "shown": [48, 61], "safeti": [48, 52, 62], "measur": 48, "thrown": 48, "belong": 48, "till": 48, "manage_gtd_expiri": 48, "boolean": [48, 49], "flag": 48, "guidelin": 49, "compliant": 49, "opinion": 49, "formatt": [49, 51], "philosoph": 49, "agre": 49, "sai": 49, "handcraft": 49, "toward": 49, "stylist": 49, "align": 49, "indent": 49, "hang": [49, 58], "vaniti": 49, "parenthesi": 49, "practic": 49, "conserv": 49, "right": [49, 52, 55, 62], "locat": 49, "comma": [49, 61], "long_method_with_many_param": 49, "some_arg1": 49, "some_arg2": 49, "some_arg3": 49, "advantag": [49, 52, 54, 62], "idiomat": 49, "One": [49, 52, 61, 62], "notabl": 49, "departur": 49, "truthi": 49, "everyth": [49, 58], "pyobject": [49, 52], "googl": [49, 54], "discourag": 49, "chanc": 49, "unexpect": 49, "yield": [49, 59, 61], "bug": [49, 62], "foo": 49, "variabl": [49, 50, 58, 59, 61, 63, 64, 65], "might": [49, 62], "said": [49, 64, 66], "area": [49, 55], "aren": 49, "encourag": 49, "feedback": 49, "depart": 49, "appar": 49, "adher": [49, 54], "lint": [49, 51], "ignor": [49, 50], "yaml": 49, "justif": 49, "titl": 49, "fewer": 49, "capit": [49, 66], "imper": 49, "voic": 49, "bodi": 49, "blank": 49, "80": 49, "width": 49, "bullet": 49, "issu": [49, 50, 58, 62], "hyperlink": 49, "guidanc": 50, "languag": [50, 52, 54, 62], "syntax": [50, 51, 52, 62], "bint": 50, "keyword": 50, "bubbl": 50, "caller": [50, 54], "highli": [50, 54, 57, 62], "vote": 50, "year": 50, "unfortun": 50, "youtrack": 50, "jetbrain": 50, "9476": 50, "readthedoc": 50, "src": 50, "userguid": 50, "manual": [50, 53, 58, 59, 61], "special": [50, 64], "gdb": 50, "workflow": 50, "quit": 50, "debugg": 50, "few": 50, "thing": 50, "With": 50, "granular": [50, 62], "verbos": 50, "flow": 50, "pycharm": [51, 55], "profession": [51, 62], "edit": 51, "interpret": [51, 52], "visual": [51, 57], "studio": [51, 57], "pyenv": [51, 57], "virtual": [51, 57], "poetri": [51, 57, 65], "commit": 51, "auto": 51, "pxd": [51, 52], "valuabl": 52, "contribut": 52, "believ": 52, "overal": 52, "power": [52, 62], "eco": 52, "whilst": [52, 54], "overcom": 52, "inher": [52, 62], "shortcom": 52, "lack": [52, 54], "alloc": [52, 66], "world": [52, 62], "clean": [52, 61, 62], "straight": [52, 62], "forward": [52, 58, 62], "extract": 52, "magnitud": 52, "cours": 52, "introduct": 52, "thorough": 52, "review": [52, 56], "familiar": 52, "yourself": 52, "expert": 52, "test_kit": [53, 59, 61], "folder": [53, 55], "download": [53, 57, 58, 59, 61], "fred": 53, "stlouisf": 53, "usd1mtd156n": 53, "select": [53, 59, 61], "window": [53, 57, 62], "interbank": 53, "oecd": 53, "htm": 53, "fxstreet": 53, "calendar": 53, "gmt": 53, "yearli": 53, "quarter": 53, "stitch": 53, "icon": 53, "xx": 53, "31": 53, "04": 53, "30": 53, "07": 53, "09": 53, "12": [53, 58], "program": [54, 62], "ideal": 54, "fit": 54, "mission": [54, 62], "race": 54, "ownership": [54, 62], "lifetim": 54, "garbag": [54, 62], "collector": [54, 62], "eventu": [54, 64, 66], "hft": 54, "interoper": 54, "abi": 54, "compat": [54, 66], "approach": [54, 64], "smooth": 54, "want": 54, "ffi": 54, "pyo3": [54, 57, 62], "abil": [54, 62], "outsid": 54, "great": 54, "facil": 54, "small": [54, 66], "therebi": 54, "shift": 54, "goal": [54, 55], "undefin": 54, "strive": [54, 58], "why": [54, 58], "invari": 54, "uphold": 54, "meet": [54, 66], "oblig": 54, "rustonomicon": 54, "dark": 54, "art": 54, "unsafeti": 54, "russel": 54, "johnston": 54, "suit": 55, "divid": 55, "broad": 55, "categori": 55, "pytest": 55, "click": 55, "root": [55, 57], "subdirectori": 55, "simplifi": 55, "magicmock": 55, "codecov": 55, "expens": 55, "appropri": [55, 57], "caus": [55, 64], "induc": 55, "damag": 55, "imposs": 55, "catch": 55, "unrecogn": 55, "ultim": 55, "pragma": 55, "redund": 55, "needless": 55, "assert": [55, 59, 61], "notimplementederror": 55, "kept": 55, "refactor": 55, "benefit": [55, 59], "judici": 55, "properli": 56, "quick": [56, 59, 61], "11": 57, "64": 57, "isol": 57, "sdist": 57, "pip": 57, "betfair": [57, 66], "docker": [57, 62, 65], "gatewai": [57, 64, 65], "h": [57, 59, 61], "ll": [57, 59, 61, 63, 64, 65], "cargo": 57, "macbook": 57, "pro": 57, "m1": 57, "m2": 57, "sure": 57, "python_configure_opt": 57, "python_vers": 57, "r": 57, "getting_start": 57, "virtualenv": 57, "pyproject": 57, "toml": 57, "rustup": 57, "toolchain": 57, "curl": [57, 58], "proto": 57, "tlsv1": 57, "ssf": 57, "sh": 57, "desktop": 57, "2019": 57, "shell": [57, 62], "home": 57, "env": 57, "powershel": 57, "site": 57, "python3": 57, "clone": 57, "git": 57, "nautechsystem": [57, 58], "cd": 57, "whl": 57, "parquet": [58, 59, 61], "jupyt": 58, "notebook": [58, 59, 61], "setup": 58, "fastest": 58, "try": 58, "bear": 58, "mind": 58, "go": [58, 59, 61], "termin": 58, "pull": [58, 59, 61], "ghcr": 58, "jupyterlab": 58, "8888": 58, "browser": 58, "localhost": 58, "cell": [58, 59, 61], "investig": 58, "flush": 58, "12845": 58, "deshaw": 58, "save": [58, 61], "prepar": 58, "script": [58, 62], "min": 58, "apt": 58, "githubusercont": 58, "nautilus_data": 58, "hist_data_to_catalog": 58, "eur": [58, 59, 61, 65], "from_env": [58, 59], "nautilus_path": 58, "hand": [58, 60, 61], "macd": 58, "mere": 58, "serv": 58, "alpha": 58, "on_quote_tick": 58, "movingaverageconvergencediverg": 58, "macdconfig": 58, "fast_period": 58, "slow_period": 58, "26": 58, "1_000_000": [58, 59], "entry_threshold": 58, "00010": 58, "macdstrategi": 58, "easier": [58, 62], "later": 58, "subscribe_quote_tick": 58, "unsubscribe_quote_tick": 58, "handle_quote_tick": 58, "warm": 58, "5d": 58, "check_for_entri": 58, "check_for_exit": 58, "on_ev": 58, "elif": 58, "exit": 58, "noth": 58, "orchestr": 58, "seem": 58, "backtestrunconfig": [58, 59], "aspect": 58, "sim": [58, 59], "cfd": [58, 62, 65], "backtestvenueconfig": [58, 59], "oms_typ": [58, 59], "net": 58, "as_nautilu": [58, 59], "come": [58, 61], "backtestdataconfig": [58, 59], "catalog_path": [58, 59, 61], "data_cl": [58, 59], "end_tim": [58, 59, 64], "2020": [58, 59, 61], "adjust": 58, "fine": 58, "importablestrategyconfig": [58, 59], "__main__": 58, "strategy_path": [58, 59], "config_path": [58, 59], "piec": 58, "get_engin": 58, "shutil": [59, 61], "fsspec": [59, 61], "process_fil": [59, 61], "write_object": [59, 61], "reader": 59, "textread": [59, 61], "histdata": [59, 61], "ascii": [59, 61], "data_dir": 59, "filesystem": [59, 61], "raw_fil": 59, "glob": [59, 61], "unabl": [59, 64], "hdf5": [59, 61], "compress": [59, 61], "helper": [59, 61], "minimis": [59, 61], "bid_pric": [59, 61], "ask_pric": [59, 61], "row": [59, 61], "idx": 59, "b": 59, "strptime": [59, 61], "decod": [59, 61], "bid_siz": [59, 61], "ask_siz": [59, 61], "getcwd": [59, 61], "fresh": [59, 61], "rmtree": [59, 61], "mkdir": [59, 61], "glob_path": [59, 61], "zip": [59, 61], "line_pars": [59, 61], "quote_tick": [59, 61], "02": [59, 61], "grid": 59, "search": [59, 65], "venues_config": 59, "hedg": 59, "data_config": 59, "1580398089820000000": 59, "1580504394501000000": 59, "ema_cross": 59, "emacrossconfig": 59, "15": 59, "hope": 60, "resourc": 60, "explor": 60, "page": 60, "dive": 60, "input_fil": 61, "histdata_com_ascii_audusd_": 61, "histdata_com_ascii_audusd_t202001": 61, "csvreader": 61, "parquetread": 61, "chunk": 61, "block_pars": 61, "as_datafram": 61, "hist_data": 61, "were": 61, "And": 61, "lambda": 61, "break": 61, "appear": 61, "offici": 62, "grade": 62, "quantit": 62, "ai": 62, "pariti": 62, "challeng": 62, "workload": 62, "frequenc": 62, "fast": 62, "independ": 62, "oco": 62, "oto": 62, "ident": [62, 64], "arbitrag": 62, "agent": 62, "train": 62, "rl": 62, "ancient": 62, "greek": 62, "sailor": 62, "nau": 62, "ship": 62, "chamber": 62, "growth": 62, "approxim": 62, "logarithm": 62, "spiral": 62, "translat": 62, "aesthet": 62, "tradition": 62, "conduct": [62, 66], "suitabl": 62, "reimplement": 62, "drive": 62, "java": 62, "proven": 62, "circumv": 62, "decad": 62, "ago": 62, "evolv": 62, "fledg": 62, "orient": 62, "tiob": 62, "popular": 62, "Not": 62, "de": 62, "facto": 62, "lingua": 62, "franca": 62, "scienc": 62, "learn": 62, "artifici": 62, "intellig": 62, "drawback": 62, "especi": 62, "embed": 62, "ecosystem": 62, "superset": 62, "mostli": 62, "heavili": 62, "vast": 62, "paradigm": 62, "concurr": 62, "blazingli": 62, "compar": 62, "devic": 62, "increasingli": 62, "betfairinstrumentprovid": 63, "catalogu": 63, "betfairdatacli": 63, "betfairexecutioncli": 63, "data_cli": [63, 64, 65], "usernam": [63, 65], "your_betfair_usernam": 63, "password": [63, 65], "your_betfair_password": 63, "app_kei": 63, "your_betfair_app_kei": 63, "cert_dir": 63, "your_betfair_cert_dir": 63, "exec_cli": [63, 64, 65], "add_data_client_factori": [63, 64, 65], "betfairlivedataclientfactori": 63, "add_exec_client_factori": [63, 64, 65], "betfairliveexecclientfactori": 63, "suppli": [63, 64, 65], "api_kei": [63, 64], "api_secret": [63, 64], "betfair_api_kei": 63, "betfair_api_secret": 63, "betfair_app_kei": 63, "betfair_cert_dir": 63, "confirm": [63, 64, 65], "permiss": [63, 64, 65], "2017": 64, "largest": 64, "unstabl": 64, "exercis": 64, "caution": 64, "assort": 64, "binancehttpcli": 64, "binancewebsocketcli": 64, "binancespotdatacli": 64, "binancefuturesdatacli": 64, "binancespotexecutioncli": 64, "binancefuturesexecutioncli": 64, "binancelivedataclientfactori": 64, "builder": 64, "binanceliveexecclientfactori": 64, "binancetick": 64, "24hr": 64, "binancebar": 64, "extra": [64, 65], "unif": 64, "polici": 64, "clarifi": 64, "successfulli": 64, "trailing_offet_typ": 64, "activation_pric": 64, "your_binance_api_kei": 64, "your_binance_api_secret": 64, "coin_futur": 64, "base_url_http": 64, "base_url_w": 64, "binance_api_kei": 64, "binance_api_secret": 64, "binance_testnet_api_kei": 64, "binance_testnet_api_secret": 64, "binance_futures_api_kei": 64, "binance_futures_api_secret": 64, "isolated_margin": 64, "busd": 64, "stablecoin": 64, "collater": 64, "cluster": 64, "behav": 64, "your_binance_testnet_api_kei": 64, "your_binance_testnet_api_secret": 64, "comparison": 64, "use_agg_trade_tick": 64, "enorm": 64, "unnecessari": 64, "nois": 64, "instrument_provid": [64, 65], "log_warn": 64, "ibapi": 65, "plan": 65, "tw": 65, "interactivebrokersinstrumentprovid": 65, "interactivebrokersdatacli": 65, "interactivebrokersexecutioncli": 65, "qualifycontract": 65, "usual": 65, "resolv": 65, "initialis": 65, "At": 65, "sectyp": 65, "secur": 65, "interactivebrokersdataclientconfig": 65, "interactivebrokersinstrumentproviderconfig": 65, "aapl": 65, "nasdaq": 65, "load_contract": 65, "ibcontract": 65, "contfut": 65, "cme": 65, "me": 65, "stk": 65, "smart": 65, "amd": 65, "primaryexchang": 65, "intc": 65, "ibus30": 65, "ymh24": 65, "cbot": 65, "clz27": 65, "nymex": 65, "esz27": 65, "build_futures_chain": 65, "spy251219c00395000": 65, "arca": 65, "spy": 65, "lasttradedateorcontractmonth": 65, "20251219": 65, "build_options_chain": 65, "bond": 65, "secidtyp": 65, "isin": 65, "secid": 65, "us03076kaa60": 65, "paxo": 65, "workstat": 65, "tws_usernam": 65, "tws_password": 65, "interactivebrokersexecutionclientconfig": 65, "interactivebrokerslivedataclientfactori": 65, "interactivebrokersliveexecclientfactori": 65, "heavi": 66, "cex": 66, "widest": 66, "reconcil": 66, "criteria": 66, "_m": 66}, "objects": {"nautilus_trader": [[0, 0, 0, "-", "accounting"], [3, 0, 0, "-", "adapters"], [5, 0, 0, "-", "analysis"], [6, 0, 0, "-", "backtest"], [7, 0, 0, "-", "cache"], [8, 0, 0, "-", "common"], [10, 0, 0, "-", "core"], [11, 0, 0, "-", "data"], [12, 0, 0, "-", "execution"], [14, 0, 0, "-", "indicators"], [15, 0, 0, "-", "infrastructure"], [16, 0, 0, "-", "live"], [21, 0, 0, "-", "model"], [28, 0, 0, "-", "msgbus"], [29, 0, 0, "-", "network"], [30, 0, 0, "-", "persistence"], [31, 0, 0, "-", "portfolio"], [32, 0, 0, "-", "risk"], [33, 0, 0, "-", "serialization"], [34, 0, 0, "-", "system"], [35, 0, 0, "-", "trading"]], "nautilus_trader.accounting.accounts": [[0, 0, 0, "-", "margin"]], "nautilus_trader.accounting.accounts.margin": [[0, 1, 1, "", "MarginAccount"]], "nautilus_trader.accounting.accounts.margin.MarginAccount": [[0, 2, 1, "", "apply"], [0, 2, 1, "", "balance"], [0, 2, 1, "", "balance_free"], [0, 2, 1, "", "balance_locked"], [0, 2, 1, "", "balance_total"], [0, 2, 1, "", "balances"], [0, 2, 1, "", "balances_free"], [0, 2, 1, "", "balances_locked"], [0, 2, 1, "", "balances_total"], [0, 3, 1, "", "base_currency"], [0, 3, 1, "", "calculate_account_state"], [0, 2, 1, "", "calculate_commission"], [0, 2, 1, "", "calculate_margin_init"], [0, 2, 1, "", "calculate_margin_maint"], [0, 2, 1, "", "calculate_pnls"], [0, 2, 1, "", "clear_margin"], [0, 2, 1, "", "clear_margin_init"], [0, 2, 1, "", "clear_margin_maint"], [0, 2, 1, "", "commission"], [0, 2, 1, "", "commissions"], [0, 2, 1, "", "currencies"], [0, 3, 1, "", "default_leverage"], [0, 3, 1, "", "event_count"], [0, 3, 1, "", "events"], [0, 3, 1, "", "id"], [0, 3, 1, "", "is_cash_account"], [0, 3, 1, "", "is_margin_account"], [0, 2, 1, "", "is_unleveraged"], [0, 3, 1, "", "last_event"], [0, 2, 1, "", "leverage"], [0, 2, 1, "", "leverages"], [0, 2, 1, "", "margin"], [0, 2, 1, "", "margin_init"], [0, 2, 1, "", "margin_maint"], [0, 2, 1, "", "margins"], [0, 2, 1, "", "margins_init"], [0, 2, 1, "", "margins_maint"], [0, 2, 1, "", "set_default_leverage"], [0, 2, 1, "", "set_leverage"], [0, 2, 1, "", "starting_balances"], [0, 3, 1, "", "type"], [0, 2, 1, "", "update_balances"], [0, 2, 1, "", "update_commissions"], [0, 2, 1, "", "update_margin"], [0, 2, 1, "", "update_margin_init"], [0, 2, 1, "", "update_margin_maint"]], "nautilus_trader.accounting": [[0, 0, 0, "-", "calculators"], [0, 0, 0, "-", "factory"]], "nautilus_trader.accounting.calculators": [[0, 1, 1, "", "ExchangeRateCalculator"], [0, 1, 1, "", "RolloverInterestCalculator"]], "nautilus_trader.accounting.calculators.ExchangeRateCalculator": [[0, 2, 1, "", "get_rate"]], "nautilus_trader.accounting.calculators.RolloverInterestCalculator": [[0, 2, 1, "", "calc_overnight_rate"], [0, 2, 1, "", "get_rate_data"]], "nautilus_trader.accounting.factory": [[0, 1, 1, "", "AccountFactory"]], "nautilus_trader.accounting.factory.AccountFactory": [[0, 2, 1, "", "create"], [0, 2, 1, "", "register_account_type"], [0, 2, 1, "", "register_calculated_account"]], "nautilus_trader.adapters": [[1, 0, 0, "-", "betfair"], [2, 0, 0, "-", "binance"], [4, 0, 0, "-", "interactive_brokers"]], "nautilus_trader.adapters.betfair": [[1, 0, 0, "-", "sockets"]], "nautilus_trader.adapters.betfair.sockets": [[1, 1, 1, "", "BetfairMarketStreamClient"], [1, 1, 1, "", "BetfairOrderStreamClient"], [1, 1, 1, "", "BetfairStreamClient"]], "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient": [[1, 2, 1, "", "connect"], [1, 2, 1, "", "disconnect"], [1, 3, 1, "", "host"], [1, 3, 1, "", "is_connected"], [1, 3, 1, "", "is_running"], [1, 3, 1, "", "is_stopping"], [1, 3, 1, "", "port"], [1, 2, 1, "", "post_connection"], [1, 2, 1, "", "post_disconnection"], [1, 2, 1, "", "post_reconnection"], [1, 2, 1, "", "reconnect"], [1, 2, 1, "", "send"], [1, 3, 1, "", "ssl"], [1, 2, 1, "", "start"]], "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient": [[1, 2, 1, "", "connect"], [1, 2, 1, "", "disconnect"], [1, 3, 1, "", "host"], [1, 3, 1, "", "is_connected"], [1, 3, 1, "", "is_running"], [1, 3, 1, "", "is_stopping"], [1, 3, 1, "", "port"], [1, 2, 1, "", "post_connection"], [1, 2, 1, "", "post_disconnection"], [1, 2, 1, "", "post_reconnection"], [1, 2, 1, "", "reconnect"], [1, 2, 1, "", "send"], [1, 3, 1, "", "ssl"], [1, 2, 1, "", "start"]], "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient": [[1, 2, 1, "", "connect"], [1, 2, 1, "", "disconnect"], [1, 3, 1, "", "host"], [1, 3, 1, "", "is_connected"], [1, 3, 1, "", "is_running"], [1, 3, 1, "", "is_stopping"], [1, 3, 1, "", "port"], [1, 2, 1, "", "post_connection"], [1, 2, 1, "", "post_disconnection"], [1, 2, 1, "", "post_reconnection"], [1, 2, 1, "", "reconnect"], [1, 2, 1, "", "send"], [1, 3, 1, "", "ssl"], [1, 2, 1, "", "start"]], "nautilus_trader.adapters.binance.futures": [[2, 0, 0, "-", "types"]], "nautilus_trader.adapters.binance.futures.types": [[2, 1, 1, "", "BinanceFuturesMarkPriceUpdate"]], "nautilus_trader.adapters.binance.futures.types.BinanceFuturesMarkPriceUpdate": [[2, 2, 1, "", "from_dict"], [2, 2, 1, "", "fully_qualified_name"], [2, 2, 1, "", "to_dict"], [2, 3, 1, "", "ts_event"], [2, 3, 1, "", "ts_init"]], "nautilus_trader.analysis": [[5, 0, 0, "-", "analyzer"], [5, 0, 0, "-", "reporter"], [5, 0, 0, "-", "statistic"]], "nautilus_trader.analysis.analyzer": [[5, 1, 1, "", "PortfolioAnalyzer"]], "nautilus_trader.analysis.analyzer.PortfolioAnalyzer": [[5, 2, 1, "", "add_positions"], [5, 2, 1, "", "add_return"], [5, 2, 1, "", "add_trade"], [5, 2, 1, "", "calculate_statistics"], [5, 4, 1, "", "currencies"], [5, 2, 1, "", "deregister_statistic"], [5, 2, 1, "", "deregister_statistics"], [5, 2, 1, "", "get_performance_stats_general"], [5, 2, 1, "", "get_performance_stats_pnls"], [5, 2, 1, "", "get_performance_stats_returns"], [5, 2, 1, "", "get_stats_general_formatted"], [5, 2, 1, "", "get_stats_pnls_formatted"], [5, 2, 1, "", "get_stats_returns_formatted"], [5, 2, 1, "", "realized_pnls"], [5, 2, 1, "", "register_statistic"], [5, 2, 1, "", "reset"], [5, 2, 1, "", "returns"], [5, 2, 1, "", "statistic"], [5, 2, 1, "", "total_pnl"], [5, 2, 1, "", "total_pnl_percentage"]], "nautilus_trader.analysis.reporter": [[5, 1, 1, "", "ReportProvider"]], "nautilus_trader.analysis.reporter.ReportProvider": [[5, 2, 1, "", "generate_account_report"], [5, 2, 1, "", "generate_order_fills_report"], [5, 2, 1, "", "generate_orders_report"], [5, 2, 1, "", "generate_positions_report"]], "nautilus_trader.analysis.statistic": [[5, 1, 1, "", "PortfolioStatistic"]], "nautilus_trader.analysis.statistic.PortfolioStatistic": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics": [[5, 0, 0, "-", "expectancy"], [5, 0, 0, "-", "long_ratio"], [5, 0, 0, "-", "loser_avg"], [5, 0, 0, "-", "loser_max"], [5, 0, 0, "-", "loser_min"], [5, 0, 0, "-", "profit_factor"], [5, 0, 0, "-", "returns_avg"], [5, 0, 0, "-", "returns_avg_loss"], [5, 0, 0, "-", "returns_avg_win"], [5, 0, 0, "-", "returns_volatility"], [5, 0, 0, "-", "risk_return_ratio"], [5, 0, 0, "-", "sharpe_ratio"], [5, 0, 0, "-", "sortino_ratio"], [5, 0, 0, "-", "win_rate"], [5, 0, 0, "-", "winner_avg"], [5, 0, 0, "-", "winner_max"], [5, 0, 0, "-", "winner_min"]], "nautilus_trader.analysis.statistics.expectancy": [[5, 1, 1, "", "Expectancy"]], "nautilus_trader.analysis.statistics.expectancy.Expectancy": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.long_ratio": [[5, 1, 1, "", "LongRatio"]], "nautilus_trader.analysis.statistics.long_ratio.LongRatio": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.loser_avg": [[5, 1, 1, "", "AvgLoser"]], "nautilus_trader.analysis.statistics.loser_avg.AvgLoser": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.loser_max": [[5, 1, 1, "", "MaxLoser"]], "nautilus_trader.analysis.statistics.loser_max.MaxLoser": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.loser_min": [[5, 1, 1, "", "MinLoser"]], "nautilus_trader.analysis.statistics.loser_min.MinLoser": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.profit_factor": [[5, 1, 1, "", "ProfitFactor"]], "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.returns_avg": [[5, 1, 1, "", "ReturnsAverage"]], "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.returns_avg_loss": [[5, 1, 1, "", "ReturnsAverageLoss"]], "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.returns_avg_win": [[5, 1, 1, "", "ReturnsAverageWin"]], "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.returns_volatility": [[5, 1, 1, "", "ReturnsVolatility"]], "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.risk_return_ratio": [[5, 1, 1, "", "RiskReturnRatio"]], "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.sharpe_ratio": [[5, 1, 1, "", "SharpeRatio"]], "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.sortino_ratio": [[5, 1, 1, "", "SortinoRatio"]], "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.win_rate": [[5, 1, 1, "", "WinRate"]], "nautilus_trader.analysis.statistics.win_rate.WinRate": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.winner_avg": [[5, 1, 1, "", "AvgWinner"]], "nautilus_trader.analysis.statistics.winner_avg.AvgWinner": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.winner_max": [[5, 1, 1, "", "MaxWinner"]], "nautilus_trader.analysis.statistics.winner_max.MaxWinner": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.analysis.statistics.winner_min": [[5, 1, 1, "", "MinWinner"]], "nautilus_trader.analysis.statistics.winner_min.MinWinner": [[5, 2, 1, "", "calculate_from_orders"], [5, 2, 1, "", "calculate_from_positions"], [5, 2, 1, "", "calculate_from_realized_pnls"], [5, 2, 1, "", "calculate_from_returns"], [5, 2, 1, "", "fully_qualified_name"], [5, 4, 1, "", "name"]], "nautilus_trader.backtest": [[6, 0, 0, "-", "auction"], [6, 0, 0, "-", "models"], [6, 0, 0, "-", "results"]], "nautilus_trader.backtest.models": [[6, 1, 1, "", "FillModel"], [6, 1, 1, "", "LatencyModel"]], "nautilus_trader.backtest.models.FillModel": [[6, 2, 1, "", "is_limit_filled"], [6, 2, 1, "", "is_slipped"], [6, 2, 1, "", "is_stop_filled"], [6, 3, 1, "", "prob_fill_on_limit"], [6, 3, 1, "", "prob_fill_on_stop"], [6, 3, 1, "", "prob_slippage"]], "nautilus_trader.backtest.models.LatencyModel": [[6, 3, 1, "", "base_latency_nanos"], [6, 3, 1, "", "cancel_latency_nanos"], [6, 3, 1, "", "insert_latency_nanos"], [6, 3, 1, "", "update_latency_nanos"]], "nautilus_trader.backtest.results": [[6, 1, 1, "", "BacktestResult"], [6, 5, 1, "", "ensure_plotting"]], "nautilus_trader.common": [[8, 0, 0, "-", "clock"], [8, 0, 0, "-", "component"], [8, 0, 0, "-", "factories"], [8, 0, 0, "-", "generators"], [8, 0, 0, "-", "logging"], [8, 0, 0, "-", "queue"], [8, 0, 0, "-", "throttler"], [8, 0, 0, "-", "timer"]], "nautilus_trader.common.clock": [[8, 1, 1, "", "Clock"], [8, 1, 1, "", "LiveClock"], [8, 1, 1, "", "TestClock"]], "nautilus_trader.common.clock.Clock": [[8, 2, 1, "", "cancel_timer"], [8, 2, 1, "", "cancel_timers"], [8, 2, 1, "", "local_now"], [8, 2, 1, "", "next_time_ns"], [8, 2, 1, "", "register_default_handler"], [8, 2, 1, "", "set_time_alert"], [8, 2, 1, "", "set_time_alert_ns"], [8, 2, 1, "", "set_timer"], [8, 2, 1, "", "set_timer_ns"], [8, 3, 1, "", "timer_count"], [8, 3, 1, "", "timer_names"], [8, 2, 1, "", "timestamp"], [8, 2, 1, "", "timestamp_ms"], [8, 2, 1, "", "timestamp_ns"], [8, 2, 1, "", "utc_now"]], "nautilus_trader.common.clock.LiveClock": [[8, 2, 1, "", "cancel_timer"], [8, 2, 1, "", "cancel_timers"], [8, 2, 1, "", "local_now"], [8, 2, 1, "", "next_time_ns"], [8, 2, 1, "", "register_default_handler"], [8, 2, 1, "", "set_time_alert"], [8, 2, 1, "", "set_time_alert_ns"], [8, 2, 1, "", "set_timer"], [8, 2, 1, "", "set_timer_ns"], [8, 3, 1, "", "timer_count"], [8, 3, 1, "", "timer_names"], [8, 2, 1, "", "timestamp"], [8, 2, 1, "", "timestamp_ms"], [8, 2, 1, "", "timestamp_ns"], [8, 2, 1, "", "utc_now"]], "nautilus_trader.common.clock.TestClock": [[8, 2, 1, "", "advance_time"], [8, 2, 1, "", "cancel_timer"], [8, 2, 1, "", "cancel_timers"], [8, 2, 1, "", "local_now"], [8, 2, 1, "", "next_time_ns"], [8, 2, 1, "", "register_default_handler"], [8, 2, 1, "", "set_time"], [8, 2, 1, "", "set_time_alert"], [8, 2, 1, "", "set_time_alert_ns"], [8, 2, 1, "", "set_timer"], [8, 2, 1, "", "set_timer_ns"], [8, 3, 1, "", "timer_count"], [8, 3, 1, "", "timer_names"], [8, 2, 1, "", "timestamp"], [8, 2, 1, "", "timestamp_ms"], [8, 2, 1, "", "timestamp_ns"], [8, 2, 1, "", "utc_now"]], "nautilus_trader.common.component": [[8, 1, 1, "", "Component"], [8, 1, 1, "", "ComponentFSMFactory"]], "nautilus_trader.common.component.Component": [[8, 2, 1, "", "degrade"], [8, 2, 1, "", "dispose"], [8, 2, 1, "", "fault"], [8, 2, 1, "", "fully_qualified_name"], [8, 3, 1, "", "id"], [8, 3, 1, "", "is_degraded"], [8, 3, 1, "", "is_disposed"], [8, 3, 1, "", "is_faulted"], [8, 3, 1, "", "is_initialized"], [8, 3, 1, "", "is_running"], [8, 3, 1, "", "is_stopped"], [8, 2, 1, "", "reset"], [8, 2, 1, "", "resume"], [8, 2, 1, "", "start"], [8, 3, 1, "", "state"], [8, 2, 1, "", "stop"], [8, 3, 1, "", "trader_id"], [8, 3, 1, "", "type"]], "nautilus_trader.common.component.ComponentFSMFactory": [[8, 2, 1, "", "get_state_transition_table"]], "nautilus_trader.common.factories": [[8, 1, 1, "", "OrderFactory"]], "nautilus_trader.common.factories.OrderFactory": [[8, 2, 1, "", "bracket"], [8, 2, 1, "", "create_list"], [8, 2, 1, "", "generate_client_order_id"], [8, 2, 1, "", "generate_order_list_id"], [8, 2, 1, "", "limit"], [8, 2, 1, "", "limit_if_touched"], [8, 2, 1, "", "market"], [8, 2, 1, "", "market_if_touched"], [8, 2, 1, "", "market_to_limit"], [8, 2, 1, "", "reset"], [8, 2, 1, "", "set_client_order_id_count"], [8, 2, 1, "", "set_order_list_id_count"], [8, 2, 1, "", "stop_limit"], [8, 2, 1, "", "stop_market"], [8, 3, 1, "", "strategy_id"], [8, 3, 1, "", "trader_id"], [8, 2, 1, "", "trailing_stop_limit"], [8, 2, 1, "", "trailing_stop_market"]], "nautilus_trader.common.generators": [[8, 1, 1, "", "ClientOrderIdGenerator"], [8, 1, 1, "", "IdentifierGenerator"], [8, 1, 1, "", "OrderListIdGenerator"], [8, 1, 1, "", "PositionIdGenerator"]], "nautilus_trader.common.generators.ClientOrderIdGenerator": [[8, 3, 1, "", "count"], [8, 2, 1, "", "generate"], [8, 2, 1, "", "reset"], [8, 2, 1, "", "set_count"]], "nautilus_trader.common.generators.OrderListIdGenerator": [[8, 3, 1, "", "count"], [8, 2, 1, "", "generate"], [8, 2, 1, "", "reset"], [8, 2, 1, "", "set_count"]], "nautilus_trader.common.generators.PositionIdGenerator": [[8, 2, 1, "", "generate"], [8, 2, 1, "", "get_count"], [8, 2, 1, "", "reset"], [8, 2, 1, "", "set_count"]], "nautilus_trader.common.logging": [[8, 1, 1, "", "Logger"], [8, 1, 1, "", "LoggerAdapter"], [8, 5, 1, "", "log_memory"], [8, 5, 1, "", "nautilus_header"]], "nautilus_trader.common.logging.Logger": [[8, 2, 1, "", "change_clock"], [8, 3, 1, "", "instance_id"], [8, 3, 1, "", "is_bypassed"], [8, 3, 1, "", "machine_id"], [8, 3, 1, "", "trader_id"]], "nautilus_trader.common.logging.LoggerAdapter": [[8, 3, 1, "", "component"], [8, 2, 1, "", "critical"], [8, 2, 1, "", "debug"], [8, 2, 1, "", "error"], [8, 2, 1, "", "exception"], [8, 2, 1, "", "get_logger"], [8, 2, 1, "", "info"], [8, 3, 1, "", "instance_id"], [8, 3, 1, "", "is_bypassed"], [8, 3, 1, "", "machine_id"], [8, 3, 1, "", "trader_id"], [8, 2, 1, "", "warning"]], "nautilus_trader.common.queue": [[8, 1, 1, "", "Queue"]], "nautilus_trader.common.queue.Queue": [[8, 3, 1, "", "count"], [8, 2, 1, "", "empty"], [8, 2, 1, "", "full"], [8, 2, 1, "", "get"], [8, 2, 1, "", "get_nowait"], [8, 3, 1, "", "maxsize"], [8, 2, 1, "", "peek_back"], [8, 2, 1, "", "peek_front"], [8, 2, 1, "", "peek_index"], [8, 2, 1, "", "put"], [8, 2, 1, "", "put_nowait"], [8, 2, 1, "", "qsize"], [8, 2, 1, "", "to_list"]], "nautilus_trader.common.throttler": [[8, 1, 1, "", "Throttler"]], "nautilus_trader.common.throttler.Throttler": [[8, 3, 1, "", "interval"], [8, 3, 1, "", "is_limiting"], [8, 3, 1, "", "limit"], [8, 3, 1, "", "name"], [8, 3, 1, "", "qsize"], [8, 3, 1, "", "recv_count"], [8, 2, 1, "", "send"], [8, 3, 1, "", "sent_count"], [8, 2, 1, "", "used"]], "nautilus_trader.common.timer": [[8, 1, 1, "", "LiveTimer"], [8, 1, 1, "", "LoopTimer"], [8, 1, 1, "", "ThreadTimer"], [8, 1, 1, "", "TimeEvent"], [8, 1, 1, "", "TimeEventHandler"]], "nautilus_trader.common.timer.LiveTimer": [[8, 3, 1, "", "callback"], [8, 2, 1, "", "cancel"], [8, 3, 1, "", "interval_ns"], [8, 3, 1, "", "is_expired"], [8, 2, 1, "", "iterate_next_time"], [8, 3, 1, "", "name"], [8, 3, 1, "", "next_time_ns"], [8, 2, 1, "", "pop_event"], [8, 2, 1, "", "repeat"], [8, 3, 1, "", "start_time_ns"], [8, 3, 1, "", "stop_time_ns"]], "nautilus_trader.common.timer.LoopTimer": [[8, 3, 1, "", "callback"], [8, 2, 1, "", "cancel"], [8, 3, 1, "", "interval_ns"], [8, 3, 1, "", "is_expired"], [8, 2, 1, "", "iterate_next_time"], [8, 3, 1, "", "name"], [8, 3, 1, "", "next_time_ns"], [8, 2, 1, "", "pop_event"], [8, 2, 1, "", "repeat"], [8, 3, 1, "", "start_time_ns"], [8, 3, 1, "", "stop_time_ns"]], "nautilus_trader.common.timer.ThreadTimer": [[8, 3, 1, "", "callback"], [8, 2, 1, "", "cancel"], [8, 3, 1, "", "interval_ns"], [8, 3, 1, "", "is_expired"], [8, 2, 1, "", "iterate_next_time"], [8, 3, 1, "", "name"], [8, 3, 1, "", "next_time_ns"], [8, 2, 1, "", "pop_event"], [8, 2, 1, "", "repeat"], [8, 3, 1, "", "start_time_ns"], [8, 3, 1, "", "stop_time_ns"]], "nautilus_trader.common.timer.TimeEvent": [[8, 3, 1, "", "id"], [8, 3, 1, "", "name"], [8, 3, 1, "", "ts_event"], [8, 3, 1, "", "ts_init"]], "nautilus_trader.common.timer.TimeEventHandler": [[8, 3, 1, "", "event"], [8, 2, 1, "", "handle"]], "nautilus_trader.core": [[10, 0, 0, "-", "datetime"], [10, 0, 0, "-", "fsm"], [10, 0, 0, "-", "message"], [10, 0, 0, "-", "stats"], [10, 0, 0, "-", "uuid"]], "nautilus_trader.core.datetime": [[10, 5, 1, "", "as_utc_index"], [10, 5, 1, "", "as_utc_timestamp"], [10, 5, 1, "", "dt_to_unix_nanos"], [10, 5, 1, "", "format_iso8601"], [10, 5, 1, "", "is_datetime_utc"], [10, 5, 1, "", "is_tz_aware"], [10, 5, 1, "", "is_tz_naive"], [10, 5, 1, "", "maybe_dt_to_unix_nanos"], [10, 5, 1, "", "maybe_unix_nanos_to_dt"], [10, 5, 1, "", "micros_to_nanos"], [10, 5, 1, "", "millis_to_nanos"], [10, 5, 1, "", "nanos_to_micros"], [10, 5, 1, "", "nanos_to_millis"], [10, 5, 1, "", "nanos_to_secs"], [10, 5, 1, "", "secs_to_millis"], [10, 5, 1, "", "secs_to_nanos"], [10, 5, 1, "", "unix_nanos_to_dt"]], "nautilus_trader.core.fsm": [[10, 1, 1, "", "FiniteStateMachine"], [10, 6, 1, "", "InvalidStateTrigger"]], "nautilus_trader.core.fsm.FiniteStateMachine": [[10, 3, 1, "", "state"], [10, 3, 1, "", "state_string"], [10, 2, 1, "", "trigger"]], "nautilus_trader.core.fsm.InvalidStateTrigger": [[10, 2, 1, "", "add_note"], [10, 2, 1, "", "with_traceback"]], "nautilus_trader.core.message": [[10, 1, 1, "", "Command"], [10, 1, 1, "", "Document"], [10, 1, 1, "", "Event"], [10, 1, 1, "", "Request"], [10, 1, 1, "", "Response"]], "nautilus_trader.core.message.Command": [[10, 3, 1, "", "id"], [10, 3, 1, "", "ts_init"]], "nautilus_trader.core.message.Document": [[10, 3, 1, "", "id"], [10, 3, 1, "", "ts_init"]], "nautilus_trader.core.message.Event": [[10, 3, 1, "", "id"], [10, 3, 1, "", "ts_event"], [10, 3, 1, "", "ts_init"]], "nautilus_trader.core.message.Request": [[10, 3, 1, "", "callback"], [10, 3, 1, "", "id"], [10, 3, 1, "", "ts_init"]], "nautilus_trader.core.message.Response": [[10, 3, 1, "", "correlation_id"], [10, 3, 1, "", "id"], [10, 3, 1, "", "ts_init"]], "nautilus_trader.core.stats": [[10, 5, 1, "", "basis_points_as_percentage"], [10, 5, 1, "", "fast_mad"], [10, 5, 1, "", "fast_mad_with_mean"], [10, 5, 1, "", "fast_mean"], [10, 5, 1, "", "fast_mean_iterated"], [10, 5, 1, "", "fast_std"], [10, 5, 1, "", "fast_std_with_mean"]], "nautilus_trader.core.uuid": [[10, 1, 1, "", "UUID4"]], "nautilus_trader.core.uuid.UUID4": [[10, 3, 1, "", "value"]], "nautilus_trader.data": [[11, 0, 0, "-", "messages"]], "nautilus_trader.data.messages": [[11, 1, 1, "", "DataCommand"], [11, 1, 1, "", "DataRequest"], [11, 1, 1, "", "DataResponse"], [11, 1, 1, "", "Subscribe"], [11, 1, 1, "", "Unsubscribe"]], "nautilus_trader.data.messages.DataCommand": [[11, 3, 1, "", "client_id"], [11, 3, 1, "", "data_type"], [11, 3, 1, "", "id"], [11, 3, 1, "", "ts_init"], [11, 3, 1, "", "venue"]], "nautilus_trader.data.messages.DataRequest": [[11, 3, 1, "", "callback"], [11, 3, 1, "", "client_id"], [11, 3, 1, "", "data_type"], [11, 3, 1, "", "id"], [11, 3, 1, "", "ts_init"], [11, 3, 1, "", "venue"]], "nautilus_trader.data.messages.DataResponse": [[11, 3, 1, "", "client_id"], [11, 3, 1, "", "correlation_id"], [11, 3, 1, "", "data"], [11, 3, 1, "", "data_type"], [11, 3, 1, "", "id"], [11, 3, 1, "", "ts_init"], [11, 3, 1, "", "venue"]], "nautilus_trader.data.messages.Subscribe": [[11, 3, 1, "", "client_id"], [11, 3, 1, "", "data_type"], [11, 3, 1, "", "id"], [11, 3, 1, "", "ts_init"], [11, 3, 1, "", "venue"]], "nautilus_trader.data.messages.Unsubscribe": [[11, 3, 1, "", "client_id"], [11, 3, 1, "", "data_type"], [11, 3, 1, "", "id"], [11, 3, 1, "", "ts_init"], [11, 3, 1, "", "venue"]], "nautilus_trader.execution": [[12, 0, 0, "-", "matching_core"], [12, 0, 0, "-", "messages"], [12, 0, 0, "-", "reports"]], "nautilus_trader.execution.matching_core": [[12, 1, 1, "", "MatchingCore"]], "nautilus_trader.execution.matching_core.MatchingCore": [[12, 2, 1, "", "add_order"], [12, 3, 1, "", "ask"], [12, 3, 1, "", "bid"], [12, 2, 1, "", "delete_order"], [12, 2, 1, "", "get_order"], [12, 2, 1, "", "get_orders"], [12, 2, 1, "", "get_orders_ask"], [12, 2, 1, "", "get_orders_bid"], [12, 2, 1, "", "is_limit_matched"], [12, 2, 1, "", "is_stop_triggered"], [12, 2, 1, "", "is_touch_triggered"], [12, 2, 1, "", "iterate"], [12, 3, 1, "", "last"], [12, 2, 1, "", "match_limit_if_touched_order"], [12, 2, 1, "", "match_limit_order"], [12, 2, 1, "", "match_market_if_touched_order"], [12, 2, 1, "", "match_order"], [12, 2, 1, "", "match_stop_limit_order"], [12, 2, 1, "", "match_stop_market_order"], [12, 2, 1, "", "order_exists"], [12, 2, 1, "", "reset"]], "nautilus_trader.execution.messages": [[12, 1, 1, "", "CancelAllOrders"], [12, 1, 1, "", "CancelOrder"], [12, 1, 1, "", "ModifyOrder"], [12, 1, 1, "", "QueryOrder"], [12, 1, 1, "", "SubmitOrder"], [12, 1, 1, "", "SubmitOrderList"], [12, 1, 1, "", "TradingCommand"]], "nautilus_trader.execution.messages.CancelAllOrders": [[12, 3, 1, "", "client_id"], [12, 2, 1, "", "from_dict"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "order_side"], [12, 3, 1, "", "strategy_id"], [12, 2, 1, "", "to_dict"], [12, 3, 1, "", "trader_id"], [12, 3, 1, "", "ts_init"]], "nautilus_trader.execution.messages.CancelOrder": [[12, 3, 1, "", "client_id"], [12, 3, 1, "", "client_order_id"], [12, 2, 1, "", "from_dict"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "strategy_id"], [12, 2, 1, "", "to_dict"], [12, 3, 1, "", "trader_id"], [12, 3, 1, "", "ts_init"], [12, 3, 1, "", "venue_order_id"]], "nautilus_trader.execution.messages.ModifyOrder": [[12, 3, 1, "", "client_id"], [12, 3, 1, "", "client_order_id"], [12, 2, 1, "", "from_dict"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "price"], [12, 3, 1, "", "quantity"], [12, 3, 1, "", "strategy_id"], [12, 2, 1, "", "to_dict"], [12, 3, 1, "", "trader_id"], [12, 3, 1, "", "trigger_price"], [12, 3, 1, "", "ts_init"], [12, 3, 1, "", "venue_order_id"]], "nautilus_trader.execution.messages.QueryOrder": [[12, 3, 1, "", "client_id"], [12, 3, 1, "", "client_order_id"], [12, 2, 1, "", "from_dict"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "strategy_id"], [12, 2, 1, "", "to_dict"], [12, 3, 1, "", "trader_id"], [12, 3, 1, "", "ts_init"], [12, 3, 1, "", "venue_order_id"]], "nautilus_trader.execution.messages.SubmitOrder": [[12, 3, 1, "", "client_id"], [12, 3, 1, "", "exec_algorithm_id"], [12, 2, 1, "", "from_dict"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "order"], [12, 3, 1, "", "position_id"], [12, 3, 1, "", "strategy_id"], [12, 2, 1, "", "to_dict"], [12, 3, 1, "", "trader_id"], [12, 3, 1, "", "ts_init"]], "nautilus_trader.execution.messages.SubmitOrderList": [[12, 3, 1, "", "client_id"], [12, 3, 1, "", "exec_algorithm_id"], [12, 2, 1, "", "from_dict"], [12, 3, 1, "", "has_emulated_order"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "order_list"], [12, 3, 1, "", "position_id"], [12, 3, 1, "", "strategy_id"], [12, 2, 1, "", "to_dict"], [12, 3, 1, "", "trader_id"], [12, 3, 1, "", "ts_init"]], "nautilus_trader.execution.messages.TradingCommand": [[12, 3, 1, "", "client_id"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "strategy_id"], [12, 3, 1, "", "trader_id"], [12, 3, 1, "", "ts_init"]], "nautilus_trader.execution.reports": [[12, 1, 1, "", "ExecutionMassStatus"], [12, 1, 1, "", "ExecutionReport"], [12, 1, 1, "", "OrderStatusReport"], [12, 1, 1, "", "PositionStatusReport"], [12, 1, 1, "", "TradeReport"]], "nautilus_trader.execution.reports.ExecutionMassStatus": [[12, 3, 1, "", "account_id"], [12, 2, 1, "", "add_order_reports"], [12, 2, 1, "", "add_position_reports"], [12, 2, 1, "", "add_trade_reports"], [12, 3, 1, "", "client_id"], [12, 3, 1, "", "id"], [12, 2, 1, "", "order_reports"], [12, 2, 1, "", "position_reports"], [12, 2, 1, "", "trade_reports"], [12, 3, 1, "", "ts_init"], [12, 3, 1, "", "venue"]], "nautilus_trader.execution.reports.ExecutionReport": [[12, 3, 1, "", "account_id"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "ts_init"]], "nautilus_trader.execution.reports.OrderStatusReport": [[12, 3, 1, "", "account_id"], [12, 3, 1, "", "avg_px"], [12, 3, 1, "", "cancel_reason"], [12, 3, 1, "", "client_order_id"], [12, 3, 1, "", "contingency_type"], [12, 3, 1, "", "display_qty"], [12, 3, 1, "", "expire_time"], [12, 3, 1, "", "filled_qty"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "leaves_qty"], [12, 3, 1, "", "limit_offset"], [12, 3, 1, "", "order_list_id"], [12, 3, 1, "", "order_side"], [12, 3, 1, "", "order_status"], [12, 3, 1, "", "order_type"], [12, 3, 1, "", "post_only"], [12, 3, 1, "", "price"], [12, 3, 1, "", "quantity"], [12, 3, 1, "", "reduce_only"], [12, 3, 1, "", "time_in_force"], [12, 3, 1, "", "trailing_offset"], [12, 3, 1, "", "trailing_offset_type"], [12, 3, 1, "", "trigger_price"], [12, 3, 1, "", "trigger_type"], [12, 3, 1, "", "ts_accepted"], [12, 3, 1, "", "ts_init"], [12, 3, 1, "", "ts_last"], [12, 3, 1, "", "ts_triggered"], [12, 3, 1, "", "venue_order_id"]], "nautilus_trader.execution.reports.PositionStatusReport": [[12, 3, 1, "", "account_id"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "position_side"], [12, 3, 1, "", "quantity"], [12, 3, 1, "", "signed_decimal_qty"], [12, 3, 1, "", "ts_init"], [12, 3, 1, "", "ts_last"], [12, 3, 1, "", "venue_position_id"]], "nautilus_trader.execution.reports.TradeReport": [[12, 3, 1, "", "account_id"], [12, 3, 1, "", "client_order_id"], [12, 3, 1, "", "commission"], [12, 3, 1, "", "id"], [12, 3, 1, "", "instrument_id"], [12, 3, 1, "", "last_px"], [12, 3, 1, "", "last_qty"], [12, 3, 1, "", "liquidity_side"], [12, 3, 1, "", "order_side"], [12, 3, 1, "", "trade_id"], [12, 3, 1, "", "ts_event"], [12, 3, 1, "", "ts_init"], [12, 3, 1, "", "venue_order_id"], [12, 3, 1, "", "venue_position_id"]], "nautilus_trader.model": [[17, 0, 0, "-", "currency"], [19, 0, 0, "-", "events"], [20, 0, 0, "-", "identifiers"], [23, 0, 0, "-", "objects"], [25, 0, 0, "-", "orders"], [26, 0, 0, "-", "position"], [27, 0, 0, "-", "tick_scheme"]], "nautilus_trader.model.currency": [[17, 1, 1, "", "Currency"]], "nautilus_trader.model.currency.Currency": [[17, 3, 1, "", "code"], [17, 3, 1, "", "currency_type"], [17, 2, 1, "", "from_str"], [17, 2, 1, "", "is_crypto"], [17, 2, 1, "", "is_fiat"], [17, 3, 1, "", "iso4217"], [17, 3, 1, "", "name"], [17, 3, 1, "", "precision"], [17, 2, 1, "", "register"]], "nautilus_trader.model.data": [[18, 0, 0, "-", "bar"], [18, 0, 0, "-", "base"]], "nautilus_trader.model.data.bar": [[18, 1, 1, "", "Bar"], [18, 1, 1, "", "BarSpecification"], [18, 1, 1, "", "BarType"]], "nautilus_trader.model.data.bar.Bar": [[18, 3, 1, "", "bar_type"], [18, 3, 1, "", "close"], [18, 2, 1, "", "from_dict"], [18, 2, 1, "", "fully_qualified_name"], [18, 3, 1, "", "high"], [18, 3, 1, "", "is_revision"], [18, 2, 1, "", "is_single_price"], [18, 3, 1, "", "low"], [18, 3, 1, "", "open"], [18, 2, 1, "", "to_dict"], [18, 3, 1, "", "ts_event"], [18, 3, 1, "", "ts_init"], [18, 3, 1, "", "volume"]], "nautilus_trader.model.data.bar.BarSpecification": [[18, 3, 1, "", "aggregation"], [18, 2, 1, "", "check_information_aggregated"], [18, 2, 1, "", "check_threshold_aggregated"], [18, 2, 1, "", "check_time_aggregated"], [18, 2, 1, "", "from_str"], [18, 2, 1, "", "from_timedelta"], [18, 2, 1, "", "is_information_aggregated"], [18, 2, 1, "", "is_threshold_aggregated"], [18, 2, 1, "", "is_time_aggregated"], [18, 3, 1, "", "price_type"], [18, 3, 1, "", "step"], [18, 3, 1, "", "timedelta"]], "nautilus_trader.model.data.bar.BarType": [[18, 3, 1, "", "aggregation_source"], [18, 2, 1, "", "from_str"], [18, 3, 1, "", "instrument_id"], [18, 2, 1, "", "is_externally_aggregated"], [18, 2, 1, "", "is_internally_aggregated"], [18, 3, 1, "", "spec"]], "nautilus_trader.model.data.base": [[18, 1, 1, "", "DataType"], [18, 1, 1, "", "GenericData"]], "nautilus_trader.model.data.base.DataType": [[18, 3, 1, "", "metadata"], [18, 3, 1, "", "topic"], [18, 3, 1, "", "type"]], "nautilus_trader.model.data.base.GenericData": [[18, 3, 1, "", "data"], [18, 3, 1, "", "data_type"], [18, 2, 1, "", "fully_qualified_name"], [18, 3, 1, "", "ts_event"], [18, 3, 1, "", "ts_init"]], "nautilus_trader.model.events": [[19, 0, 0, "-", "account"], [19, 0, 0, "-", "order"], [19, 0, 0, "-", "position"]], "nautilus_trader.model.events.account": [[19, 1, 1, "", "AccountState"]], "nautilus_trader.model.events.account.AccountState": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "account_type"], [19, 3, 1, "", "balances"], [19, 3, 1, "", "base_currency"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "info"], [19, 3, 1, "", "is_reported"], [19, 3, 1, "", "margins"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"]], "nautilus_trader.model.events.order": [[19, 1, 1, "", "OrderAccepted"], [19, 1, 1, "", "OrderCancelRejected"], [19, 1, 1, "", "OrderCanceled"], [19, 1, 1, "", "OrderDenied"], [19, 1, 1, "", "OrderEvent"], [19, 1, 1, "", "OrderExpired"], [19, 1, 1, "", "OrderFilled"], [19, 1, 1, "", "OrderInitialized"], [19, 1, 1, "", "OrderModifyRejected"], [19, 1, 1, "", "OrderPendingCancel"], [19, 1, 1, "", "OrderPendingUpdate"], [19, 1, 1, "", "OrderRejected"], [19, 1, 1, "", "OrderSubmitted"], [19, 1, 1, "", "OrderTriggered"], [19, 1, 1, "", "OrderUpdated"]], "nautilus_trader.model.events.order.OrderAccepted": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderCancelRejected": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reason"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderCanceled": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderDenied": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reason"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderEvent": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderExpired": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderFilled": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 3, 1, "", "commission"], [19, 3, 1, "", "currency"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "info"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "is_buy"], [19, 3, 1, "", "is_sell"], [19, 3, 1, "", "last_px"], [19, 3, 1, "", "last_qty"], [19, 3, 1, "", "liquidity_side"], [19, 3, 1, "", "order_side"], [19, 3, 1, "", "order_type"], [19, 3, 1, "", "position_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trade_id"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderInitialized": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 3, 1, "", "contingency_type"], [19, 3, 1, "", "emulation_trigger"], [19, 3, 1, "", "exec_algorithm_id"], [19, 3, 1, "", "exec_algorithm_params"], [19, 3, 1, "", "exec_spawn_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "linked_order_ids"], [19, 3, 1, "", "options"], [19, 3, 1, "", "order_list_id"], [19, 3, 1, "", "order_type"], [19, 3, 1, "", "parent_order_id"], [19, 3, 1, "", "post_only"], [19, 3, 1, "", "quantity"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "reduce_only"], [19, 3, 1, "", "side"], [19, 3, 1, "", "strategy_id"], [19, 3, 1, "", "tags"], [19, 3, 1, "", "time_in_force"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderModifyRejected": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reason"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderPendingCancel": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderPendingUpdate": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderRejected": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reason"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderSubmitted": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderTriggered": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.order.OrderUpdated": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "client_order_id"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "price"], [19, 3, 1, "", "quantity"], [19, 3, 1, "", "reconciliation"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "trigger_price"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "venue_order_id"]], "nautilus_trader.model.events.position": [[19, 1, 1, "", "PositionChanged"], [19, 1, 1, "", "PositionClosed"], [19, 1, 1, "", "PositionEvent"], [19, 1, 1, "", "PositionOpened"]], "nautilus_trader.model.events.position.PositionChanged": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "avg_px_close"], [19, 3, 1, "", "avg_px_open"], [19, 3, 1, "", "closing_order_id"], [19, 2, 1, "", "create"], [19, 3, 1, "", "currency"], [19, 3, 1, "", "duration_ns"], [19, 3, 1, "", "entry"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "last_px"], [19, 3, 1, "", "last_qty"], [19, 3, 1, "", "opening_order_id"], [19, 3, 1, "", "peak_qty"], [19, 3, 1, "", "position_id"], [19, 3, 1, "", "quantity"], [19, 3, 1, "", "realized_pnl"], [19, 3, 1, "", "realized_return"], [19, 3, 1, "", "side"], [19, 3, 1, "", "signed_qty"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_closed"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "ts_opened"], [19, 3, 1, "", "unrealized_pnl"]], "nautilus_trader.model.events.position.PositionClosed": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "avg_px_close"], [19, 3, 1, "", "avg_px_open"], [19, 3, 1, "", "closing_order_id"], [19, 2, 1, "", "create"], [19, 3, 1, "", "currency"], [19, 3, 1, "", "duration_ns"], [19, 3, 1, "", "entry"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "last_px"], [19, 3, 1, "", "last_qty"], [19, 3, 1, "", "opening_order_id"], [19, 3, 1, "", "peak_qty"], [19, 3, 1, "", "position_id"], [19, 3, 1, "", "quantity"], [19, 3, 1, "", "realized_pnl"], [19, 3, 1, "", "realized_return"], [19, 3, 1, "", "side"], [19, 3, 1, "", "signed_qty"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_closed"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "ts_opened"], [19, 3, 1, "", "unrealized_pnl"]], "nautilus_trader.model.events.position.PositionEvent": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "avg_px_close"], [19, 3, 1, "", "avg_px_open"], [19, 3, 1, "", "closing_order_id"], [19, 3, 1, "", "currency"], [19, 3, 1, "", "duration_ns"], [19, 3, 1, "", "entry"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "last_px"], [19, 3, 1, "", "last_qty"], [19, 3, 1, "", "opening_order_id"], [19, 3, 1, "", "peak_qty"], [19, 3, 1, "", "position_id"], [19, 3, 1, "", "quantity"], [19, 3, 1, "", "realized_pnl"], [19, 3, 1, "", "realized_return"], [19, 3, 1, "", "side"], [19, 3, 1, "", "signed_qty"], [19, 3, 1, "", "strategy_id"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_closed"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "ts_opened"], [19, 3, 1, "", "unrealized_pnl"]], "nautilus_trader.model.events.position.PositionOpened": [[19, 3, 1, "", "account_id"], [19, 3, 1, "", "avg_px_close"], [19, 3, 1, "", "avg_px_open"], [19, 3, 1, "", "closing_order_id"], [19, 2, 1, "", "create"], [19, 3, 1, "", "currency"], [19, 3, 1, "", "duration_ns"], [19, 3, 1, "", "entry"], [19, 2, 1, "", "from_dict"], [19, 3, 1, "", "id"], [19, 3, 1, "", "instrument_id"], [19, 3, 1, "", "last_px"], [19, 3, 1, "", "last_qty"], [19, 3, 1, "", "opening_order_id"], [19, 3, 1, "", "peak_qty"], [19, 3, 1, "", "position_id"], [19, 3, 1, "", "quantity"], [19, 3, 1, "", "realized_pnl"], [19, 3, 1, "", "realized_return"], [19, 3, 1, "", "side"], [19, 3, 1, "", "signed_qty"], [19, 3, 1, "", "strategy_id"], [19, 2, 1, "", "to_dict"], [19, 3, 1, "", "trader_id"], [19, 3, 1, "", "ts_closed"], [19, 3, 1, "", "ts_event"], [19, 3, 1, "", "ts_init"], [19, 3, 1, "", "ts_opened"], [19, 3, 1, "", "unrealized_pnl"]], "nautilus_trader.model.identifiers": [[20, 1, 1, "", "AccountId"], [20, 1, 1, "", "ClientId"], [20, 1, 1, "", "ClientOrderId"], [20, 1, 1, "", "ComponentId"], [20, 1, 1, "", "ExecAlgorithmId"], [20, 1, 1, "", "Identifier"], [20, 1, 1, "", "InstrumentId"], [20, 1, 1, "", "OrderListId"], [20, 1, 1, "", "PositionId"], [20, 1, 1, "", "StrategyId"], [20, 1, 1, "", "Symbol"], [20, 1, 1, "", "TradeId"], [20, 1, 1, "", "TraderId"], [20, 1, 1, "", "Venue"], [20, 1, 1, "", "VenueOrderId"]], "nautilus_trader.model.identifiers.AccountId": [[20, 2, 1, "", "get_id"], [20, 2, 1, "", "get_issuer"], [20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.ClientId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.ClientOrderId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.ComponentId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.ExecAlgorithmId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.Identifier": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.InstrumentId": [[20, 2, 1, "", "from_str"], [20, 3, 1, "", "symbol"], [20, 3, 1, "", "value"], [20, 3, 1, "", "venue"]], "nautilus_trader.model.identifiers.OrderListId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.PositionId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.StrategyId": [[20, 2, 1, "", "get_tag"], [20, 2, 1, "", "is_external"], [20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.Symbol": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.TradeId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.TraderId": [[20, 2, 1, "", "get_tag"], [20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.Venue": [[20, 3, 1, "", "value"]], "nautilus_trader.model.identifiers.VenueOrderId": [[20, 3, 1, "", "value"]], "nautilus_trader.model.instruments": [[22, 0, 0, "-", "base"]], "nautilus_trader.model.instruments.base": [[22, 1, 1, "", "Instrument"]], "nautilus_trader.model.instruments.base.Instrument": [[22, 3, 1, "", "asset_class"], [22, 3, 1, "", "asset_type"], [22, 2, 1, "", "base_from_dict"], [22, 2, 1, "", "base_to_dict"], [22, 2, 1, "", "fully_qualified_name"], [22, 2, 1, "", "get_base_currency"], [22, 2, 1, "", "get_settlement_currency"], [22, 3, 1, "", "id"], [22, 3, 1, "", "info"], [22, 3, 1, "", "is_inverse"], [22, 3, 1, "", "lot_size"], [22, 2, 1, "", "make_price"], [22, 2, 1, "", "make_qty"], [22, 3, 1, "", "maker_fee"], [22, 3, 1, "", "margin_init"], [22, 3, 1, "", "margin_maint"], [22, 3, 1, "", "max_notional"], [22, 3, 1, "", "max_price"], [22, 3, 1, "", "max_quantity"], [22, 3, 1, "", "min_notional"], [22, 3, 1, "", "min_price"], [22, 3, 1, "", "min_quantity"], [22, 3, 1, "", "multiplier"], [22, 3, 1, "", "native_symbol"], [22, 2, 1, "", "next_ask_price"], [22, 2, 1, "", "next_bid_price"], [22, 2, 1, "", "notional_value"], [22, 3, 1, "", "price_increment"], [22, 3, 1, "", "price_precision"], [22, 3, 1, "", "quote_currency"], [22, 3, 1, "", "size_increment"], [22, 3, 1, "", "size_precision"], [22, 3, 1, "", "symbol"], [22, 3, 1, "", "taker_fee"], [22, 3, 1, "", "tick_scheme_name"], [22, 3, 1, "", "ts_event"], [22, 3, 1, "", "ts_init"], [22, 3, 1, "", "venue"]], "nautilus_trader.model.objects": [[23, 1, 1, "", "AccountBalance"], [23, 1, 1, "", "MarginBalance"], [23, 1, 1, "", "Money"], [23, 1, 1, "", "Price"], [23, 1, 1, "", "Quantity"]], "nautilus_trader.model.objects.AccountBalance": [[23, 3, 1, "", "currency"], [23, 3, 1, "", "free"], [23, 2, 1, "", "from_dict"], [23, 3, 1, "", "locked"], [23, 2, 1, "", "to_dict"], [23, 3, 1, "", "total"]], "nautilus_trader.model.objects.MarginBalance": [[23, 3, 1, "", "currency"], [23, 2, 1, "", "from_dict"], [23, 3, 1, "", "initial"], [23, 3, 1, "", "instrument_id"], [23, 3, 1, "", "maintenance"], [23, 2, 1, "", "to_dict"]], "nautilus_trader.model.objects.Money": [[23, 2, 1, "", "as_decimal"], [23, 2, 1, "", "as_double"], [23, 3, 1, "", "currency"], [23, 2, 1, "", "from_raw"], [23, 2, 1, "", "from_str"], [23, 2, 1, "", "to_str"]], "nautilus_trader.model.objects.Price": [[23, 2, 1, "", "as_decimal"], [23, 2, 1, "", "as_double"], [23, 2, 1, "", "from_int"], [23, 2, 1, "", "from_raw"], [23, 2, 1, "", "from_str"], [23, 3, 1, "", "precision"], [23, 2, 1, "", "raw_to_f64"]], "nautilus_trader.model.objects.Quantity": [[23, 2, 1, "", "as_decimal"], [23, 2, 1, "", "as_double"], [23, 2, 1, "", "from_int"], [23, 2, 1, "", "from_raw"], [23, 2, 1, "", "from_str"], [23, 3, 1, "", "precision"], [23, 2, 1, "", "raw_to_f64"], [23, 2, 1, "", "to_str"], [23, 2, 1, "", "zero"]], "nautilus_trader.model.orders": [[25, 0, 0, "-", "base"], [25, 0, 0, "-", "limit"], [25, 0, 0, "-", "limit_if_touched"], [25, 0, 0, "-", "list"], [25, 0, 0, "-", "market"], [25, 0, 0, "-", "market_if_touched"], [25, 0, 0, "-", "market_to_limit"], [25, 0, 0, "-", "stop_limit"], [25, 0, 0, "-", "stop_market"], [25, 0, 0, "-", "trailing_stop_limit"], [25, 0, 0, "-", "trailing_stop_market"]], "nautilus_trader.model.orders.base": [[25, 1, 1, "", "Order"]], "nautilus_trader.model.orders.base.Order": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.limit": [[25, 1, 1, "", "LimitOrder"]], "nautilus_trader.model.orders.limit.LimitOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "display_qty"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "price"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 2, 1, "", "transform_py"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.limit_if_touched": [[25, 1, 1, "", "LimitIfTouchedOrder"]], "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "display_qty"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "is_triggered"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "price"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "trigger_price"], [25, 3, 1, "", "trigger_type"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "ts_triggered"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.list": [[25, 1, 1, "", "OrderList"]], "nautilus_trader.model.orders.list.OrderList": [[25, 3, 1, "", "first"], [25, 3, 1, "", "id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "orders"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "ts_init"]], "nautilus_trader.model.orders.market": [[25, 1, 1, "", "MarketOrder"]], "nautilus_trader.model.orders.market.MarketOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 2, 1, "", "transform_py"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.market_if_touched": [[25, 1, 1, "", "MarketIfTouchedOrder"]], "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "trigger_price"], [25, 3, 1, "", "trigger_type"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.market_to_limit": [[25, 1, 1, "", "MarketToLimitOrder"]], "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "display_qty"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "price"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.stop_limit": [[25, 1, 1, "", "StopLimitOrder"]], "nautilus_trader.model.orders.stop_limit.StopLimitOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "display_qty"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "is_triggered"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "price"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "trigger_price"], [25, 3, 1, "", "trigger_type"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "ts_triggered"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.stop_market": [[25, 1, 1, "", "StopMarketOrder"]], "nautilus_trader.model.orders.stop_market.StopMarketOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "trigger_price"], [25, 3, 1, "", "trigger_type"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.trailing_stop_limit": [[25, 1, 1, "", "TrailingStopLimitOrder"]], "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "display_qty"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "is_triggered"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "limit_offset"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "price"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "trailing_offset"], [25, 3, 1, "", "trailing_offset_type"], [25, 3, 1, "", "trigger_price"], [25, 3, 1, "", "trigger_type"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "ts_triggered"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.orders.trailing_stop_market": [[25, 1, 1, "", "TrailingStopMarketOrder"]], "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder": [[25, 3, 1, "", "account_id"], [25, 2, 1, "", "apply"], [25, 3, 1, "", "avg_px"], [25, 3, 1, "", "client_order_id"], [25, 2, 1, "", "closing_side"], [25, 3, 1, "", "contingency_type"], [25, 3, 1, "", "emulation_trigger"], [25, 3, 1, "", "event_count"], [25, 3, 1, "", "events"], [25, 3, 1, "", "exec_algorithm_id"], [25, 3, 1, "", "exec_algorithm_params"], [25, 3, 1, "", "exec_spawn_id"], [25, 3, 1, "", "expire_time"], [25, 3, 1, "", "expire_time_ns"], [25, 3, 1, "", "filled_qty"], [25, 3, 1, "", "has_price"], [25, 3, 1, "", "has_trigger_price"], [25, 2, 1, "", "info"], [25, 3, 1, "", "init_event"], [25, 3, 1, "", "init_id"], [25, 3, 1, "", "instrument_id"], [25, 3, 1, "", "is_aggressive"], [25, 3, 1, "", "is_buy"], [25, 3, 1, "", "is_canceled"], [25, 3, 1, "", "is_child_order"], [25, 3, 1, "", "is_closed"], [25, 3, 1, "", "is_contingency"], [25, 3, 1, "", "is_emulated"], [25, 3, 1, "", "is_inflight"], [25, 3, 1, "", "is_open"], [25, 3, 1, "", "is_parent_order"], [25, 3, 1, "", "is_passive"], [25, 3, 1, "", "is_pending_cancel"], [25, 3, 1, "", "is_pending_update"], [25, 3, 1, "", "is_post_only"], [25, 3, 1, "", "is_primary"], [25, 3, 1, "", "is_reduce_only"], [25, 3, 1, "", "is_sell"], [25, 3, 1, "", "is_spawned"], [25, 3, 1, "", "last_event"], [25, 3, 1, "", "last_trade_id"], [25, 3, 1, "", "leaves_qty"], [25, 3, 1, "", "linked_order_ids"], [25, 3, 1, "", "liquidity_side"], [25, 2, 1, "", "opposite_side"], [25, 3, 1, "", "order_list_id"], [25, 3, 1, "", "order_type"], [25, 3, 1, "", "parent_order_id"], [25, 3, 1, "", "position_id"], [25, 3, 1, "", "quantity"], [25, 3, 1, "", "side"], [25, 3, 1, "", "side_string"], [25, 2, 1, "", "signed_decimal_qty"], [25, 3, 1, "", "slippage"], [25, 3, 1, "", "status"], [25, 3, 1, "", "strategy_id"], [25, 3, 1, "", "symbol"], [25, 3, 1, "", "tags"], [25, 3, 1, "", "time_in_force"], [25, 2, 1, "", "to_dict"], [25, 3, 1, "", "trade_ids"], [25, 3, 1, "", "trader_id"], [25, 3, 1, "", "trailing_offset"], [25, 3, 1, "", "trailing_offset_type"], [25, 3, 1, "", "trigger_price"], [25, 3, 1, "", "trigger_type"], [25, 3, 1, "", "ts_init"], [25, 3, 1, "", "ts_last"], [25, 3, 1, "", "venue"], [25, 3, 1, "", "venue_order_id"], [25, 3, 1, "", "venue_order_ids"], [25, 2, 1, "", "would_reduce_only"]], "nautilus_trader.model.position": [[26, 1, 1, "", "Position"]], "nautilus_trader.model.position.Position": [[26, 3, 1, "", "account_id"], [26, 2, 1, "", "apply"], [26, 3, 1, "", "avg_px_close"], [26, 3, 1, "", "avg_px_open"], [26, 3, 1, "", "base_currency"], [26, 2, 1, "", "calculate_pnl"], [26, 3, 1, "", "client_order_ids"], [26, 3, 1, "", "closing_order_id"], [26, 2, 1, "", "commissions"], [26, 3, 1, "", "cost_currency"], [26, 3, 1, "", "duration_ns"], [26, 3, 1, "", "entry"], [26, 3, 1, "", "event_count"], [26, 3, 1, "", "events"], [26, 3, 1, "", "id"], [26, 2, 1, "", "info"], [26, 3, 1, "", "instrument_id"], [26, 3, 1, "", "is_closed"], [26, 3, 1, "", "is_inverse"], [26, 3, 1, "", "is_long"], [26, 3, 1, "", "is_open"], [26, 2, 1, "", "is_opposite_side"], [26, 3, 1, "", "is_short"], [26, 3, 1, "", "last_event"], [26, 3, 1, "", "last_trade_id"], [26, 3, 1, "", "multiplier"], [26, 2, 1, "", "notional_value"], [26, 3, 1, "", "opening_order_id"], [26, 3, 1, "", "peak_qty"], [26, 3, 1, "", "price_precision"], [26, 3, 1, "", "quantity"], [26, 3, 1, "", "quote_currency"], [26, 3, 1, "", "realized_pnl"], [26, 3, 1, "", "realized_return"], [26, 3, 1, "", "side"], [26, 2, 1, "", "side_from_order_side"], [26, 2, 1, "", "signed_decimal_qty"], [26, 3, 1, "", "signed_qty"], [26, 3, 1, "", "size_precision"], [26, 3, 1, "", "strategy_id"], [26, 3, 1, "", "symbol"], [26, 2, 1, "", "to_dict"], [26, 2, 1, "", "total_pnl"], [26, 3, 1, "", "trade_ids"], [26, 3, 1, "", "trader_id"], [26, 3, 1, "", "ts_closed"], [26, 3, 1, "", "ts_init"], [26, 3, 1, "", "ts_last"], [26, 3, 1, "", "ts_opened"], [26, 2, 1, "", "unrealized_pnl"], [26, 3, 1, "", "venue"], [26, 3, 1, "", "venue_order_ids"]], "nautilus_trader.model.tick_scheme": [[27, 0, 0, "-", "base"]], "nautilus_trader.model.tick_scheme.base": [[27, 1, 1, "", "TickScheme"], [27, 5, 1, "", "get_tick_scheme"], [27, 5, 1, "", "list_tick_schemes"], [27, 5, 1, "", "register_tick_scheme"], [27, 5, 1, "", "round_down"], [27, 5, 1, "", "round_up"]], "nautilus_trader.model.tick_scheme.base.TickScheme": [[27, 3, 1, "", "max_price"], [27, 3, 1, "", "min_price"], [27, 3, 1, "", "name"], [27, 2, 1, "", "next_ask_price"], [27, 2, 1, "", "next_bid_price"]], "nautilus_trader.model.tick_scheme.implementations": [[27, 0, 0, "-", "fixed"], [27, 0, 0, "-", "tiered"]], "nautilus_trader.model.tick_scheme.implementations.fixed": [[27, 1, 1, "", "FixedTickScheme"]], "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme": [[27, 3, 1, "", "increment"], [27, 3, 1, "", "max_price"], [27, 3, 1, "", "min_price"], [27, 3, 1, "", "name"], [27, 2, 1, "", "next_ask_price"], [27, 2, 1, "", "next_bid_price"], [27, 3, 1, "", "price_precision"]], "nautilus_trader.model.tick_scheme.implementations.tiered": [[27, 1, 1, "", "TieredTickScheme"]], "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme": [[27, 2, 1, "", "find_tick_index"], [27, 3, 1, "", "max_price"], [27, 3, 1, "", "min_price"], [27, 3, 1, "", "name"], [27, 2, 1, "", "next_ask_price"], [27, 2, 1, "", "next_bid_price"]], "nautilus_trader.msgbus": [[28, 0, 0, "-", "bus"], [28, 0, 0, "-", "subscription"]], "nautilus_trader.msgbus.bus": [[28, 1, 1, "", "MessageBus"], [28, 5, 1, "", "is_matching_py"]], "nautilus_trader.msgbus.bus.MessageBus": [[28, 2, 1, "", "deregister"], [28, 2, 1, "", "endpoints"], [28, 2, 1, "", "has_subscribers"], [28, 2, 1, "", "is_subscribed"], [28, 3, 1, "", "pub_count"], [28, 2, 1, "", "publish"], [28, 2, 1, "", "register"], [28, 3, 1, "", "req_count"], [28, 2, 1, "", "request"], [28, 3, 1, "", "res_count"], [28, 2, 1, "", "response"], [28, 2, 1, "", "send"], [28, 3, 1, "", "sent_count"], [28, 2, 1, "", "subscribe"], [28, 2, 1, "", "subscriptions"], [28, 2, 1, "", "topics"], [28, 3, 1, "", "trader_id"], [28, 2, 1, "", "unsubscribe"]], "nautilus_trader.msgbus.subscription": [[28, 1, 1, "", "Subscription"]], "nautilus_trader.msgbus.subscription.Subscription": [[28, 3, 1, "", "handler"], [28, 3, 1, "", "priority"], [28, 3, 1, "", "topic"]], "nautilus_trader.network": [[29, 0, 0, "-", "http"], [29, 0, 0, "-", "socket"], [29, 0, 0, "-", "websocket"]], "nautilus_trader.network.http": [[29, 1, 1, "", "HttpClient"]], "nautilus_trader.network.http.HttpClient": [[29, 2, 1, "", "avg_latency"], [29, 2, 1, "", "connect"], [29, 3, 1, "", "connected"], [29, 2, 1, "", "delete"], [29, 2, 1, "", "disconnect"], [29, 2, 1, "", "get"], [29, 2, 1, "", "max_latency"], [29, 2, 1, "", "min_latency"], [29, 2, 1, "", "post"], [29, 2, 1, "", "request"], [29, 3, 1, "", "session"]], "nautilus_trader.network.socket": [[29, 1, 1, "", "SocketClient"]], "nautilus_trader.network.socket.SocketClient": [[29, 2, 1, "", "connect"], [29, 2, 1, "", "disconnect"], [29, 3, 1, "", "host"], [29, 3, 1, "", "is_connected"], [29, 3, 1, "", "is_running"], [29, 3, 1, "", "is_stopping"], [29, 3, 1, "", "port"], [29, 2, 1, "", "post_connection"], [29, 2, 1, "", "post_disconnection"], [29, 2, 1, "", "post_reconnection"], [29, 2, 1, "", "reconnect"], [29, 2, 1, "", "send"], [29, 3, 1, "", "ssl"], [29, 2, 1, "", "start"]], "nautilus_trader.network.websocket": [[29, 1, 1, "", "WSMsgType"], [29, 1, 1, "", "WebSocketClient"]], "nautilus_trader.network.websocket.WSMsgType": [[29, 2, 1, "", "as_integer_ratio"], [29, 2, 1, "", "bit_count"], [29, 2, 1, "", "bit_length"], [29, 2, 1, "", "conjugate"], [29, 3, 1, "", "denominator"], [29, 2, 1, "", "from_bytes"], [29, 3, 1, "", "imag"], [29, 3, 1, "", "numerator"], [29, 3, 1, "", "real"], [29, 2, 1, "", "to_bytes"]], "nautilus_trader.network.websocket.WebSocketClient": [[29, 2, 1, "", "close"], [29, 2, 1, "", "connect"], [29, 3, 1, "", "connection_retry_count"], [29, 2, 1, "", "disconnect"], [29, 3, 1, "", "is_connected"], [29, 3, 1, "", "is_running"], [29, 3, 1, "", "is_stopping"], [29, 3, 1, "", "max_retry_connection"], [29, 2, 1, "", "post_connection"], [29, 2, 1, "", "post_disconnection"], [29, 2, 1, "", "post_reconnection"], [29, 2, 1, "", "receive"], [29, 2, 1, "", "reconnect"], [29, 2, 1, "", "send"], [29, 2, 1, "", "send_json"], [29, 2, 1, "", "start"], [29, 3, 1, "", "unknown_message_count"]], "nautilus_trader.portfolio": [[31, 0, 0, "-", "base"]], "nautilus_trader.portfolio.base": [[31, 1, 1, "", "PortfolioFacade"]], "nautilus_trader.portfolio.base.PortfolioFacade": [[31, 2, 1, "", "account"], [31, 3, 1, "", "analyzer"], [31, 2, 1, "", "balances_locked"], [31, 3, 1, "", "initialized"], [31, 2, 1, "", "is_completely_flat"], [31, 2, 1, "", "is_flat"], [31, 2, 1, "", "is_net_long"], [31, 2, 1, "", "is_net_short"], [31, 2, 1, "", "margins_init"], [31, 2, 1, "", "margins_maint"], [31, 2, 1, "", "net_exposure"], [31, 2, 1, "", "net_exposures"], [31, 2, 1, "", "net_position"], [31, 2, 1, "", "unrealized_pnl"], [31, 2, 1, "", "unrealized_pnls"]], "nautilus_trader.risk": [[32, 0, 0, "-", "sizing"]], "nautilus_trader.risk.sizing": [[32, 1, 1, "", "FixedRiskSizer"], [32, 1, 1, "", "PositionSizer"]], "nautilus_trader.risk.sizing.FixedRiskSizer": [[32, 2, 1, "", "calculate"], [32, 3, 1, "", "instrument"], [32, 2, 1, "", "update_instrument"]], "nautilus_trader.risk.sizing.PositionSizer": [[32, 2, 1, "", "calculate"], [32, 3, 1, "", "instrument"], [32, 2, 1, "", "update_instrument"]], "nautilus_trader.trading": [[35, 0, 0, "-", "filters"]], "nautilus_trader.trading.filters": [[35, 1, 1, "", "EconomicNewsEventFilter"], [35, 1, 1, "", "ForexSession"], [35, 1, 1, "", "ForexSessionFilter"], [35, 1, 1, "", "NewsEvent"], [35, 1, 1, "", "NewsImpact"]], "nautilus_trader.trading.filters.EconomicNewsEventFilter": [[35, 3, 1, "", "currencies"], [35, 3, 1, "", "impacts"], [35, 2, 1, "", "next_event"], [35, 2, 1, "", "prev_event"], [35, 3, 1, "", "unfiltered_data_end"], [35, 3, 1, "", "unfiltered_data_start"]], "nautilus_trader.trading.filters.ForexSessionFilter": [[35, 2, 1, "", "local_from_utc"], [35, 2, 1, "", "next_end"], [35, 2, 1, "", "next_start"], [35, 2, 1, "", "prev_end"], [35, 2, 1, "", "prev_start"]], "nautilus_trader.trading.filters.NewsEvent": [[35, 3, 1, "", "currency"], [35, 2, 1, "", "fully_qualified_name"], [35, 3, 1, "", "impact"], [35, 3, 1, "", "name"], [35, 3, 1, "", "ts_event"], [35, 3, 1, "", "ts_init"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"account": [0, 44, 64], "betfair": [1, 63], "config": [1, 2, 4, 9], "data": [1, 2, 4, 11, 18, 36, 38, 44, 53, 58, 59, 61, 64], "type": [1, 2, 37, 39, 42, 44, 47, 64], "execut": [1, 2, 4, 12, 43, 47], "factori": [1, 2, 4, 47], "histor": 1, "provid": [1, 2, 4, 36], "socket": 1, "binanc": [2, 64], "enum": 2, "futur": 2, "spot": 2, "adapt": [3, 36], "interact": [4, 65], "broker": [4, 65], "analysi": [5, 41], "backtest": [6, 9, 36, 41, 44, 45, 58, 59], "cach": 7, "common": [8, 9, 42, 44], "clock": 8, "compon": [8, 12, 42, 46], "gener": [8, 38], "log": [8, 46], "timer": 8, "live": [9, 16, 36, 44, 45], "core": [10, 42, 44], "datetim": 10, "finit": 10, "state": 10, "machin": 10, "fsm": 10, "messag": [10, 11, 12, 28, 42, 49], "stat": 10, "uuid": 10, "aggreg": [11, 64], "client": [11, 36], "engin": [11, 58], "report": 12, "api": [13, 63, 64, 65, 66], "refer": 13, "indic": 14, "infrastructur": 15, "currenc": 17, "event": [19, 53], "identifi": 20, "model": [21, 44], "instrument": [22, 36, 45, 58, 61, 65], "object": 23, "order": [24, 25, 37, 39, 43, 44, 47, 64], "book": 24, "posit": 26, "tick": 27, "scheme": 27, "bu": 28, "network": 29, "persist": [30, 39], "portfolio": [31, 41], "risk": 32, "serial": 33, "system": [34, 42], "trade": [35, 36, 44, 45, 58, 64], "research": 36, "request": 36, "exampl": [36, 59, 65], "advanc": [37, 40], "list": 37, "conting": [37, 47], "One": 37, "trigger": [37, 47], "other": 37, "oto": 37, "cancel": 37, "oco": 37, "updat": 37, "ouo": 37, "bracket": 37, "custom": [38, 41], "emul": 39, "submit": [39, 43], "life": 39, "cycl": 39, "held": 39, "releas": [39, 57], "queri": [39, 65], "statist": 41, "architectur": [42, 62], "design": 42, "philosophi": 42, "qualiti": [42, 62], "attribut": [42, 62], "environ": [42, 51], "context": 42, "framework": 42, "organ": 42, "low": 42, "level": 42, "implement": [42, 48, 66], "code": [42, 49, 55], "structur": 42, "depend": 42, "flow": [42, 43], "safeti": [42, 54], "error": 42, "except": 42, "algorithm": 43, "twap": 43, "time": [43, 47], "weight": 43, "averag": 43, "price": [43, 45], "write": [43, 58, 61], "spawn": 43, "manag": [43, 48], "concept": 44, "distribut": 44, "domain": 44, "symbologi": [45, 64], "find": 45, "precis": 45, "increment": 45, "limit": [45, 47], "quantiti": [45, 47], "margin": 45, "fee": 45, "addit": 45, "info": 45, "configur": [46, 48, 58, 59, 63, 64, 65], "standard": [46, 49], "output": 46, "file": [46, 61], "filter": 46, "overview": [47, 63, 64, 65], "instruct": 47, "In": 47, "forc": 47, "expir": 47, "post": 47, "onli": 47, "reduc": 47, "displai": 47, "offset": 47, "market": 47, "stop": [47, 64], "To": 47, "If": 47, "touch": 47, "trail": [47, 64], "strategi": [48, 58], "multipl": 48, "gtd": 48, "expiri": 48, "style": 49, "black": 49, "format": 49, "pep": 49, "8": 49, "docstr": 49, "flake8": 49, "commit": 49, "cython": [50, 62], "function": [50, 61], "method": 50, "signatur": 50, "debug": 50, "pycharm": 50, "doc": 50, "tip": 50, "setup": 51, "build": 51, "develop": 52, "guid": [52, 60], "packag": 53, "libor": 53, "rate": 53, "short": 53, "term": 53, "interest": 53, "econom": 53, "rust": [54, 62], "python": [54, 62], "bind": 54, "unsaf": 54, "polici": 54, "resourc": 54, "test": 55, "mock": 55, "coverag": 55, "exclud": 55, "get": [56, 58, 59, 61], "start": [56, 58], "instal": 57, "from": 57, "pypi": 57, "extra": 57, "sourc": 57, "github": 57, "quick": 58, "run": [58, 59], "docker": 58, "sampl": [58, 61], "connect": 58, "parquetdatacatalog": [58, 61], "venu": [58, 59], "complet": 59, "import": 59, "some": [59, 61], "raw": [59, 61], "The": [59, 61], "catalog": 59, "load": [59, 61], "us": [59, 61], "ad": 59, "extern": 61, "datacatalog": 61, "via": 61, "reader": 61, "class": 61, "parser": [61, 64], "creat": 61, "new": 61, "nautilustrad": 62, "document": 62, "featur": 62, "why": 62, "what": 62, "i": 62, "credenti": [63, 64, 65], "base": 64, "url": 64, "overrid": 64, "u": 64, "testnet": 64, "warn": 64, "specif": 64, "binancefuturesmarkpriceupd": 64, "integr": 66, "goal": 66, "unif": 66}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Accounting": [[0, "module-nautilus_trader.accounting"]], "Betfair": [[1, "module-nautilus_trader.adapters.betfair"], [63, "betfair"]], "Config": [[1, "config"], [2, "config"], [4, "config"], [9, "config"]], "Data": [[1, "data"], [2, "data"], [2, "id3"], [4, "data"], [11, "module-nautilus_trader.data"], [18, "module-nautilus_trader.model.data.bar"], [38, "data"], [58, "data"]], "Data Types": [[1, "data-types"], [44, "data-types"]], "Execution": [[1, "execution"], [2, "execution"], [2, "id5"], [4, "execution"], [12, "module-nautilus_trader.execution"], [43, "execution"]], "Factories": [[1, "factories"], [2, "factories"], [4, "factories"]], "Historic": [[1, "historic"]], "Providers": [[1, "providers"], [2, "providers"], [2, "id6"], [4, "providers"]], "Sockets": [[1, "module-nautilus_trader.adapters.betfair.sockets"]], "Binance": [[2, "module-nautilus_trader.adapters.binance"], [64, "binance"]], "Enums": [[2, "enums"], [2, "id1"], [2, "id4"]], "Types": [[2, "types"], [2, "id2"]], "Futures": [[2, "futures"]], "Spot": [[2, "spot"]], "Adapters": [[3, "module-nautilus_trader.adapters"], [36, "adapters"]], "Interactive Brokers": [[4, "module-nautilus_trader.adapters.interactive_brokers"], [65, "interactive-brokers"]], "Analysis": [[5, "module-nautilus_trader.analysis"]], "Backtest": [[6, "module-nautilus_trader.backtest"], [9, "backtest"]], "Cache": [[7, "module-nautilus_trader.cache"]], "Common": [[8, "module-nautilus_trader.common"], [9, "common"]], "Clock": [[8, "module-nautilus_trader.common.clock"]], "Component": [[8, "module-nautilus_trader.common.component"]], "Generators": [[8, "module-nautilus_trader.common.generators"]], "Logging": [[8, "module-nautilus_trader.common.logging"], [46, "logging"]], "Timer": [[8, "module-nautilus_trader.common.timer"]], "Live": [[9, "live"], [16, "module-nautilus_trader.live"]], "Core": [[10, "module-nautilus_trader.core"]], "Datetime": [[10, "module-nautilus_trader.core.datetime"]], "Finite-State Machine (FSM)": [[10, "module-nautilus_trader.core.fsm"]], "Message": [[10, "module-nautilus_trader.core.message"]], "Stats": [[10, "module-nautilus_trader.core.stats"]], "UUID": [[10, "module-nautilus_trader.core.uuid"]], "Aggregation": [[11, "aggregation"]], "Client": [[11, "client"]], "Engine": [[11, "engine"], [58, "engine"]], "Messages": [[11, "module-nautilus_trader.data.messages"], [12, "module-nautilus_trader.execution.messages"]], "Components": [[12, "module-nautilus_trader.execution.matching_core"], [42, "components"]], "Reports": [[12, "module-nautilus_trader.execution.reports"]], "API Reference": [[13, "api-reference"]], "Indicators": [[14, "module-nautilus_trader.indicators"]], "Infrastructure": [[15, "module-nautilus_trader.infrastructure"]], "Currency": [[17, "module-nautilus_trader.model.currency"]], "Events": [[19, "module-nautilus_trader.model.events"]], "Identifiers": [[20, "module-nautilus_trader.model.identifiers"]], "Model": [[21, "module-nautilus_trader.model"]], "Instruments": [[22, "module-nautilus_trader.model.instruments.base"], [45, "instruments"], [58, "instruments"], [61, "instruments"], [65, "instruments"]], "Objects": [[23, "module-nautilus_trader.model.objects"]], "Order Book": [[24, "order-book"]], "Orders": [[25, "module-nautilus_trader.model.orders"], [47, "orders"]], "Position": [[26, "module-nautilus_trader.model.position"]], "Tick Scheme": [[27, "module-nautilus_trader.model.tick_scheme"]], "Message Bus": [[28, "module-nautilus_trader.msgbus"]], "Network": [[29, "module-nautilus_trader.network"]], "Persistence": [[30, "module-nautilus_trader.persistence"]], "Portfolio": [[31, "module-nautilus_trader.portfolio"]], "Risk": [[32, "module-nautilus_trader.risk"]], "Serialization": [[33, "module-nautilus_trader.serialization"]], "System": [[34, "module-nautilus_trader.system"]], "Trading": [[35, "module-nautilus_trader.trading"]], "Instrument Providers": [[36, "instrument-providers"]], "Research/Backtesting": [[36, "research-backtesting"]], "Live Trading": [[36, "live-trading"]], "Data Clients": [[36, "data-clients"]], "Requests": [[36, "requests"]], "Example": [[36, "example"]], "Advanced Orders": [[37, "advanced-orders"]], "Order Lists": [[37, "order-lists"]], "Contingency Types": [[37, "contingency-types"]], "One Triggers the Other (OTO)": [[37, "one-triggers-the-other-oto"]], "One Cancels the Other (OCO)": [[37, "one-cancels-the-other-oco"]], "One Updates the Other (OUO)": [[37, "one-updates-the-other-ouo"]], "Bracket Orders": [[37, "bracket-orders"]], "Custom/Generic Data": [[38, "custom-generic-data"]], "Emulated Orders": [[39, "emulated-orders"]], "Submitting for emulation": [[39, "submitting-for-emulation"]], "Life cycle": [[39, "life-cycle"]], "Held emulated orders": [[39, "held-emulated-orders"]], "Released emulated orders": [[39, "released-emulated-orders"]], "Order types": [[39, "order-types"], [64, "order-types"]], "Querying": [[39, "querying"]], "Persisted emulated orders": [[39, "persisted-emulated-orders"]], "Advanced": [[40, "advanced"]], "Portfolio Statistics": [[41, "portfolio-statistics"]], "Custom Statistics": [[41, "custom-statistics"]], "Backtest Analysis": [[41, "backtest-analysis"]], "Architecture": [[42, "architecture"]], "Design philosophy": [[42, "design-philosophy"]], "Quality attributes": [[42, "quality-attributes"]], "System architecture": [[42, "system-architecture"]], "Environment contexts": [[42, "environment-contexts"]], "Common core": [[42, "common-core"], [44, "common-core"]], "Messaging": [[42, "messaging"]], "Framework organization": [[42, "framework-organization"]], "Core / low-Level": [[42, "core-low-level"]], "System implementations": [[42, "system-implementations"]], "Code structure": [[42, "code-structure"]], "Dependency flow": [[42, "dependency-flow"]], "Type safety": [[42, "type-safety"]], "Errors and exceptions": [[42, "errors-and-exceptions"]], "Execution flow": [[43, "execution-flow"]], "Submitting orders": [[43, "submitting-orders"]], "Execution algorithms": [[43, "execution-algorithms"]], "TWAP (Time-Weighted Average Price)": [[43, "twap-time-weighted-average-price"]], "Writing execution algorithms": [[43, "writing-execution-algorithms"]], "Spawned orders": [[43, "spawned-orders"]], "Managing execution algorithm orders": [[43, "managing-execution-algorithm-orders"]], "Concepts": [[44, "concepts"]], "Distributed": [[44, "distributed"]], "Backtesting": [[44, "backtesting"], [45, "backtesting"]], "Live trading": [[44, "live-trading"], [45, "live-trading"]], "Domain model": [[44, "domain-model"]], "Account Types": [[44, "account-types"]], "Order Types": [[44, "order-types"], [47, "order-types"]], "Symbology": [[45, "symbology"], [64, "symbology"]], "Finding instruments": [[45, "finding-instruments"]], "Precisions and Increments": [[45, "precisions-and-increments"]], "Limits": [[45, "limits"]], "Prices and Quantities": [[45, "prices-and-quantities"]], "Margins and Fees": [[45, "margins-and-fees"]], "Additional Info": [[45, "additional-info"]], "Configuration": [[46, "configuration"], [48, "configuration"], [63, "configuration"], [64, "configuration"], [65, "configuration"]], "Standard output logging": [[46, "standard-output-logging"]], "File logging": [[46, "file-logging"]], "Component filtering": [[46, "component-filtering"]], "Overview": [[47, "overview"], [63, "overview"], [64, "overview"], [65, "overview"]], "Execution Instructions": [[47, "execution-instructions"]], "Time In Force": [[47, "time-in-force"]], "Expire Time": [[47, "expire-time"]], "Post Only": [[47, "post-only"]], "Reduce Only": [[47, "reduce-only"]], "Display Quantity": [[47, "display-quantity"]], "Trigger Type": [[47, "trigger-type"]], "Trigger Offset Type": [[47, "trigger-offset-type"]], "Contingency Orders": [[47, "contingency-orders"]], "Order Factory": [[47, "order-factory"]], "Market": [[47, "market"]], "Limit": [[47, "limit"]], "Stop-Market": [[47, "stop-market"]], "Stop-Limit": [[47, "stop-limit"]], "Market-To-Limit": [[47, "market-to-limit"]], "Market-If-Touched": [[47, "market-if-touched"]], "Limit-If-Touched": [[47, "limit-if-touched"]], "Trailing-Stop-Market": [[47, "trailing-stop-market"]], "Trailing-Stop-Limit": [[47, "trailing-stop-limit"]], "Strategies": [[48, "strategies"]], "Implementation": [[48, "implementation"]], "Multiple strategies": [[48, "multiple-strategies"]], "Managed GTD expiry": [[48, "managed-gtd-expiry"]], "Coding Standards": [[49, "coding-standards"]], "Code Style": [[49, "code-style"]], "Black": [[49, "black"]], "Formatting": [[49, "formatting"]], "PEP-8": [[49, "pep-8"]], "Docstrings": [[49, "docstrings"]], "Flake8": [[49, "flake8"]], "Commit messages": [[49, "commit-messages"]], "Cython": [[50, "cython"]], "Function and method signatures": [[50, "function-and-method-signatures"]], "Debugging": [[50, "debugging"]], "PyCharm": [[50, "pycharm"]], "Cython Docs": [[50, "cython-docs"]], "Tips": [[50, "tips"]], "Environment Setup": [[51, "environment-setup"]], "Setup": [[51, "setup"]], "Builds": [[51, "builds"]], "Developer Guide": [[52, "developer-guide"]], "Packaged Data": [[53, "packaged-data"]], "Libor Rates": [[53, "libor-rates"]], "Short Term Interest Rates": [[53, "short-term-interest-rates"]], "Economic Events": [[53, "economic-events"]], "Rust": [[54, "rust"]], "Python Binding": [[54, "python-binding"]], "Unsafe Rust": [[54, "unsafe-rust"]], "Safety Policy": [[54, "safety-policy"]], "Resources": [[54, "resources"]], "Testing": [[55, "testing"]], "Mocks": [[55, "mocks"]], "Code Coverage": [[55, "code-coverage"]], "Excluded code coverage": [[55, "excluded-code-coverage"]], "Getting Started": [[56, "getting-started"]], "Installation": [[57, "installation"]], "From PyPI": [[57, "from-pypi"]], "Extras": [[57, "extras"]], "From Source": [[57, "from-source"]], "From GitHub Release": [[57, "from-github-release"]], "Quick Start": [[58, "quick-start"]], "Running in docker": [[58, "running-in-docker"]], "Getting the sample data": [[58, "getting-the-sample-data"]], "Connecting to the ParquetDataCatalog": [[58, "connecting-to-the-parquetdatacatalog"]], "Writing a trading strategy": [[58, "writing-a-trading-strategy"]], "Configuring Backtests": [[58, "configuring-backtests"]], "Venue": [[58, "venue"]], "Running a backtest": [[58, "running-a-backtest"]], "Complete Backtest Example": [[59, "complete-backtest-example"]], "Imports": [[59, "imports"]], "Getting some raw data": [[59, "getting-some-raw-data"]], "The Data Catalog": [[59, "the-data-catalog"]], "Loading data into the catalog": [[59, "loading-data-into-the-catalog"]], "Using the Data Catalog": [[59, "using-the-data-catalog"]], "Configuring backtests": [[59, "configuring-backtests"]], "Adding data and venues": [[59, "adding-data-and-venues"]], "Run the backtest!": [[59, "run-the-backtest"]], "Guides": [[60, "guides"]], "Loading External Data": [[61, "loading-external-data"]], "The DataCatalog": [[61, "the-datacatalog"]], "Getting some sample raw data": [[61, "getting-some-sample-raw-data"]], "Loading data via Reader classes": [[61, "loading-data-via-reader-classes"]], "Writing the parser function": [[61, "writing-the-parser-function"]], "Creating a new DataCatalog": [[61, "creating-a-new-datacatalog"]], "Loading the files": [[61, "loading-the-files"]], "Using the ParquetDataCatalog": [[61, "using-the-parquetdatacatalog"]], "NautilusTrader Documentation": [[62, "nautilustrader-documentation"]], "Features": [[62, "features"]], "Why NautilusTrader?": [[62, "why-nautilustrader"]], "Why Python?": [[62, "why-python"]], "What is Cython?": [[62, "what-is-cython"]], "What is Rust?": [[62, "what-is-rust"]], "Architecture Quality Attributes": [[62, "architecture-quality-attributes"]], "API credentials": [[63, "api-credentials"], [64, "api-credentials"], [65, "api-credentials"]], "Data types": [[64, "data-types"]], "Trailing stops": [[64, "trailing-stops"]], "Account Type": [[64, "account-type"]], "Base URL overrides": [[64, "base-url-overrides"]], "Binance US": [[64, "binance-us"]], "Testnets": [[64, "testnets"]], "Aggregated Trades": [[64, "aggregated-trades"]], "Parser warnings": [[64, "parser-warnings"]], "Binance specific data": [[64, "binance-specific-data"]], "BinanceFuturesMarkPriceUpdate": [[64, "binancefuturesmarkpriceupdate"]], "Examples queries": [[65, "examples-queries"]], "Integrations": [[66, "integrations"]], "Implementation goals": [[66, "implementation-goals"]], "API unification": [[66, "api-unification"]]}, "indexentries": {"accountfactory (class in nautilus_trader.accounting.factory)": [[0, "nautilus_trader.accounting.factory.AccountFactory"]], "exchangeratecalculator (class in nautilus_trader.accounting.calculators)": [[0, "nautilus_trader.accounting.calculators.ExchangeRateCalculator"]], "marginaccount (class in nautilus_trader.accounting.accounts.margin)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount"]], "rolloverinterestcalculator (class in nautilus_trader.accounting.calculators)": [[0, "nautilus_trader.accounting.calculators.RolloverInterestCalculator"]], "apply() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.apply"]], "balance() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balance"]], "balance_free() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balance_free"]], "balance_locked() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balance_locked"]], "balance_total() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balance_total"]], "balances() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balances"]], "balances_free() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balances_free"]], "balances_locked() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balances_locked"]], "balances_total() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.balances_total"]], "base_currency (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.base_currency"]], "calc_overnight_rate() (rolloverinterestcalculator method)": [[0, "nautilus_trader.accounting.calculators.RolloverInterestCalculator.calc_overnight_rate"]], "calculate_account_state (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.calculate_account_state"]], "calculate_commission() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.calculate_commission"]], "calculate_margin_init() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.calculate_margin_init"]], "calculate_margin_maint() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.calculate_margin_maint"]], "calculate_pnls() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.calculate_pnls"]], "clear_margin() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.clear_margin"]], "clear_margin_init() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.clear_margin_init"]], "clear_margin_maint() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.clear_margin_maint"]], "commission() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.commission"]], "commissions() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.commissions"]], "create() (accountfactory static method)": [[0, "nautilus_trader.accounting.factory.AccountFactory.create"]], "currencies() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.currencies"]], "default_leverage (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.default_leverage"]], "event_count (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.event_count"]], "events (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.events"]], "get_rate() (exchangeratecalculator method)": [[0, "nautilus_trader.accounting.calculators.ExchangeRateCalculator.get_rate"]], "get_rate_data() (rolloverinterestcalculator method)": [[0, "nautilus_trader.accounting.calculators.RolloverInterestCalculator.get_rate_data"]], "id (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.id"]], "is_cash_account (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.is_cash_account"]], "is_margin_account (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.is_margin_account"]], "is_unleveraged() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.is_unleveraged"]], "last_event (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.last_event"]], "leverage() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.leverage"]], "leverages() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.leverages"]], "margin() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.margin"]], "margin_init() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.margin_init"]], "margin_maint() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.margin_maint"]], "margins() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.margins"]], "margins_init() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.margins_init"]], "margins_maint() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.margins_maint"]], "module": [[0, "module-nautilus_trader.accounting"], [0, "module-nautilus_trader.accounting.accounts.margin"], [0, "module-nautilus_trader.accounting.calculators"], [0, "module-nautilus_trader.accounting.factory"], [1, "module-nautilus_trader.adapters.betfair"], [1, "module-nautilus_trader.adapters.betfair.sockets"], [2, "module-nautilus_trader.adapters.binance"], [2, "module-nautilus_trader.adapters.binance.futures.types"], [3, "module-nautilus_trader.adapters"], [4, "module-nautilus_trader.adapters.interactive_brokers"], [5, "module-nautilus_trader.analysis"], [5, "module-nautilus_trader.analysis.analyzer"], [5, "module-nautilus_trader.analysis.reporter"], [5, "module-nautilus_trader.analysis.statistic"], [5, "module-nautilus_trader.analysis.statistics.expectancy"], [5, "module-nautilus_trader.analysis.statistics.long_ratio"], [5, "module-nautilus_trader.analysis.statistics.loser_avg"], [5, "module-nautilus_trader.analysis.statistics.loser_max"], [5, "module-nautilus_trader.analysis.statistics.loser_min"], [5, "module-nautilus_trader.analysis.statistics.profit_factor"], [5, "module-nautilus_trader.analysis.statistics.returns_avg"], [5, "module-nautilus_trader.analysis.statistics.returns_avg_loss"], [5, "module-nautilus_trader.analysis.statistics.returns_avg_win"], [5, "module-nautilus_trader.analysis.statistics.returns_volatility"], [5, "module-nautilus_trader.analysis.statistics.risk_return_ratio"], [5, "module-nautilus_trader.analysis.statistics.sharpe_ratio"], [5, "module-nautilus_trader.analysis.statistics.sortino_ratio"], [5, "module-nautilus_trader.analysis.statistics.win_rate"], [5, "module-nautilus_trader.analysis.statistics.winner_avg"], [5, "module-nautilus_trader.analysis.statistics.winner_max"], [5, "module-nautilus_trader.analysis.statistics.winner_min"], [6, "module-nautilus_trader.backtest"], [6, "module-nautilus_trader.backtest.auction"], [6, "module-nautilus_trader.backtest.models"], [6, "module-nautilus_trader.backtest.results"], [7, "module-nautilus_trader.cache"], [8, "module-nautilus_trader.common"], [8, "module-nautilus_trader.common.clock"], [8, "module-nautilus_trader.common.component"], [8, "module-nautilus_trader.common.factories"], [8, "module-nautilus_trader.common.generators"], [8, "module-nautilus_trader.common.logging"], [8, "module-nautilus_trader.common.queue"], [8, "module-nautilus_trader.common.throttler"], [8, "module-nautilus_trader.common.timer"], [10, "module-nautilus_trader.core"], [10, "module-nautilus_trader.core.datetime"], [10, "module-nautilus_trader.core.fsm"], [10, "module-nautilus_trader.core.message"], [10, "module-nautilus_trader.core.stats"], [10, "module-nautilus_trader.core.uuid"], [11, "module-nautilus_trader.data"], [11, "module-nautilus_trader.data.messages"], [12, "module-nautilus_trader.execution"], [12, "module-nautilus_trader.execution.matching_core"], [12, "module-nautilus_trader.execution.messages"], [12, "module-nautilus_trader.execution.reports"], [14, "module-nautilus_trader.indicators"], [15, "module-nautilus_trader.infrastructure"], [16, "module-nautilus_trader.live"], [17, "module-nautilus_trader.model.currency"], [18, "module-nautilus_trader.model.data.bar"], [18, "module-nautilus_trader.model.data.base"], [19, "module-nautilus_trader.model.events"], [19, "module-nautilus_trader.model.events.account"], [19, "module-nautilus_trader.model.events.order"], [19, "module-nautilus_trader.model.events.position"], [20, "module-nautilus_trader.model.identifiers"], [21, "module-nautilus_trader.model"], [22, "module-nautilus_trader.model.instruments.base"], [23, "module-nautilus_trader.model.objects"], [25, "module-nautilus_trader.model.orders"], [25, "module-nautilus_trader.model.orders.base"], [25, "module-nautilus_trader.model.orders.limit"], [25, "module-nautilus_trader.model.orders.limit_if_touched"], [25, "module-nautilus_trader.model.orders.list"], [25, "module-nautilus_trader.model.orders.market"], [25, "module-nautilus_trader.model.orders.market_if_touched"], [25, "module-nautilus_trader.model.orders.market_to_limit"], [25, "module-nautilus_trader.model.orders.stop_limit"], [25, "module-nautilus_trader.model.orders.stop_market"], [25, "module-nautilus_trader.model.orders.trailing_stop_limit"], [25, "module-nautilus_trader.model.orders.trailing_stop_market"], [26, "module-nautilus_trader.model.position"], [27, "module-nautilus_trader.model.tick_scheme"], [27, "module-nautilus_trader.model.tick_scheme.base"], [27, "module-nautilus_trader.model.tick_scheme.implementations.fixed"], [27, "module-nautilus_trader.model.tick_scheme.implementations.tiered"], [28, "module-nautilus_trader.msgbus"], [28, "module-nautilus_trader.msgbus.bus"], [28, "module-nautilus_trader.msgbus.subscription"], [29, "module-nautilus_trader.network"], [29, "module-nautilus_trader.network.http"], [29, "module-nautilus_trader.network.socket"], [29, "module-nautilus_trader.network.websocket"], [30, "module-nautilus_trader.persistence"], [31, "module-nautilus_trader.portfolio"], [31, "module-nautilus_trader.portfolio.base"], [32, "module-nautilus_trader.risk"], [32, "module-nautilus_trader.risk.sizing"], [33, "module-nautilus_trader.serialization"], [34, "module-nautilus_trader.system"], [35, "module-nautilus_trader.trading"], [35, "module-nautilus_trader.trading.filters"]], "nautilus_trader.accounting": [[0, "module-nautilus_trader.accounting"]], "nautilus_trader.accounting.accounts.margin": [[0, "module-nautilus_trader.accounting.accounts.margin"]], "nautilus_trader.accounting.calculators": [[0, "module-nautilus_trader.accounting.calculators"]], "nautilus_trader.accounting.factory": [[0, "module-nautilus_trader.accounting.factory"]], "register_account_type() (accountfactory static method)": [[0, "nautilus_trader.accounting.factory.AccountFactory.register_account_type"]], "register_calculated_account() (accountfactory static method)": [[0, "nautilus_trader.accounting.factory.AccountFactory.register_calculated_account"]], "set_default_leverage() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.set_default_leverage"]], "set_leverage() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.set_leverage"]], "starting_balances() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.starting_balances"]], "type (marginaccount attribute)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.type"]], "update_balances() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.update_balances"]], "update_commissions() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.update_commissions"]], "update_margin() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.update_margin"]], "update_margin_init() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.update_margin_init"]], "update_margin_maint() (marginaccount method)": [[0, "nautilus_trader.accounting.accounts.margin.MarginAccount.update_margin_maint"]], "betfairmarketstreamclient (class in nautilus_trader.adapters.betfair.sockets)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient"]], "betfairorderstreamclient (class in nautilus_trader.adapters.betfair.sockets)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient"]], "betfairstreamclient (class in nautilus_trader.adapters.betfair.sockets)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient"]], "connect() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.connect"]], "connect() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.connect"]], "connect() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.connect"]], "disconnect() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.disconnect"]], "disconnect() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.disconnect"]], "disconnect() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.disconnect"]], "host (betfairmarketstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.host"]], "host (betfairorderstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.host"]], "host (betfairstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.host"]], "is_connected (betfairmarketstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.is_connected"]], "is_connected (betfairorderstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.is_connected"]], "is_connected (betfairstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.is_connected"]], "is_running (betfairmarketstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.is_running"]], "is_running (betfairorderstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.is_running"]], "is_running (betfairstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.is_running"]], "is_stopping (betfairmarketstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.is_stopping"]], "is_stopping (betfairorderstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.is_stopping"]], "is_stopping (betfairstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.is_stopping"]], "nautilus_trader.adapters.betfair": [[1, "module-nautilus_trader.adapters.betfair"]], "nautilus_trader.adapters.betfair.sockets": [[1, "module-nautilus_trader.adapters.betfair.sockets"]], "port (betfairmarketstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.port"]], "port (betfairorderstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.port"]], "port (betfairstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.port"]], "post_connection() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.post_connection"]], "post_connection() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.post_connection"]], "post_connection() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.post_connection"]], "post_disconnection() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.post_disconnection"]], "post_disconnection() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.post_disconnection"]], "post_disconnection() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.post_disconnection"]], "post_reconnection() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.post_reconnection"]], "post_reconnection() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.post_reconnection"]], "post_reconnection() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.post_reconnection"]], "reconnect() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.reconnect"]], "reconnect() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.reconnect"]], "reconnect() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.reconnect"]], "send() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.send"]], "send() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.send"]], "send() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.send"]], "ssl (betfairmarketstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.ssl"]], "ssl (betfairorderstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.ssl"]], "ssl (betfairstreamclient attribute)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.ssl"]], "start() (betfairmarketstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairMarketStreamClient.start"]], "start() (betfairorderstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairOrderStreamClient.start"]], "start() (betfairstreamclient method)": [[1, "nautilus_trader.adapters.betfair.sockets.BetfairStreamClient.start"]], "binancefuturesmarkpriceupdate (class in nautilus_trader.adapters.binance.futures.types)": [[2, "nautilus_trader.adapters.binance.futures.types.BinanceFuturesMarkPriceUpdate"]], "from_dict() (binancefuturesmarkpriceupdate static method)": [[2, "nautilus_trader.adapters.binance.futures.types.BinanceFuturesMarkPriceUpdate.from_dict"]], "fully_qualified_name() (binancefuturesmarkpriceupdate class method)": [[2, "nautilus_trader.adapters.binance.futures.types.BinanceFuturesMarkPriceUpdate.fully_qualified_name"]], "nautilus_trader.adapters.binance": [[2, "module-nautilus_trader.adapters.binance"]], "nautilus_trader.adapters.binance.futures.types": [[2, "module-nautilus_trader.adapters.binance.futures.types"]], "to_dict() (binancefuturesmarkpriceupdate static method)": [[2, "nautilus_trader.adapters.binance.futures.types.BinanceFuturesMarkPriceUpdate.to_dict"]], "ts_event (binancefuturesmarkpriceupdate attribute)": [[2, "nautilus_trader.adapters.binance.futures.types.BinanceFuturesMarkPriceUpdate.ts_event"]], "ts_init (binancefuturesmarkpriceupdate attribute)": [[2, "nautilus_trader.adapters.binance.futures.types.BinanceFuturesMarkPriceUpdate.ts_init"]], "nautilus_trader.adapters": [[3, "module-nautilus_trader.adapters"]], "nautilus_trader.adapters.interactive_brokers": [[4, "module-nautilus_trader.adapters.interactive_brokers"]], "avgloser (class in nautilus_trader.analysis.statistics.loser_avg)": [[5, "nautilus_trader.analysis.statistics.loser_avg.AvgLoser"]], "avgwinner (class in nautilus_trader.analysis.statistics.winner_avg)": [[5, "nautilus_trader.analysis.statistics.winner_avg.AvgWinner"]], "expectancy (class in nautilus_trader.analysis.statistics.expectancy)": [[5, "nautilus_trader.analysis.statistics.expectancy.Expectancy"]], "longratio (class in nautilus_trader.analysis.statistics.long_ratio)": [[5, "nautilus_trader.analysis.statistics.long_ratio.LongRatio"]], "maxloser (class in nautilus_trader.analysis.statistics.loser_max)": [[5, "nautilus_trader.analysis.statistics.loser_max.MaxLoser"]], "maxwinner (class in nautilus_trader.analysis.statistics.winner_max)": [[5, "nautilus_trader.analysis.statistics.winner_max.MaxWinner"]], "minloser (class in nautilus_trader.analysis.statistics.loser_min)": [[5, "nautilus_trader.analysis.statistics.loser_min.MinLoser"]], "minwinner (class in nautilus_trader.analysis.statistics.winner_min)": [[5, "nautilus_trader.analysis.statistics.winner_min.MinWinner"]], "portfolioanalyzer (class in nautilus_trader.analysis.analyzer)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer"]], "portfoliostatistic (class in nautilus_trader.analysis.statistic)": [[5, "nautilus_trader.analysis.statistic.PortfolioStatistic"]], "profitfactor (class in nautilus_trader.analysis.statistics.profit_factor)": [[5, "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor"]], "reportprovider (class in nautilus_trader.analysis.reporter)": [[5, "nautilus_trader.analysis.reporter.ReportProvider"]], "returnsaverage (class in nautilus_trader.analysis.statistics.returns_avg)": [[5, "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage"]], "returnsaverageloss (class in nautilus_trader.analysis.statistics.returns_avg_loss)": [[5, "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss"]], "returnsaveragewin (class in nautilus_trader.analysis.statistics.returns_avg_win)": [[5, "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin"]], "returnsvolatility (class in nautilus_trader.analysis.statistics.returns_volatility)": [[5, "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility"]], "riskreturnratio (class in nautilus_trader.analysis.statistics.risk_return_ratio)": [[5, "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio"]], "sharperatio (class in nautilus_trader.analysis.statistics.sharpe_ratio)": [[5, "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio"]], "sortinoratio (class in nautilus_trader.analysis.statistics.sortino_ratio)": [[5, "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio"]], "winrate (class in nautilus_trader.analysis.statistics.win_rate)": [[5, "nautilus_trader.analysis.statistics.win_rate.WinRate"]], "add_positions() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.add_positions"]], "add_return() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.add_return"]], "add_trade() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.add_trade"]], "calculate_from_orders() (avgloser method)": [[5, "nautilus_trader.analysis.statistics.loser_avg.AvgLoser.calculate_from_orders"]], "calculate_from_orders() (avgwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_avg.AvgWinner.calculate_from_orders"]], "calculate_from_orders() (expectancy method)": [[5, "nautilus_trader.analysis.statistics.expectancy.Expectancy.calculate_from_orders"]], "calculate_from_orders() (longratio method)": [[5, "nautilus_trader.analysis.statistics.long_ratio.LongRatio.calculate_from_orders"]], "calculate_from_orders() (maxloser method)": [[5, "nautilus_trader.analysis.statistics.loser_max.MaxLoser.calculate_from_orders"]], "calculate_from_orders() (maxwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_max.MaxWinner.calculate_from_orders"]], "calculate_from_orders() (minloser method)": [[5, "nautilus_trader.analysis.statistics.loser_min.MinLoser.calculate_from_orders"]], "calculate_from_orders() (minwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_min.MinWinner.calculate_from_orders"]], "calculate_from_orders() (portfoliostatistic method)": [[5, "nautilus_trader.analysis.statistic.PortfolioStatistic.calculate_from_orders"]], "calculate_from_orders() (profitfactor method)": [[5, "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor.calculate_from_orders"]], "calculate_from_orders() (returnsaverage method)": [[5, "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage.calculate_from_orders"]], "calculate_from_orders() (returnsaverageloss method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss.calculate_from_orders"]], "calculate_from_orders() (returnsaveragewin method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin.calculate_from_orders"]], "calculate_from_orders() (returnsvolatility method)": [[5, "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility.calculate_from_orders"]], "calculate_from_orders() (riskreturnratio method)": [[5, "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio.calculate_from_orders"]], "calculate_from_orders() (sharperatio method)": [[5, "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio.calculate_from_orders"]], "calculate_from_orders() (sortinoratio method)": [[5, "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio.calculate_from_orders"]], "calculate_from_orders() (winrate method)": [[5, "nautilus_trader.analysis.statistics.win_rate.WinRate.calculate_from_orders"]], "calculate_from_positions() (avgloser method)": [[5, "nautilus_trader.analysis.statistics.loser_avg.AvgLoser.calculate_from_positions"]], "calculate_from_positions() (avgwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_avg.AvgWinner.calculate_from_positions"]], "calculate_from_positions() (expectancy method)": [[5, "nautilus_trader.analysis.statistics.expectancy.Expectancy.calculate_from_positions"]], "calculate_from_positions() (longratio method)": [[5, "nautilus_trader.analysis.statistics.long_ratio.LongRatio.calculate_from_positions"]], "calculate_from_positions() (maxloser method)": [[5, "nautilus_trader.analysis.statistics.loser_max.MaxLoser.calculate_from_positions"]], "calculate_from_positions() (maxwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_max.MaxWinner.calculate_from_positions"]], "calculate_from_positions() (minloser method)": [[5, "nautilus_trader.analysis.statistics.loser_min.MinLoser.calculate_from_positions"]], "calculate_from_positions() (minwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_min.MinWinner.calculate_from_positions"]], "calculate_from_positions() (portfoliostatistic method)": [[5, "nautilus_trader.analysis.statistic.PortfolioStatistic.calculate_from_positions"]], "calculate_from_positions() (profitfactor method)": [[5, "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor.calculate_from_positions"]], "calculate_from_positions() (returnsaverage method)": [[5, "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage.calculate_from_positions"]], "calculate_from_positions() (returnsaverageloss method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss.calculate_from_positions"]], "calculate_from_positions() (returnsaveragewin method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin.calculate_from_positions"]], "calculate_from_positions() (returnsvolatility method)": [[5, "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility.calculate_from_positions"]], "calculate_from_positions() (riskreturnratio method)": [[5, "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio.calculate_from_positions"]], "calculate_from_positions() (sharperatio method)": [[5, "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio.calculate_from_positions"]], "calculate_from_positions() (sortinoratio method)": [[5, "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio.calculate_from_positions"]], "calculate_from_positions() (winrate method)": [[5, "nautilus_trader.analysis.statistics.win_rate.WinRate.calculate_from_positions"]], "calculate_from_realized_pnls() (avgloser method)": [[5, "nautilus_trader.analysis.statistics.loser_avg.AvgLoser.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (avgwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_avg.AvgWinner.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (expectancy method)": [[5, "nautilus_trader.analysis.statistics.expectancy.Expectancy.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (longratio method)": [[5, "nautilus_trader.analysis.statistics.long_ratio.LongRatio.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (maxloser method)": [[5, "nautilus_trader.analysis.statistics.loser_max.MaxLoser.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (maxwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_max.MaxWinner.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (minloser method)": [[5, "nautilus_trader.analysis.statistics.loser_min.MinLoser.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (minwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_min.MinWinner.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (portfoliostatistic method)": [[5, "nautilus_trader.analysis.statistic.PortfolioStatistic.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (profitfactor method)": [[5, "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (returnsaverage method)": [[5, "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (returnsaverageloss method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (returnsaveragewin method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (returnsvolatility method)": [[5, "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (riskreturnratio method)": [[5, "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (sharperatio method)": [[5, "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (sortinoratio method)": [[5, "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio.calculate_from_realized_pnls"]], "calculate_from_realized_pnls() (winrate method)": [[5, "nautilus_trader.analysis.statistics.win_rate.WinRate.calculate_from_realized_pnls"]], "calculate_from_returns() (avgloser method)": [[5, "nautilus_trader.analysis.statistics.loser_avg.AvgLoser.calculate_from_returns"]], "calculate_from_returns() (avgwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_avg.AvgWinner.calculate_from_returns"]], "calculate_from_returns() (expectancy method)": [[5, "nautilus_trader.analysis.statistics.expectancy.Expectancy.calculate_from_returns"]], "calculate_from_returns() (longratio method)": [[5, "nautilus_trader.analysis.statistics.long_ratio.LongRatio.calculate_from_returns"]], "calculate_from_returns() (maxloser method)": [[5, "nautilus_trader.analysis.statistics.loser_max.MaxLoser.calculate_from_returns"]], "calculate_from_returns() (maxwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_max.MaxWinner.calculate_from_returns"]], "calculate_from_returns() (minloser method)": [[5, "nautilus_trader.analysis.statistics.loser_min.MinLoser.calculate_from_returns"]], "calculate_from_returns() (minwinner method)": [[5, "nautilus_trader.analysis.statistics.winner_min.MinWinner.calculate_from_returns"]], "calculate_from_returns() (portfoliostatistic method)": [[5, "nautilus_trader.analysis.statistic.PortfolioStatistic.calculate_from_returns"]], "calculate_from_returns() (profitfactor method)": [[5, "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor.calculate_from_returns"]], "calculate_from_returns() (returnsaverage method)": [[5, "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage.calculate_from_returns"]], "calculate_from_returns() (returnsaverageloss method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss.calculate_from_returns"]], "calculate_from_returns() (returnsaveragewin method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin.calculate_from_returns"]], "calculate_from_returns() (returnsvolatility method)": [[5, "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility.calculate_from_returns"]], "calculate_from_returns() (riskreturnratio method)": [[5, "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio.calculate_from_returns"]], "calculate_from_returns() (sharperatio method)": [[5, "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio.calculate_from_returns"]], "calculate_from_returns() (sortinoratio method)": [[5, "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio.calculate_from_returns"]], "calculate_from_returns() (winrate method)": [[5, "nautilus_trader.analysis.statistics.win_rate.WinRate.calculate_from_returns"]], "calculate_statistics() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.calculate_statistics"]], "currencies (portfolioanalyzer property)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.currencies"]], "deregister_statistic() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.deregister_statistic"]], "deregister_statistics() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.deregister_statistics"]], "fully_qualified_name() (avgloser class method)": [[5, "nautilus_trader.analysis.statistics.loser_avg.AvgLoser.fully_qualified_name"]], "fully_qualified_name() (avgwinner class method)": [[5, "nautilus_trader.analysis.statistics.winner_avg.AvgWinner.fully_qualified_name"]], "fully_qualified_name() (expectancy class method)": [[5, "nautilus_trader.analysis.statistics.expectancy.Expectancy.fully_qualified_name"]], "fully_qualified_name() (longratio class method)": [[5, "nautilus_trader.analysis.statistics.long_ratio.LongRatio.fully_qualified_name"]], "fully_qualified_name() (maxloser class method)": [[5, "nautilus_trader.analysis.statistics.loser_max.MaxLoser.fully_qualified_name"]], "fully_qualified_name() (maxwinner class method)": [[5, "nautilus_trader.analysis.statistics.winner_max.MaxWinner.fully_qualified_name"]], "fully_qualified_name() (minloser class method)": [[5, "nautilus_trader.analysis.statistics.loser_min.MinLoser.fully_qualified_name"]], "fully_qualified_name() (minwinner class method)": [[5, "nautilus_trader.analysis.statistics.winner_min.MinWinner.fully_qualified_name"]], "fully_qualified_name() (portfoliostatistic class method)": [[5, "nautilus_trader.analysis.statistic.PortfolioStatistic.fully_qualified_name"]], "fully_qualified_name() (profitfactor class method)": [[5, "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor.fully_qualified_name"]], "fully_qualified_name() (returnsaverage class method)": [[5, "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage.fully_qualified_name"]], "fully_qualified_name() (returnsaverageloss class method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss.fully_qualified_name"]], "fully_qualified_name() (returnsaveragewin class method)": [[5, "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin.fully_qualified_name"]], "fully_qualified_name() (returnsvolatility class method)": [[5, "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility.fully_qualified_name"]], "fully_qualified_name() (riskreturnratio class method)": [[5, "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio.fully_qualified_name"]], "fully_qualified_name() (sharperatio class method)": [[5, "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio.fully_qualified_name"]], "fully_qualified_name() (sortinoratio class method)": [[5, "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio.fully_qualified_name"]], "fully_qualified_name() (winrate class method)": [[5, "nautilus_trader.analysis.statistics.win_rate.WinRate.fully_qualified_name"]], "generate_account_report() (reportprovider static method)": [[5, "nautilus_trader.analysis.reporter.ReportProvider.generate_account_report"]], "generate_order_fills_report() (reportprovider static method)": [[5, "nautilus_trader.analysis.reporter.ReportProvider.generate_order_fills_report"]], "generate_orders_report() (reportprovider static method)": [[5, "nautilus_trader.analysis.reporter.ReportProvider.generate_orders_report"]], "generate_positions_report() (reportprovider static method)": [[5, "nautilus_trader.analysis.reporter.ReportProvider.generate_positions_report"]], "get_performance_stats_general() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.get_performance_stats_general"]], "get_performance_stats_pnls() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.get_performance_stats_pnls"]], "get_performance_stats_returns() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.get_performance_stats_returns"]], "get_stats_general_formatted() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.get_stats_general_formatted"]], "get_stats_pnls_formatted() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.get_stats_pnls_formatted"]], "get_stats_returns_formatted() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.get_stats_returns_formatted"]], "name (avgloser property)": [[5, "nautilus_trader.analysis.statistics.loser_avg.AvgLoser.name"]], "name (avgwinner property)": [[5, "nautilus_trader.analysis.statistics.winner_avg.AvgWinner.name"]], "name (expectancy property)": [[5, "nautilus_trader.analysis.statistics.expectancy.Expectancy.name"]], "name (longratio property)": [[5, "nautilus_trader.analysis.statistics.long_ratio.LongRatio.name"]], "name (maxloser property)": [[5, "nautilus_trader.analysis.statistics.loser_max.MaxLoser.name"]], "name (maxwinner property)": [[5, "nautilus_trader.analysis.statistics.winner_max.MaxWinner.name"]], "name (minloser property)": [[5, "nautilus_trader.analysis.statistics.loser_min.MinLoser.name"]], "name (minwinner property)": [[5, "nautilus_trader.analysis.statistics.winner_min.MinWinner.name"]], "name (portfoliostatistic property)": [[5, "nautilus_trader.analysis.statistic.PortfolioStatistic.name"]], "name (profitfactor property)": [[5, "nautilus_trader.analysis.statistics.profit_factor.ProfitFactor.name"]], "name (returnsaverage property)": [[5, "nautilus_trader.analysis.statistics.returns_avg.ReturnsAverage.name"]], "name (returnsaverageloss property)": [[5, "nautilus_trader.analysis.statistics.returns_avg_loss.ReturnsAverageLoss.name"]], "name (returnsaveragewin property)": [[5, "nautilus_trader.analysis.statistics.returns_avg_win.ReturnsAverageWin.name"]], "name (returnsvolatility property)": [[5, "nautilus_trader.analysis.statistics.returns_volatility.ReturnsVolatility.name"]], "name (riskreturnratio property)": [[5, "nautilus_trader.analysis.statistics.risk_return_ratio.RiskReturnRatio.name"]], "name (sharperatio property)": [[5, "nautilus_trader.analysis.statistics.sharpe_ratio.SharpeRatio.name"]], "name (sortinoratio property)": [[5, "nautilus_trader.analysis.statistics.sortino_ratio.SortinoRatio.name"]], "name (winrate property)": [[5, "nautilus_trader.analysis.statistics.win_rate.WinRate.name"]], "nautilus_trader.analysis": [[5, "module-nautilus_trader.analysis"]], "nautilus_trader.analysis.analyzer": [[5, "module-nautilus_trader.analysis.analyzer"]], "nautilus_trader.analysis.reporter": [[5, "module-nautilus_trader.analysis.reporter"]], "nautilus_trader.analysis.statistic": [[5, "module-nautilus_trader.analysis.statistic"]], "nautilus_trader.analysis.statistics.expectancy": [[5, "module-nautilus_trader.analysis.statistics.expectancy"]], "nautilus_trader.analysis.statistics.long_ratio": [[5, "module-nautilus_trader.analysis.statistics.long_ratio"]], "nautilus_trader.analysis.statistics.loser_avg": [[5, "module-nautilus_trader.analysis.statistics.loser_avg"]], "nautilus_trader.analysis.statistics.loser_max": [[5, "module-nautilus_trader.analysis.statistics.loser_max"]], "nautilus_trader.analysis.statistics.loser_min": [[5, "module-nautilus_trader.analysis.statistics.loser_min"]], "nautilus_trader.analysis.statistics.profit_factor": [[5, "module-nautilus_trader.analysis.statistics.profit_factor"]], "nautilus_trader.analysis.statistics.returns_avg": [[5, "module-nautilus_trader.analysis.statistics.returns_avg"]], "nautilus_trader.analysis.statistics.returns_avg_loss": [[5, "module-nautilus_trader.analysis.statistics.returns_avg_loss"]], "nautilus_trader.analysis.statistics.returns_avg_win": [[5, "module-nautilus_trader.analysis.statistics.returns_avg_win"]], "nautilus_trader.analysis.statistics.returns_volatility": [[5, "module-nautilus_trader.analysis.statistics.returns_volatility"]], "nautilus_trader.analysis.statistics.risk_return_ratio": [[5, "module-nautilus_trader.analysis.statistics.risk_return_ratio"]], "nautilus_trader.analysis.statistics.sharpe_ratio": [[5, "module-nautilus_trader.analysis.statistics.sharpe_ratio"]], "nautilus_trader.analysis.statistics.sortino_ratio": [[5, "module-nautilus_trader.analysis.statistics.sortino_ratio"]], "nautilus_trader.analysis.statistics.win_rate": [[5, "module-nautilus_trader.analysis.statistics.win_rate"]], "nautilus_trader.analysis.statistics.winner_avg": [[5, "module-nautilus_trader.analysis.statistics.winner_avg"]], "nautilus_trader.analysis.statistics.winner_max": [[5, "module-nautilus_trader.analysis.statistics.winner_max"]], "nautilus_trader.analysis.statistics.winner_min": [[5, "module-nautilus_trader.analysis.statistics.winner_min"]], "realized_pnls() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.realized_pnls"]], "register_statistic() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.register_statistic"]], "reset() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.reset"]], "returns() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.returns"]], "statistic() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.statistic"]], "total_pnl() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.total_pnl"]], "total_pnl_percentage() (portfolioanalyzer method)": [[5, "nautilus_trader.analysis.analyzer.PortfolioAnalyzer.total_pnl_percentage"]], "backtestresult (class in nautilus_trader.backtest.results)": [[6, "nautilus_trader.backtest.results.BacktestResult"]], "fillmodel (class in nautilus_trader.backtest.models)": [[6, "nautilus_trader.backtest.models.FillModel"]], "latencymodel (class in nautilus_trader.backtest.models)": [[6, "nautilus_trader.backtest.models.LatencyModel"]], "base_latency_nanos (latencymodel attribute)": [[6, "nautilus_trader.backtest.models.LatencyModel.base_latency_nanos"]], "cancel_latency_nanos (latencymodel attribute)": [[6, "nautilus_trader.backtest.models.LatencyModel.cancel_latency_nanos"]], "ensure_plotting() (in module nautilus_trader.backtest.results)": [[6, "nautilus_trader.backtest.results.ensure_plotting"]], "insert_latency_nanos (latencymodel attribute)": [[6, "nautilus_trader.backtest.models.LatencyModel.insert_latency_nanos"]], "is_limit_filled() (fillmodel method)": [[6, "nautilus_trader.backtest.models.FillModel.is_limit_filled"]], "is_slipped() (fillmodel method)": [[6, "nautilus_trader.backtest.models.FillModel.is_slipped"]], "is_stop_filled() (fillmodel method)": [[6, "nautilus_trader.backtest.models.FillModel.is_stop_filled"]], "nautilus_trader.backtest": [[6, "module-nautilus_trader.backtest"]], "nautilus_trader.backtest.auction": [[6, "module-nautilus_trader.backtest.auction"]], "nautilus_trader.backtest.models": [[6, "module-nautilus_trader.backtest.models"]], "nautilus_trader.backtest.results": [[6, "module-nautilus_trader.backtest.results"]], "prob_fill_on_limit (fillmodel attribute)": [[6, "nautilus_trader.backtest.models.FillModel.prob_fill_on_limit"]], "prob_fill_on_stop (fillmodel attribute)": [[6, "nautilus_trader.backtest.models.FillModel.prob_fill_on_stop"]], "prob_slippage (fillmodel attribute)": [[6, "nautilus_trader.backtest.models.FillModel.prob_slippage"]], "update_latency_nanos (latencymodel attribute)": [[6, "nautilus_trader.backtest.models.LatencyModel.update_latency_nanos"]], "nautilus_trader.cache": [[7, "module-nautilus_trader.cache"]], "clientorderidgenerator (class in nautilus_trader.common.generators)": [[8, "nautilus_trader.common.generators.ClientOrderIdGenerator"]], "clock (class in nautilus_trader.common.clock)": [[8, "nautilus_trader.common.clock.Clock"]], "component (class in nautilus_trader.common.component)": [[8, "nautilus_trader.common.component.Component"]], "componentfsmfactory (class in nautilus_trader.common.component)": [[8, "nautilus_trader.common.component.ComponentFSMFactory"]], "identifiergenerator (class in nautilus_trader.common.generators)": [[8, "nautilus_trader.common.generators.IdentifierGenerator"]], "liveclock (class in nautilus_trader.common.clock)": [[8, "nautilus_trader.common.clock.LiveClock"]], "livetimer (class in nautilus_trader.common.timer)": [[8, "nautilus_trader.common.timer.LiveTimer"]], "logger (class in nautilus_trader.common.logging)": [[8, "nautilus_trader.common.logging.Logger"]], "loggeradapter (class in nautilus_trader.common.logging)": [[8, "nautilus_trader.common.logging.LoggerAdapter"]], "looptimer (class in nautilus_trader.common.timer)": [[8, "nautilus_trader.common.timer.LoopTimer"]], "orderfactory (class in nautilus_trader.common.factories)": [[8, "nautilus_trader.common.factories.OrderFactory"]], "orderlistidgenerator (class in nautilus_trader.common.generators)": [[8, "nautilus_trader.common.generators.OrderListIdGenerator"]], "positionidgenerator (class in nautilus_trader.common.generators)": [[8, "nautilus_trader.common.generators.PositionIdGenerator"]], "queue (class in nautilus_trader.common.queue)": [[8, "nautilus_trader.common.queue.Queue"]], "testclock (class in nautilus_trader.common.clock)": [[8, "nautilus_trader.common.clock.TestClock"]], "threadtimer (class in nautilus_trader.common.timer)": [[8, "nautilus_trader.common.timer.ThreadTimer"]], "throttler (class in nautilus_trader.common.throttler)": [[8, "nautilus_trader.common.throttler.Throttler"]], "timeevent (class in nautilus_trader.common.timer)": [[8, "nautilus_trader.common.timer.TimeEvent"]], "timeeventhandler (class in nautilus_trader.common.timer)": [[8, "nautilus_trader.common.timer.TimeEventHandler"]], "advance_time() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.advance_time"]], "bracket() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.bracket"]], "callback (livetimer attribute)": [[8, "nautilus_trader.common.timer.LiveTimer.callback"]], "callback (looptimer attribute)": [[8, "nautilus_trader.common.timer.LoopTimer.callback"]], "callback (threadtimer attribute)": [[8, "nautilus_trader.common.timer.ThreadTimer.callback"]], "cancel() (livetimer method)": [[8, "nautilus_trader.common.timer.LiveTimer.cancel"]], "cancel() (looptimer method)": [[8, "nautilus_trader.common.timer.LoopTimer.cancel"]], "cancel() (threadtimer method)": [[8, "nautilus_trader.common.timer.ThreadTimer.cancel"]], "cancel_timer() (clock method)": [[8, "nautilus_trader.common.clock.Clock.cancel_timer"]], "cancel_timer() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.cancel_timer"]], "cancel_timer() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.cancel_timer"]], "cancel_timers() (clock method)": [[8, "nautilus_trader.common.clock.Clock.cancel_timers"]], "cancel_timers() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.cancel_timers"]], "cancel_timers() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.cancel_timers"]], "change_clock() (logger method)": [[8, "nautilus_trader.common.logging.Logger.change_clock"]], "component (loggeradapter attribute)": [[8, "nautilus_trader.common.logging.LoggerAdapter.component"]], "count (clientorderidgenerator attribute)": [[8, "nautilus_trader.common.generators.ClientOrderIdGenerator.count"]], "count (orderlistidgenerator attribute)": [[8, "nautilus_trader.common.generators.OrderListIdGenerator.count"]], "count (queue attribute)": [[8, "nautilus_trader.common.queue.Queue.count"]], "create_list() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.create_list"]], "critical() (loggeradapter method)": [[8, "nautilus_trader.common.logging.LoggerAdapter.critical"]], "debug() (loggeradapter method)": [[8, "nautilus_trader.common.logging.LoggerAdapter.debug"]], "degrade() (component method)": [[8, "nautilus_trader.common.component.Component.degrade"]], "dispose() (component method)": [[8, "nautilus_trader.common.component.Component.dispose"]], "empty() (queue method)": [[8, "nautilus_trader.common.queue.Queue.empty"]], "error() (loggeradapter method)": [[8, "nautilus_trader.common.logging.LoggerAdapter.error"]], "event (timeeventhandler attribute)": [[8, "nautilus_trader.common.timer.TimeEventHandler.event"]], "exception() (loggeradapter method)": [[8, "nautilus_trader.common.logging.LoggerAdapter.exception"]], "fault() (component method)": [[8, "nautilus_trader.common.component.Component.fault"]], "full() (queue method)": [[8, "nautilus_trader.common.queue.Queue.full"]], "fully_qualified_name() (component class method)": [[8, "nautilus_trader.common.component.Component.fully_qualified_name"]], "generate() (clientorderidgenerator method)": [[8, "nautilus_trader.common.generators.ClientOrderIdGenerator.generate"]], "generate() (orderlistidgenerator method)": [[8, "nautilus_trader.common.generators.OrderListIdGenerator.generate"]], "generate() (positionidgenerator method)": [[8, "nautilus_trader.common.generators.PositionIdGenerator.generate"]], "generate_client_order_id() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.generate_client_order_id"]], "generate_order_list_id() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.generate_order_list_id"]], "get() (queue method)": [[8, "nautilus_trader.common.queue.Queue.get"]], "get_count() (positionidgenerator method)": [[8, "nautilus_trader.common.generators.PositionIdGenerator.get_count"]], "get_logger() (loggeradapter method)": [[8, "nautilus_trader.common.logging.LoggerAdapter.get_logger"]], "get_nowait() (queue method)": [[8, "nautilus_trader.common.queue.Queue.get_nowait"]], "get_state_transition_table() (componentfsmfactory static method)": [[8, "nautilus_trader.common.component.ComponentFSMFactory.get_state_transition_table"]], "handle() (timeeventhandler method)": [[8, "nautilus_trader.common.timer.TimeEventHandler.handle"]], "id (component attribute)": [[8, "nautilus_trader.common.component.Component.id"]], "id (timeevent attribute)": [[8, "nautilus_trader.common.timer.TimeEvent.id"]], "info() (loggeradapter method)": [[8, "nautilus_trader.common.logging.LoggerAdapter.info"]], "instance_id (logger attribute)": [[8, "nautilus_trader.common.logging.Logger.instance_id"]], "instance_id (loggeradapter attribute)": [[8, "nautilus_trader.common.logging.LoggerAdapter.instance_id"]], "interval (throttler attribute)": [[8, "nautilus_trader.common.throttler.Throttler.interval"]], "interval_ns (livetimer attribute)": [[8, "nautilus_trader.common.timer.LiveTimer.interval_ns"]], "interval_ns (looptimer attribute)": [[8, "nautilus_trader.common.timer.LoopTimer.interval_ns"]], "interval_ns (threadtimer attribute)": [[8, "nautilus_trader.common.timer.ThreadTimer.interval_ns"]], "is_bypassed (logger attribute)": [[8, "nautilus_trader.common.logging.Logger.is_bypassed"]], "is_bypassed (loggeradapter attribute)": [[8, "nautilus_trader.common.logging.LoggerAdapter.is_bypassed"]], "is_degraded (component attribute)": [[8, "nautilus_trader.common.component.Component.is_degraded"]], "is_disposed (component attribute)": [[8, "nautilus_trader.common.component.Component.is_disposed"]], "is_expired (livetimer attribute)": [[8, "nautilus_trader.common.timer.LiveTimer.is_expired"]], "is_expired (looptimer attribute)": [[8, "nautilus_trader.common.timer.LoopTimer.is_expired"]], "is_expired (threadtimer attribute)": [[8, "nautilus_trader.common.timer.ThreadTimer.is_expired"]], "is_faulted (component attribute)": [[8, "nautilus_trader.common.component.Component.is_faulted"]], "is_initialized (component attribute)": [[8, "nautilus_trader.common.component.Component.is_initialized"]], "is_limiting (throttler attribute)": [[8, "nautilus_trader.common.throttler.Throttler.is_limiting"]], "is_running (component attribute)": [[8, "nautilus_trader.common.component.Component.is_running"]], "is_stopped (component attribute)": [[8, "nautilus_trader.common.component.Component.is_stopped"]], "iterate_next_time() (livetimer method)": [[8, "nautilus_trader.common.timer.LiveTimer.iterate_next_time"]], "iterate_next_time() (looptimer method)": [[8, "nautilus_trader.common.timer.LoopTimer.iterate_next_time"]], "iterate_next_time() (threadtimer method)": [[8, "nautilus_trader.common.timer.ThreadTimer.iterate_next_time"]], "limit (throttler attribute)": [[8, "nautilus_trader.common.throttler.Throttler.limit"]], "limit() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.limit"]], "limit_if_touched() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.limit_if_touched"]], "local_now() (clock method)": [[8, "nautilus_trader.common.clock.Clock.local_now"]], "local_now() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.local_now"]], "local_now() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.local_now"]], "log_memory() (in module nautilus_trader.common.logging)": [[8, "nautilus_trader.common.logging.log_memory"]], "machine_id (logger attribute)": [[8, "nautilus_trader.common.logging.Logger.machine_id"]], "machine_id (loggeradapter attribute)": [[8, "nautilus_trader.common.logging.LoggerAdapter.machine_id"]], "market() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.market"]], "market_if_touched() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.market_if_touched"]], "market_to_limit() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.market_to_limit"]], "maxsize (queue attribute)": [[8, "nautilus_trader.common.queue.Queue.maxsize"]], "name (livetimer attribute)": [[8, "nautilus_trader.common.timer.LiveTimer.name"]], "name (looptimer attribute)": [[8, "nautilus_trader.common.timer.LoopTimer.name"]], "name (threadtimer attribute)": [[8, "nautilus_trader.common.timer.ThreadTimer.name"]], "name (throttler attribute)": [[8, "nautilus_trader.common.throttler.Throttler.name"]], "name (timeevent attribute)": [[8, "nautilus_trader.common.timer.TimeEvent.name"]], "nautilus_header() (in module nautilus_trader.common.logging)": [[8, "nautilus_trader.common.logging.nautilus_header"]], "nautilus_trader.common": [[8, "module-nautilus_trader.common"]], "nautilus_trader.common.clock": [[8, "module-nautilus_trader.common.clock"]], "nautilus_trader.common.component": [[8, "module-nautilus_trader.common.component"]], "nautilus_trader.common.factories": [[8, "module-nautilus_trader.common.factories"]], "nautilus_trader.common.generators": [[8, "module-nautilus_trader.common.generators"]], "nautilus_trader.common.logging": [[8, "module-nautilus_trader.common.logging"]], "nautilus_trader.common.queue": [[8, "module-nautilus_trader.common.queue"]], "nautilus_trader.common.throttler": [[8, "module-nautilus_trader.common.throttler"]], "nautilus_trader.common.timer": [[8, "module-nautilus_trader.common.timer"]], "next_time_ns (livetimer attribute)": [[8, "nautilus_trader.common.timer.LiveTimer.next_time_ns"]], "next_time_ns (looptimer attribute)": [[8, "nautilus_trader.common.timer.LoopTimer.next_time_ns"]], "next_time_ns (threadtimer attribute)": [[8, "nautilus_trader.common.timer.ThreadTimer.next_time_ns"]], "next_time_ns() (clock method)": [[8, "nautilus_trader.common.clock.Clock.next_time_ns"]], "next_time_ns() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.next_time_ns"]], "next_time_ns() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.next_time_ns"]], "peek_back() (queue method)": [[8, "nautilus_trader.common.queue.Queue.peek_back"]], "peek_front() (queue method)": [[8, "nautilus_trader.common.queue.Queue.peek_front"]], "peek_index() (queue method)": [[8, "nautilus_trader.common.queue.Queue.peek_index"]], "pop_event() (livetimer method)": [[8, "nautilus_trader.common.timer.LiveTimer.pop_event"]], "pop_event() (looptimer method)": [[8, "nautilus_trader.common.timer.LoopTimer.pop_event"]], "pop_event() (threadtimer method)": [[8, "nautilus_trader.common.timer.ThreadTimer.pop_event"]], "put() (queue method)": [[8, "nautilus_trader.common.queue.Queue.put"]], "put_nowait() (queue method)": [[8, "nautilus_trader.common.queue.Queue.put_nowait"]], "qsize (throttler attribute)": [[8, "nautilus_trader.common.throttler.Throttler.qsize"]], "qsize() (queue method)": [[8, "nautilus_trader.common.queue.Queue.qsize"]], "recv_count (throttler attribute)": [[8, "nautilus_trader.common.throttler.Throttler.recv_count"]], "register_default_handler() (clock method)": [[8, "nautilus_trader.common.clock.Clock.register_default_handler"]], "register_default_handler() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.register_default_handler"]], "register_default_handler() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.register_default_handler"]], "repeat() (livetimer method)": [[8, "nautilus_trader.common.timer.LiveTimer.repeat"]], "repeat() (looptimer method)": [[8, "nautilus_trader.common.timer.LoopTimer.repeat"]], "repeat() (threadtimer method)": [[8, "nautilus_trader.common.timer.ThreadTimer.repeat"]], "reset() (clientorderidgenerator method)": [[8, "nautilus_trader.common.generators.ClientOrderIdGenerator.reset"]], "reset() (component method)": [[8, "nautilus_trader.common.component.Component.reset"]], "reset() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.reset"]], "reset() (orderlistidgenerator method)": [[8, "nautilus_trader.common.generators.OrderListIdGenerator.reset"]], "reset() (positionidgenerator method)": [[8, "nautilus_trader.common.generators.PositionIdGenerator.reset"]], "resume() (component method)": [[8, "nautilus_trader.common.component.Component.resume"]], "send() (throttler method)": [[8, "nautilus_trader.common.throttler.Throttler.send"]], "sent_count (throttler attribute)": [[8, "nautilus_trader.common.throttler.Throttler.sent_count"]], "set_client_order_id_count() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.set_client_order_id_count"]], "set_count() (clientorderidgenerator method)": [[8, "nautilus_trader.common.generators.ClientOrderIdGenerator.set_count"]], "set_count() (orderlistidgenerator method)": [[8, "nautilus_trader.common.generators.OrderListIdGenerator.set_count"]], "set_count() (positionidgenerator method)": [[8, "nautilus_trader.common.generators.PositionIdGenerator.set_count"]], "set_order_list_id_count() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.set_order_list_id_count"]], "set_time() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.set_time"]], "set_time_alert() (clock method)": [[8, "nautilus_trader.common.clock.Clock.set_time_alert"]], "set_time_alert() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.set_time_alert"]], "set_time_alert() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.set_time_alert"]], "set_time_alert_ns() (clock method)": [[8, "nautilus_trader.common.clock.Clock.set_time_alert_ns"]], "set_time_alert_ns() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.set_time_alert_ns"]], "set_time_alert_ns() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.set_time_alert_ns"]], "set_timer() (clock method)": [[8, "nautilus_trader.common.clock.Clock.set_timer"]], "set_timer() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.set_timer"]], "set_timer() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.set_timer"]], "set_timer_ns() (clock method)": [[8, "nautilus_trader.common.clock.Clock.set_timer_ns"]], "set_timer_ns() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.set_timer_ns"]], "set_timer_ns() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.set_timer_ns"]], "start() (component method)": [[8, "nautilus_trader.common.component.Component.start"]], "start_time_ns (livetimer attribute)": [[8, "nautilus_trader.common.timer.LiveTimer.start_time_ns"]], "start_time_ns (looptimer attribute)": [[8, "nautilus_trader.common.timer.LoopTimer.start_time_ns"]], "start_time_ns (threadtimer attribute)": [[8, "nautilus_trader.common.timer.ThreadTimer.start_time_ns"]], "state (component attribute)": [[8, "nautilus_trader.common.component.Component.state"]], "stop() (component method)": [[8, "nautilus_trader.common.component.Component.stop"]], "stop_limit() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.stop_limit"]], "stop_market() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.stop_market"]], "stop_time_ns (livetimer attribute)": [[8, "nautilus_trader.common.timer.LiveTimer.stop_time_ns"]], "stop_time_ns (looptimer attribute)": [[8, "nautilus_trader.common.timer.LoopTimer.stop_time_ns"]], "stop_time_ns (threadtimer attribute)": [[8, "nautilus_trader.common.timer.ThreadTimer.stop_time_ns"]], "strategy_id (orderfactory attribute)": [[8, "nautilus_trader.common.factories.OrderFactory.strategy_id"]], "timer_count (clock attribute)": [[8, "nautilus_trader.common.clock.Clock.timer_count"]], "timer_count (liveclock attribute)": [[8, "nautilus_trader.common.clock.LiveClock.timer_count"]], "timer_count (testclock attribute)": [[8, "nautilus_trader.common.clock.TestClock.timer_count"]], "timer_names (clock attribute)": [[8, "nautilus_trader.common.clock.Clock.timer_names"]], "timer_names (liveclock attribute)": [[8, "nautilus_trader.common.clock.LiveClock.timer_names"]], "timer_names (testclock attribute)": [[8, "nautilus_trader.common.clock.TestClock.timer_names"]], "timestamp() (clock method)": [[8, "nautilus_trader.common.clock.Clock.timestamp"]], "timestamp() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.timestamp"]], "timestamp() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.timestamp"]], "timestamp_ms() (clock method)": [[8, "nautilus_trader.common.clock.Clock.timestamp_ms"]], "timestamp_ms() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.timestamp_ms"]], "timestamp_ms() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.timestamp_ms"]], "timestamp_ns() (clock method)": [[8, "nautilus_trader.common.clock.Clock.timestamp_ns"]], "timestamp_ns() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.timestamp_ns"]], "timestamp_ns() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.timestamp_ns"]], "to_list() (queue method)": [[8, "nautilus_trader.common.queue.Queue.to_list"]], "trader_id (component attribute)": [[8, "nautilus_trader.common.component.Component.trader_id"]], "trader_id (logger attribute)": [[8, "nautilus_trader.common.logging.Logger.trader_id"]], "trader_id (loggeradapter attribute)": [[8, "nautilus_trader.common.logging.LoggerAdapter.trader_id"]], "trader_id (orderfactory attribute)": [[8, "nautilus_trader.common.factories.OrderFactory.trader_id"]], "trailing_stop_limit() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.trailing_stop_limit"]], "trailing_stop_market() (orderfactory method)": [[8, "nautilus_trader.common.factories.OrderFactory.trailing_stop_market"]], "ts_event (timeevent attribute)": [[8, "nautilus_trader.common.timer.TimeEvent.ts_event"]], "ts_init (timeevent attribute)": [[8, "nautilus_trader.common.timer.TimeEvent.ts_init"]], "type (component attribute)": [[8, "nautilus_trader.common.component.Component.type"]], "used() (throttler method)": [[8, "nautilus_trader.common.throttler.Throttler.used"]], "utc_now() (clock method)": [[8, "nautilus_trader.common.clock.Clock.utc_now"]], "utc_now() (liveclock method)": [[8, "nautilus_trader.common.clock.LiveClock.utc_now"]], "utc_now() (testclock method)": [[8, "nautilus_trader.common.clock.TestClock.utc_now"]], "warning() (loggeradapter method)": [[8, "nautilus_trader.common.logging.LoggerAdapter.warning"]], "command (class in nautilus_trader.core.message)": [[10, "nautilus_trader.core.message.Command"]], "document (class in nautilus_trader.core.message)": [[10, "nautilus_trader.core.message.Document"]], "event (class in nautilus_trader.core.message)": [[10, "nautilus_trader.core.message.Event"]], "finitestatemachine (class in nautilus_trader.core.fsm)": [[10, "nautilus_trader.core.fsm.FiniteStateMachine"]], "invalidstatetrigger": [[10, "nautilus_trader.core.fsm.InvalidStateTrigger"]], "request (class in nautilus_trader.core.message)": [[10, "nautilus_trader.core.message.Request"]], "response (class in nautilus_trader.core.message)": [[10, "nautilus_trader.core.message.Response"]], "uuid4 (class in nautilus_trader.core.uuid)": [[10, "nautilus_trader.core.uuid.UUID4"]], "add_note() (invalidstatetrigger method)": [[10, "nautilus_trader.core.fsm.InvalidStateTrigger.add_note"]], "as_utc_index() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.as_utc_index"]], "as_utc_timestamp() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.as_utc_timestamp"]], "basis_points_as_percentage() (in module nautilus_trader.core.stats)": [[10, "nautilus_trader.core.stats.basis_points_as_percentage"]], "callback (request attribute)": [[10, "nautilus_trader.core.message.Request.callback"]], "correlation_id (response attribute)": [[10, "nautilus_trader.core.message.Response.correlation_id"]], "dt_to_unix_nanos() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.dt_to_unix_nanos"]], "fast_mad() (in module nautilus_trader.core.stats)": [[10, "nautilus_trader.core.stats.fast_mad"]], "fast_mad_with_mean() (in module nautilus_trader.core.stats)": [[10, "nautilus_trader.core.stats.fast_mad_with_mean"]], "fast_mean() (in module nautilus_trader.core.stats)": [[10, "nautilus_trader.core.stats.fast_mean"]], "fast_mean_iterated() (in module nautilus_trader.core.stats)": [[10, "nautilus_trader.core.stats.fast_mean_iterated"]], "fast_std() (in module nautilus_trader.core.stats)": [[10, "nautilus_trader.core.stats.fast_std"]], "fast_std_with_mean() (in module nautilus_trader.core.stats)": [[10, "nautilus_trader.core.stats.fast_std_with_mean"]], "format_iso8601() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.format_iso8601"]], "id (command attribute)": [[10, "nautilus_trader.core.message.Command.id"]], "id (document attribute)": [[10, "nautilus_trader.core.message.Document.id"]], "id (event attribute)": [[10, "nautilus_trader.core.message.Event.id"]], "id (request attribute)": [[10, "nautilus_trader.core.message.Request.id"]], "id (response attribute)": [[10, "nautilus_trader.core.message.Response.id"]], "is_datetime_utc() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.is_datetime_utc"]], "is_tz_aware() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.is_tz_aware"]], "is_tz_naive() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.is_tz_naive"]], "maybe_dt_to_unix_nanos() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.maybe_dt_to_unix_nanos"]], "maybe_unix_nanos_to_dt() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.maybe_unix_nanos_to_dt"]], "micros_to_nanos() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.micros_to_nanos"]], "millis_to_nanos() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.millis_to_nanos"]], "nanos_to_micros() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.nanos_to_micros"]], "nanos_to_millis() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.nanos_to_millis"]], "nanos_to_secs() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.nanos_to_secs"]], "nautilus_trader.core": [[10, "module-nautilus_trader.core"]], "nautilus_trader.core.datetime": [[10, "module-nautilus_trader.core.datetime"]], "nautilus_trader.core.fsm": [[10, "module-nautilus_trader.core.fsm"]], "nautilus_trader.core.message": [[10, "module-nautilus_trader.core.message"]], "nautilus_trader.core.stats": [[10, "module-nautilus_trader.core.stats"]], "nautilus_trader.core.uuid": [[10, "module-nautilus_trader.core.uuid"]], "secs_to_millis() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.secs_to_millis"]], "secs_to_nanos() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.secs_to_nanos"]], "state (finitestatemachine attribute)": [[10, "nautilus_trader.core.fsm.FiniteStateMachine.state"]], "state_string (finitestatemachine attribute)": [[10, "nautilus_trader.core.fsm.FiniteStateMachine.state_string"]], "trigger() (finitestatemachine method)": [[10, "nautilus_trader.core.fsm.FiniteStateMachine.trigger"]], "ts_event (event attribute)": [[10, "nautilus_trader.core.message.Event.ts_event"]], "ts_init (command attribute)": [[10, "nautilus_trader.core.message.Command.ts_init"]], "ts_init (document attribute)": [[10, "nautilus_trader.core.message.Document.ts_init"]], "ts_init (event attribute)": [[10, "nautilus_trader.core.message.Event.ts_init"]], "ts_init (request attribute)": [[10, "nautilus_trader.core.message.Request.ts_init"]], "ts_init (response attribute)": [[10, "nautilus_trader.core.message.Response.ts_init"]], "unix_nanos_to_dt() (in module nautilus_trader.core.datetime)": [[10, "nautilus_trader.core.datetime.unix_nanos_to_dt"]], "value (uuid4 attribute)": [[10, "nautilus_trader.core.uuid.UUID4.value"]], "with_traceback() (invalidstatetrigger method)": [[10, "nautilus_trader.core.fsm.InvalidStateTrigger.with_traceback"]], "datacommand (class in nautilus_trader.data.messages)": [[11, "nautilus_trader.data.messages.DataCommand"]], "datarequest (class in nautilus_trader.data.messages)": [[11, "nautilus_trader.data.messages.DataRequest"]], "dataresponse (class in nautilus_trader.data.messages)": [[11, "nautilus_trader.data.messages.DataResponse"]], "subscribe (class in nautilus_trader.data.messages)": [[11, "nautilus_trader.data.messages.Subscribe"]], "unsubscribe (class in nautilus_trader.data.messages)": [[11, "nautilus_trader.data.messages.Unsubscribe"]], "callback (datarequest attribute)": [[11, "nautilus_trader.data.messages.DataRequest.callback"]], "client_id (datacommand attribute)": [[11, "nautilus_trader.data.messages.DataCommand.client_id"]], "client_id (datarequest attribute)": [[11, "nautilus_trader.data.messages.DataRequest.client_id"]], "client_id (dataresponse attribute)": [[11, "nautilus_trader.data.messages.DataResponse.client_id"]], "client_id (subscribe attribute)": [[11, "nautilus_trader.data.messages.Subscribe.client_id"]], "client_id (unsubscribe attribute)": [[11, "nautilus_trader.data.messages.Unsubscribe.client_id"]], "correlation_id (dataresponse attribute)": [[11, "nautilus_trader.data.messages.DataResponse.correlation_id"]], "data (dataresponse attribute)": [[11, "nautilus_trader.data.messages.DataResponse.data"]], "data_type (datacommand attribute)": [[11, "nautilus_trader.data.messages.DataCommand.data_type"]], "data_type (datarequest attribute)": [[11, "nautilus_trader.data.messages.DataRequest.data_type"]], "data_type (dataresponse attribute)": [[11, "nautilus_trader.data.messages.DataResponse.data_type"]], "data_type (subscribe attribute)": [[11, "nautilus_trader.data.messages.Subscribe.data_type"]], "data_type (unsubscribe attribute)": [[11, "nautilus_trader.data.messages.Unsubscribe.data_type"]], "id (datacommand attribute)": [[11, "nautilus_trader.data.messages.DataCommand.id"]], "id (datarequest attribute)": [[11, "nautilus_trader.data.messages.DataRequest.id"]], "id (dataresponse attribute)": [[11, "nautilus_trader.data.messages.DataResponse.id"]], "id (subscribe attribute)": [[11, "nautilus_trader.data.messages.Subscribe.id"]], "id (unsubscribe attribute)": [[11, "nautilus_trader.data.messages.Unsubscribe.id"]], "nautilus_trader.data": [[11, "module-nautilus_trader.data"]], "nautilus_trader.data.messages": [[11, "module-nautilus_trader.data.messages"]], "ts_init (datacommand attribute)": [[11, "nautilus_trader.data.messages.DataCommand.ts_init"]], "ts_init (datarequest attribute)": [[11, "nautilus_trader.data.messages.DataRequest.ts_init"]], "ts_init (dataresponse attribute)": [[11, "nautilus_trader.data.messages.DataResponse.ts_init"]], "ts_init (subscribe attribute)": [[11, "nautilus_trader.data.messages.Subscribe.ts_init"]], "ts_init (unsubscribe attribute)": [[11, "nautilus_trader.data.messages.Unsubscribe.ts_init"]], "venue (datacommand attribute)": [[11, "nautilus_trader.data.messages.DataCommand.venue"]], "venue (datarequest attribute)": [[11, "nautilus_trader.data.messages.DataRequest.venue"]], "venue (dataresponse attribute)": [[11, "nautilus_trader.data.messages.DataResponse.venue"]], "venue (subscribe attribute)": [[11, "nautilus_trader.data.messages.Subscribe.venue"]], "venue (unsubscribe attribute)": [[11, "nautilus_trader.data.messages.Unsubscribe.venue"]], "cancelallorders (class in nautilus_trader.execution.messages)": [[12, "nautilus_trader.execution.messages.CancelAllOrders"]], "cancelorder (class in nautilus_trader.execution.messages)": [[12, "nautilus_trader.execution.messages.CancelOrder"]], "executionmassstatus (class in nautilus_trader.execution.reports)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus"]], "executionreport (class in nautilus_trader.execution.reports)": [[12, "nautilus_trader.execution.reports.ExecutionReport"]], "matchingcore (class in nautilus_trader.execution.matching_core)": [[12, "nautilus_trader.execution.matching_core.MatchingCore"]], "modifyorder (class in nautilus_trader.execution.messages)": [[12, "nautilus_trader.execution.messages.ModifyOrder"]], "orderstatusreport (class in nautilus_trader.execution.reports)": [[12, "nautilus_trader.execution.reports.OrderStatusReport"]], "positionstatusreport (class in nautilus_trader.execution.reports)": [[12, "nautilus_trader.execution.reports.PositionStatusReport"]], "queryorder (class in nautilus_trader.execution.messages)": [[12, "nautilus_trader.execution.messages.QueryOrder"]], "submitorder (class in nautilus_trader.execution.messages)": [[12, "nautilus_trader.execution.messages.SubmitOrder"]], "submitorderlist (class in nautilus_trader.execution.messages)": [[12, "nautilus_trader.execution.messages.SubmitOrderList"]], "tradereport (class in nautilus_trader.execution.reports)": [[12, "nautilus_trader.execution.reports.TradeReport"]], "tradingcommand (class in nautilus_trader.execution.messages)": [[12, "nautilus_trader.execution.messages.TradingCommand"]], "account_id (executionmassstatus attribute)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.account_id"]], "account_id (executionreport attribute)": [[12, "nautilus_trader.execution.reports.ExecutionReport.account_id"]], "account_id (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.account_id"]], "account_id (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.account_id"]], "account_id (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.account_id"]], "add_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.add_order"]], "add_order_reports() (executionmassstatus method)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.add_order_reports"]], "add_position_reports() (executionmassstatus method)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.add_position_reports"]], "add_trade_reports() (executionmassstatus method)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.add_trade_reports"]], "ask (matchingcore attribute)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.ask"]], "avg_px (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.avg_px"]], "bid (matchingcore attribute)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.bid"]], "cancel_reason (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.cancel_reason"]], "client_id (cancelallorders attribute)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.client_id"]], "client_id (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.client_id"]], "client_id (executionmassstatus attribute)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.client_id"]], "client_id (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.client_id"]], "client_id (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.client_id"]], "client_id (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.client_id"]], "client_id (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.client_id"]], "client_id (tradingcommand attribute)": [[12, "nautilus_trader.execution.messages.TradingCommand.client_id"]], "client_order_id (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.client_order_id"]], "client_order_id (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.client_order_id"]], "client_order_id (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.client_order_id"]], "client_order_id (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.client_order_id"]], "client_order_id (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.client_order_id"]], "commission (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.commission"]], "contingency_type (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.contingency_type"]], "delete_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.delete_order"]], "display_qty (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.display_qty"]], "exec_algorithm_id (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.exec_algorithm_id"]], "exec_algorithm_id (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.exec_algorithm_id"]], "expire_time (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.expire_time"]], "filled_qty (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.filled_qty"]], "from_dict() (cancelallorders static method)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.from_dict"]], "from_dict() (cancelorder static method)": [[12, "nautilus_trader.execution.messages.CancelOrder.from_dict"]], "from_dict() (modifyorder static method)": [[12, "nautilus_trader.execution.messages.ModifyOrder.from_dict"]], "from_dict() (queryorder static method)": [[12, "nautilus_trader.execution.messages.QueryOrder.from_dict"]], "from_dict() (submitorder static method)": [[12, "nautilus_trader.execution.messages.SubmitOrder.from_dict"]], "from_dict() (submitorderlist static method)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.from_dict"]], "get_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.get_order"]], "get_orders() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.get_orders"]], "get_orders_ask() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.get_orders_ask"]], "get_orders_bid() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.get_orders_bid"]], "has_emulated_order (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.has_emulated_order"]], "id (cancelallorders attribute)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.id"]], "id (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.id"]], "id (executionmassstatus attribute)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.id"]], "id (executionreport attribute)": [[12, "nautilus_trader.execution.reports.ExecutionReport.id"]], "id (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.id"]], "id (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.id"]], "id (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.id"]], "id (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.id"]], "id (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.id"]], "id (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.id"]], "id (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.id"]], "id (tradingcommand attribute)": [[12, "nautilus_trader.execution.messages.TradingCommand.id"]], "instrument_id (cancelallorders attribute)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.instrument_id"]], "instrument_id (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.instrument_id"]], "instrument_id (executionreport attribute)": [[12, "nautilus_trader.execution.reports.ExecutionReport.instrument_id"]], "instrument_id (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.instrument_id"]], "instrument_id (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.instrument_id"]], "instrument_id (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.instrument_id"]], "instrument_id (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.instrument_id"]], "instrument_id (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.instrument_id"]], "instrument_id (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.instrument_id"]], "instrument_id (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.instrument_id"]], "instrument_id (tradingcommand attribute)": [[12, "nautilus_trader.execution.messages.TradingCommand.instrument_id"]], "is_limit_matched() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.is_limit_matched"]], "is_stop_triggered() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.is_stop_triggered"]], "is_touch_triggered() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.is_touch_triggered"]], "iterate() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.iterate"]], "last (matchingcore attribute)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.last"]], "last_px (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.last_px"]], "last_qty (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.last_qty"]], "leaves_qty (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.leaves_qty"]], "limit_offset (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.limit_offset"]], "liquidity_side (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.liquidity_side"]], "match_limit_if_touched_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.match_limit_if_touched_order"]], "match_limit_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.match_limit_order"]], "match_market_if_touched_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.match_market_if_touched_order"]], "match_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.match_order"]], "match_stop_limit_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.match_stop_limit_order"]], "match_stop_market_order() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.match_stop_market_order"]], "nautilus_trader.execution": [[12, "module-nautilus_trader.execution"]], "nautilus_trader.execution.matching_core": [[12, "module-nautilus_trader.execution.matching_core"]], "nautilus_trader.execution.messages": [[12, "module-nautilus_trader.execution.messages"]], "nautilus_trader.execution.reports": [[12, "module-nautilus_trader.execution.reports"]], "order (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.order"]], "order_exists() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.order_exists"]], "order_list (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.order_list"]], "order_list_id (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.order_list_id"]], "order_reports() (executionmassstatus method)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.order_reports"]], "order_side (cancelallorders attribute)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.order_side"]], "order_side (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.order_side"]], "order_side (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.order_side"]], "order_status (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.order_status"]], "order_type (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.order_type"]], "position_id (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.position_id"]], "position_id (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.position_id"]], "position_reports() (executionmassstatus method)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.position_reports"]], "position_side (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.position_side"]], "post_only (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.post_only"]], "price (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.price"]], "price (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.price"]], "quantity (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.quantity"]], "quantity (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.quantity"]], "quantity (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.quantity"]], "reduce_only (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.reduce_only"]], "reset() (matchingcore method)": [[12, "nautilus_trader.execution.matching_core.MatchingCore.reset"]], "signed_decimal_qty (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.signed_decimal_qty"]], "strategy_id (cancelallorders attribute)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.strategy_id"]], "strategy_id (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.strategy_id"]], "strategy_id (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.strategy_id"]], "strategy_id (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.strategy_id"]], "strategy_id (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.strategy_id"]], "strategy_id (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.strategy_id"]], "strategy_id (tradingcommand attribute)": [[12, "nautilus_trader.execution.messages.TradingCommand.strategy_id"]], "time_in_force (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.time_in_force"]], "to_dict() (cancelallorders static method)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.to_dict"]], "to_dict() (cancelorder static method)": [[12, "nautilus_trader.execution.messages.CancelOrder.to_dict"]], "to_dict() (modifyorder static method)": [[12, "nautilus_trader.execution.messages.ModifyOrder.to_dict"]], "to_dict() (queryorder static method)": [[12, "nautilus_trader.execution.messages.QueryOrder.to_dict"]], "to_dict() (submitorder static method)": [[12, "nautilus_trader.execution.messages.SubmitOrder.to_dict"]], "to_dict() (submitorderlist static method)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.to_dict"]], "trade_id (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.trade_id"]], "trade_reports() (executionmassstatus method)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.trade_reports"]], "trader_id (cancelallorders attribute)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.trader_id"]], "trader_id (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.trader_id"]], "trader_id (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.trader_id"]], "trader_id (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.trader_id"]], "trader_id (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.trader_id"]], "trader_id (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.trader_id"]], "trader_id (tradingcommand attribute)": [[12, "nautilus_trader.execution.messages.TradingCommand.trader_id"]], "trailing_offset (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.trailing_offset"]], "trailing_offset_type (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.trailing_offset_type"]], "trigger_price (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.trigger_price"]], "trigger_price (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.trigger_price"]], "trigger_type (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.trigger_type"]], "ts_accepted (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.ts_accepted"]], "ts_event (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.ts_event"]], "ts_init (cancelallorders attribute)": [[12, "nautilus_trader.execution.messages.CancelAllOrders.ts_init"]], "ts_init (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.ts_init"]], "ts_init (executionmassstatus attribute)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.ts_init"]], "ts_init (executionreport attribute)": [[12, "nautilus_trader.execution.reports.ExecutionReport.ts_init"]], "ts_init (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.ts_init"]], "ts_init (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.ts_init"]], "ts_init (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.ts_init"]], "ts_init (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.ts_init"]], "ts_init (submitorder attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrder.ts_init"]], "ts_init (submitorderlist attribute)": [[12, "nautilus_trader.execution.messages.SubmitOrderList.ts_init"]], "ts_init (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.ts_init"]], "ts_init (tradingcommand attribute)": [[12, "nautilus_trader.execution.messages.TradingCommand.ts_init"]], "ts_last (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.ts_last"]], "ts_last (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.ts_last"]], "ts_triggered (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.ts_triggered"]], "venue (executionmassstatus attribute)": [[12, "nautilus_trader.execution.reports.ExecutionMassStatus.venue"]], "venue_order_id (cancelorder attribute)": [[12, "nautilus_trader.execution.messages.CancelOrder.venue_order_id"]], "venue_order_id (modifyorder attribute)": [[12, "nautilus_trader.execution.messages.ModifyOrder.venue_order_id"]], "venue_order_id (orderstatusreport attribute)": [[12, "nautilus_trader.execution.reports.OrderStatusReport.venue_order_id"]], "venue_order_id (queryorder attribute)": [[12, "nautilus_trader.execution.messages.QueryOrder.venue_order_id"]], "venue_order_id (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.venue_order_id"]], "venue_position_id (positionstatusreport attribute)": [[12, "nautilus_trader.execution.reports.PositionStatusReport.venue_position_id"]], "venue_position_id (tradereport attribute)": [[12, "nautilus_trader.execution.reports.TradeReport.venue_position_id"]], "nautilus_trader.indicators": [[14, "module-nautilus_trader.indicators"]], "nautilus_trader.infrastructure": [[15, "module-nautilus_trader.infrastructure"]], "nautilus_trader.live": [[16, "module-nautilus_trader.live"]], "currency (class in nautilus_trader.model.currency)": [[17, "nautilus_trader.model.currency.Currency"]], "code (currency attribute)": [[17, "nautilus_trader.model.currency.Currency.code"]], "currency_type (currency attribute)": [[17, "nautilus_trader.model.currency.Currency.currency_type"]], "from_str() (currency static method)": [[17, "nautilus_trader.model.currency.Currency.from_str"]], "is_crypto() (currency static method)": [[17, "nautilus_trader.model.currency.Currency.is_crypto"]], "is_fiat() (currency static method)": [[17, "nautilus_trader.model.currency.Currency.is_fiat"]], "iso4217 (currency attribute)": [[17, "nautilus_trader.model.currency.Currency.iso4217"]], "name (currency attribute)": [[17, "nautilus_trader.model.currency.Currency.name"]], "nautilus_trader.model.currency": [[17, "module-nautilus_trader.model.currency"]], "precision (currency attribute)": [[17, "nautilus_trader.model.currency.Currency.precision"]], "register() (currency static method)": [[17, "nautilus_trader.model.currency.Currency.register"]], "bar (class in nautilus_trader.model.data.bar)": [[18, "nautilus_trader.model.data.bar.Bar"]], "barspecification (class in nautilus_trader.model.data.bar)": [[18, "nautilus_trader.model.data.bar.BarSpecification"]], "bartype (class in nautilus_trader.model.data.bar)": [[18, "nautilus_trader.model.data.bar.BarType"]], "datatype (class in nautilus_trader.model.data.base)": [[18, "nautilus_trader.model.data.base.DataType"]], "genericdata (class in nautilus_trader.model.data.base)": [[18, "nautilus_trader.model.data.base.GenericData"]], "aggregation (barspecification attribute)": [[18, "nautilus_trader.model.data.bar.BarSpecification.aggregation"]], "aggregation_source (bartype attribute)": [[18, "nautilus_trader.model.data.bar.BarType.aggregation_source"]], "bar_type (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.bar_type"]], "check_information_aggregated() (barspecification static method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.check_information_aggregated"]], "check_threshold_aggregated() (barspecification static method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.check_threshold_aggregated"]], "check_time_aggregated() (barspecification static method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.check_time_aggregated"]], "close (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.close"]], "data (genericdata attribute)": [[18, "nautilus_trader.model.data.base.GenericData.data"]], "data_type (genericdata attribute)": [[18, "nautilus_trader.model.data.base.GenericData.data_type"]], "from_dict() (bar static method)": [[18, "nautilus_trader.model.data.bar.Bar.from_dict"]], "from_str() (barspecification static method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.from_str"]], "from_str() (bartype static method)": [[18, "nautilus_trader.model.data.bar.BarType.from_str"]], "from_timedelta() (barspecification static method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.from_timedelta"]], "fully_qualified_name() (bar class method)": [[18, "nautilus_trader.model.data.bar.Bar.fully_qualified_name"]], "fully_qualified_name() (genericdata class method)": [[18, "nautilus_trader.model.data.base.GenericData.fully_qualified_name"]], "high (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.high"]], "instrument_id (bartype attribute)": [[18, "nautilus_trader.model.data.bar.BarType.instrument_id"]], "is_externally_aggregated() (bartype method)": [[18, "nautilus_trader.model.data.bar.BarType.is_externally_aggregated"]], "is_information_aggregated() (barspecification method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.is_information_aggregated"]], "is_internally_aggregated() (bartype method)": [[18, "nautilus_trader.model.data.bar.BarType.is_internally_aggregated"]], "is_revision (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.is_revision"]], "is_single_price() (bar method)": [[18, "nautilus_trader.model.data.bar.Bar.is_single_price"]], "is_threshold_aggregated() (barspecification method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.is_threshold_aggregated"]], "is_time_aggregated() (barspecification method)": [[18, "nautilus_trader.model.data.bar.BarSpecification.is_time_aggregated"]], "low (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.low"]], "metadata (datatype attribute)": [[18, "nautilus_trader.model.data.base.DataType.metadata"]], "nautilus_trader.model.data.bar": [[18, "module-nautilus_trader.model.data.bar"]], "nautilus_trader.model.data.base": [[18, "module-nautilus_trader.model.data.base"]], "open (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.open"]], "price_type (barspecification attribute)": [[18, "nautilus_trader.model.data.bar.BarSpecification.price_type"]], "spec (bartype attribute)": [[18, "nautilus_trader.model.data.bar.BarType.spec"]], "step (barspecification attribute)": [[18, "nautilus_trader.model.data.bar.BarSpecification.step"]], "timedelta (barspecification attribute)": [[18, "nautilus_trader.model.data.bar.BarSpecification.timedelta"]], "to_dict() (bar static method)": [[18, "nautilus_trader.model.data.bar.Bar.to_dict"]], "topic (datatype attribute)": [[18, "nautilus_trader.model.data.base.DataType.topic"]], "ts_event (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.ts_event"]], "ts_event (genericdata attribute)": [[18, "nautilus_trader.model.data.base.GenericData.ts_event"]], "ts_init (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.ts_init"]], "ts_init (genericdata attribute)": [[18, "nautilus_trader.model.data.base.GenericData.ts_init"]], "type (datatype attribute)": [[18, "nautilus_trader.model.data.base.DataType.type"]], "volume (bar attribute)": [[18, "nautilus_trader.model.data.bar.Bar.volume"]], "accountstate (class in nautilus_trader.model.events.account)": [[19, "nautilus_trader.model.events.account.AccountState"]], "orderaccepted (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderAccepted"]], "ordercancelrejected (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected"]], "ordercanceled (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderCanceled"]], "orderdenied (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderDenied"]], "orderevent (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderEvent"]], "orderexpired (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderExpired"]], "orderfilled (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderFilled"]], "orderinitialized (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderInitialized"]], "ordermodifyrejected (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected"]], "orderpendingcancel (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel"]], "orderpendingupdate (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate"]], "orderrejected (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderRejected"]], "ordersubmitted (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderSubmitted"]], "ordertriggered (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderTriggered"]], "orderupdated (class in nautilus_trader.model.events.order)": [[19, "nautilus_trader.model.events.order.OrderUpdated"]], "positionchanged (class in nautilus_trader.model.events.position)": [[19, "nautilus_trader.model.events.position.PositionChanged"]], "positionclosed (class in nautilus_trader.model.events.position)": [[19, "nautilus_trader.model.events.position.PositionClosed"]], "positionevent (class in nautilus_trader.model.events.position)": [[19, "nautilus_trader.model.events.position.PositionEvent"]], "positionopened (class in nautilus_trader.model.events.position)": [[19, "nautilus_trader.model.events.position.PositionOpened"]], "account_id (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.account_id"]], "account_id (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.account_id"]], "account_id (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.account_id"]], "account_id (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.account_id"]], "account_id (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.account_id"]], "account_id (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.account_id"]], "account_id (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.account_id"]], "account_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.account_id"]], "account_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.account_id"]], "account_id (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.account_id"]], "account_id (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.account_id"]], "account_id (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.account_id"]], "account_id (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.account_id"]], "account_id (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.account_id"]], "account_id (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.account_id"]], "account_id (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.account_id"]], "account_id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.account_id"]], "account_id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.account_id"]], "account_id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.account_id"]], "account_id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.account_id"]], "account_type (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.account_type"]], "avg_px_close (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.avg_px_close"]], "avg_px_close (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.avg_px_close"]], "avg_px_close (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.avg_px_close"]], "avg_px_close (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.avg_px_close"]], "avg_px_open (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.avg_px_open"]], "avg_px_open (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.avg_px_open"]], "avg_px_open (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.avg_px_open"]], "avg_px_open (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.avg_px_open"]], "balances (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.balances"]], "base_currency (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.base_currency"]], "client_order_id (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.client_order_id"]], "client_order_id (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.client_order_id"]], "client_order_id (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.client_order_id"]], "client_order_id (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.client_order_id"]], "client_order_id (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.client_order_id"]], "client_order_id (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.client_order_id"]], "client_order_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.client_order_id"]], "client_order_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.client_order_id"]], "client_order_id (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.client_order_id"]], "client_order_id (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.client_order_id"]], "client_order_id (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.client_order_id"]], "client_order_id (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.client_order_id"]], "client_order_id (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.client_order_id"]], "client_order_id (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.client_order_id"]], "client_order_id (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.client_order_id"]], "closing_order_id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.closing_order_id"]], "closing_order_id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.closing_order_id"]], "closing_order_id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.closing_order_id"]], "closing_order_id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.closing_order_id"]], "commission (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.commission"]], "contingency_type (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.contingency_type"]], "create() (positionchanged static method)": [[19, "nautilus_trader.model.events.position.PositionChanged.create"]], "create() (positionclosed static method)": [[19, "nautilus_trader.model.events.position.PositionClosed.create"]], "create() (positionopened static method)": [[19, "nautilus_trader.model.events.position.PositionOpened.create"]], "currency (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.currency"]], "currency (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.currency"]], "currency (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.currency"]], "currency (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.currency"]], "currency (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.currency"]], "duration_ns (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.duration_ns"]], "duration_ns (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.duration_ns"]], "duration_ns (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.duration_ns"]], "duration_ns (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.duration_ns"]], "emulation_trigger (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.emulation_trigger"]], "entry (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.entry"]], "entry (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.entry"]], "entry (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.entry"]], "entry (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.entry"]], "exec_algorithm_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.exec_algorithm_id"]], "exec_algorithm_params (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.exec_algorithm_params"]], "exec_spawn_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.exec_spawn_id"]], "from_dict() (accountstate static method)": [[19, "nautilus_trader.model.events.account.AccountState.from_dict"]], "from_dict() (orderaccepted static method)": [[19, "nautilus_trader.model.events.order.OrderAccepted.from_dict"]], "from_dict() (ordercancelrejected static method)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.from_dict"]], "from_dict() (ordercanceled static method)": [[19, "nautilus_trader.model.events.order.OrderCanceled.from_dict"]], "from_dict() (orderdenied static method)": [[19, "nautilus_trader.model.events.order.OrderDenied.from_dict"]], "from_dict() (orderexpired static method)": [[19, "nautilus_trader.model.events.order.OrderExpired.from_dict"]], "from_dict() (orderfilled static method)": [[19, "nautilus_trader.model.events.order.OrderFilled.from_dict"]], "from_dict() (orderinitialized static method)": [[19, "nautilus_trader.model.events.order.OrderInitialized.from_dict"]], "from_dict() (ordermodifyrejected static method)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.from_dict"]], "from_dict() (orderpendingcancel static method)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.from_dict"]], "from_dict() (orderpendingupdate static method)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.from_dict"]], "from_dict() (orderrejected static method)": [[19, "nautilus_trader.model.events.order.OrderRejected.from_dict"]], "from_dict() (ordersubmitted static method)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.from_dict"]], "from_dict() (ordertriggered static method)": [[19, "nautilus_trader.model.events.order.OrderTriggered.from_dict"]], "from_dict() (orderupdated static method)": [[19, "nautilus_trader.model.events.order.OrderUpdated.from_dict"]], "from_dict() (positionchanged static method)": [[19, "nautilus_trader.model.events.position.PositionChanged.from_dict"]], "from_dict() (positionclosed static method)": [[19, "nautilus_trader.model.events.position.PositionClosed.from_dict"]], "from_dict() (positionopened static method)": [[19, "nautilus_trader.model.events.position.PositionOpened.from_dict"]], "id (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.id"]], "id (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.id"]], "id (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.id"]], "id (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.id"]], "id (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.id"]], "id (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.id"]], "id (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.id"]], "id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.id"]], "id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.id"]], "id (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.id"]], "id (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.id"]], "id (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.id"]], "id (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.id"]], "id (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.id"]], "id (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.id"]], "id (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.id"]], "id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.id"]], "id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.id"]], "id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.id"]], "id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.id"]], "info (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.info"]], "info (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.info"]], "instrument_id (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.instrument_id"]], "instrument_id (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.instrument_id"]], "instrument_id (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.instrument_id"]], "instrument_id (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.instrument_id"]], "instrument_id (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.instrument_id"]], "instrument_id (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.instrument_id"]], "instrument_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.instrument_id"]], "instrument_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.instrument_id"]], "instrument_id (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.instrument_id"]], "instrument_id (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.instrument_id"]], "instrument_id (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.instrument_id"]], "instrument_id (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.instrument_id"]], "instrument_id (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.instrument_id"]], "instrument_id (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.instrument_id"]], "instrument_id (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.instrument_id"]], "instrument_id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.instrument_id"]], "instrument_id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.instrument_id"]], "instrument_id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.instrument_id"]], "instrument_id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.instrument_id"]], "is_buy (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.is_buy"]], "is_reported (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.is_reported"]], "is_sell (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.is_sell"]], "last_px (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.last_px"]], "last_px (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.last_px"]], "last_px (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.last_px"]], "last_px (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.last_px"]], "last_px (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.last_px"]], "last_qty (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.last_qty"]], "last_qty (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.last_qty"]], "last_qty (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.last_qty"]], "last_qty (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.last_qty"]], "last_qty (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.last_qty"]], "linked_order_ids (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.linked_order_ids"]], "liquidity_side (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.liquidity_side"]], "margins (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.margins"]], "nautilus_trader.model.events": [[19, "module-nautilus_trader.model.events"]], "nautilus_trader.model.events.account": [[19, "module-nautilus_trader.model.events.account"]], "nautilus_trader.model.events.order": [[19, "module-nautilus_trader.model.events.order"]], "nautilus_trader.model.events.position": [[19, "module-nautilus_trader.model.events.position"]], "opening_order_id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.opening_order_id"]], "opening_order_id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.opening_order_id"]], "opening_order_id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.opening_order_id"]], "opening_order_id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.opening_order_id"]], "options (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.options"]], "order_list_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.order_list_id"]], "order_side (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.order_side"]], "order_type (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.order_type"]], "order_type (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.order_type"]], "parent_order_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.parent_order_id"]], "peak_qty (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.peak_qty"]], "peak_qty (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.peak_qty"]], "peak_qty (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.peak_qty"]], "peak_qty (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.peak_qty"]], "position_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.position_id"]], "position_id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.position_id"]], "position_id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.position_id"]], "position_id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.position_id"]], "position_id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.position_id"]], "post_only (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.post_only"]], "price (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.price"]], "quantity (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.quantity"]], "quantity (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.quantity"]], "quantity (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.quantity"]], "quantity (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.quantity"]], "quantity (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.quantity"]], "quantity (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.quantity"]], "realized_pnl (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.realized_pnl"]], "realized_pnl (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.realized_pnl"]], "realized_pnl (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.realized_pnl"]], "realized_pnl (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.realized_pnl"]], "realized_return (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.realized_return"]], "realized_return (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.realized_return"]], "realized_return (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.realized_return"]], "realized_return (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.realized_return"]], "reason (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.reason"]], "reason (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.reason"]], "reason (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.reason"]], "reason (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.reason"]], "reconciliation (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.reconciliation"]], "reconciliation (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.reconciliation"]], "reconciliation (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.reconciliation"]], "reconciliation (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.reconciliation"]], "reconciliation (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.reconciliation"]], "reconciliation (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.reconciliation"]], "reconciliation (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.reconciliation"]], "reconciliation (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.reconciliation"]], "reconciliation (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.reconciliation"]], "reconciliation (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.reconciliation"]], "reconciliation (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.reconciliation"]], "reconciliation (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.reconciliation"]], "reconciliation (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.reconciliation"]], "reconciliation (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.reconciliation"]], "reconciliation (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.reconciliation"]], "reduce_only (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.reduce_only"]], "side (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.side"]], "side (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.side"]], "side (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.side"]], "side (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.side"]], "side (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.side"]], "signed_qty (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.signed_qty"]], "signed_qty (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.signed_qty"]], "signed_qty (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.signed_qty"]], "signed_qty (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.signed_qty"]], "strategy_id (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.strategy_id"]], "strategy_id (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.strategy_id"]], "strategy_id (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.strategy_id"]], "strategy_id (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.strategy_id"]], "strategy_id (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.strategy_id"]], "strategy_id (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.strategy_id"]], "strategy_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.strategy_id"]], "strategy_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.strategy_id"]], "strategy_id (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.strategy_id"]], "strategy_id (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.strategy_id"]], "strategy_id (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.strategy_id"]], "strategy_id (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.strategy_id"]], "strategy_id (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.strategy_id"]], "strategy_id (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.strategy_id"]], "strategy_id (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.strategy_id"]], "strategy_id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.strategy_id"]], "strategy_id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.strategy_id"]], "strategy_id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.strategy_id"]], "strategy_id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.strategy_id"]], "tags (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.tags"]], "time_in_force (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.time_in_force"]], "to_dict() (accountstate static method)": [[19, "nautilus_trader.model.events.account.AccountState.to_dict"]], "to_dict() (orderaccepted static method)": [[19, "nautilus_trader.model.events.order.OrderAccepted.to_dict"]], "to_dict() (ordercancelrejected static method)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.to_dict"]], "to_dict() (ordercanceled static method)": [[19, "nautilus_trader.model.events.order.OrderCanceled.to_dict"]], "to_dict() (orderdenied static method)": [[19, "nautilus_trader.model.events.order.OrderDenied.to_dict"]], "to_dict() (orderexpired static method)": [[19, "nautilus_trader.model.events.order.OrderExpired.to_dict"]], "to_dict() (orderfilled static method)": [[19, "nautilus_trader.model.events.order.OrderFilled.to_dict"]], "to_dict() (orderinitialized static method)": [[19, "nautilus_trader.model.events.order.OrderInitialized.to_dict"]], "to_dict() (ordermodifyrejected static method)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.to_dict"]], "to_dict() (orderpendingcancel static method)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.to_dict"]], "to_dict() (orderpendingupdate static method)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.to_dict"]], "to_dict() (orderrejected static method)": [[19, "nautilus_trader.model.events.order.OrderRejected.to_dict"]], "to_dict() (ordersubmitted static method)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.to_dict"]], "to_dict() (ordertriggered static method)": [[19, "nautilus_trader.model.events.order.OrderTriggered.to_dict"]], "to_dict() (orderupdated static method)": [[19, "nautilus_trader.model.events.order.OrderUpdated.to_dict"]], "to_dict() (positionchanged static method)": [[19, "nautilus_trader.model.events.position.PositionChanged.to_dict"]], "to_dict() (positionclosed static method)": [[19, "nautilus_trader.model.events.position.PositionClosed.to_dict"]], "to_dict() (positionopened static method)": [[19, "nautilus_trader.model.events.position.PositionOpened.to_dict"]], "trade_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.trade_id"]], "trader_id (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.trader_id"]], "trader_id (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.trader_id"]], "trader_id (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.trader_id"]], "trader_id (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.trader_id"]], "trader_id (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.trader_id"]], "trader_id (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.trader_id"]], "trader_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.trader_id"]], "trader_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.trader_id"]], "trader_id (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.trader_id"]], "trader_id (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.trader_id"]], "trader_id (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.trader_id"]], "trader_id (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.trader_id"]], "trader_id (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.trader_id"]], "trader_id (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.trader_id"]], "trader_id (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.trader_id"]], "trader_id (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.trader_id"]], "trader_id (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.trader_id"]], "trader_id (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.trader_id"]], "trader_id (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.trader_id"]], "trigger_price (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.trigger_price"]], "ts_closed (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.ts_closed"]], "ts_closed (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.ts_closed"]], "ts_closed (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.ts_closed"]], "ts_closed (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.ts_closed"]], "ts_event (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.ts_event"]], "ts_event (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.ts_event"]], "ts_event (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.ts_event"]], "ts_event (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.ts_event"]], "ts_event (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.ts_event"]], "ts_event (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.ts_event"]], "ts_event (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.ts_event"]], "ts_event (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.ts_event"]], "ts_event (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.ts_event"]], "ts_event (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.ts_event"]], "ts_event (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.ts_event"]], "ts_event (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.ts_event"]], "ts_event (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.ts_event"]], "ts_event (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.ts_event"]], "ts_event (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.ts_event"]], "ts_event (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.ts_event"]], "ts_event (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.ts_event"]], "ts_event (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.ts_event"]], "ts_event (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.ts_event"]], "ts_event (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.ts_event"]], "ts_init (accountstate attribute)": [[19, "nautilus_trader.model.events.account.AccountState.ts_init"]], "ts_init (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.ts_init"]], "ts_init (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.ts_init"]], "ts_init (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.ts_init"]], "ts_init (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.ts_init"]], "ts_init (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.ts_init"]], "ts_init (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.ts_init"]], "ts_init (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.ts_init"]], "ts_init (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.ts_init"]], "ts_init (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.ts_init"]], "ts_init (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.ts_init"]], "ts_init (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.ts_init"]], "ts_init (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.ts_init"]], "ts_init (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.ts_init"]], "ts_init (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.ts_init"]], "ts_init (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.ts_init"]], "ts_init (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.ts_init"]], "ts_init (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.ts_init"]], "ts_init (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.ts_init"]], "ts_init (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.ts_init"]], "ts_opened (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.ts_opened"]], "ts_opened (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.ts_opened"]], "ts_opened (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.ts_opened"]], "ts_opened (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.ts_opened"]], "unrealized_pnl (positionchanged attribute)": [[19, "nautilus_trader.model.events.position.PositionChanged.unrealized_pnl"]], "unrealized_pnl (positionclosed attribute)": [[19, "nautilus_trader.model.events.position.PositionClosed.unrealized_pnl"]], "unrealized_pnl (positionevent attribute)": [[19, "nautilus_trader.model.events.position.PositionEvent.unrealized_pnl"]], "unrealized_pnl (positionopened attribute)": [[19, "nautilus_trader.model.events.position.PositionOpened.unrealized_pnl"]], "venue_order_id (orderaccepted attribute)": [[19, "nautilus_trader.model.events.order.OrderAccepted.venue_order_id"]], "venue_order_id (ordercancelrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderCancelRejected.venue_order_id"]], "venue_order_id (ordercanceled attribute)": [[19, "nautilus_trader.model.events.order.OrderCanceled.venue_order_id"]], "venue_order_id (orderdenied attribute)": [[19, "nautilus_trader.model.events.order.OrderDenied.venue_order_id"]], "venue_order_id (orderevent attribute)": [[19, "nautilus_trader.model.events.order.OrderEvent.venue_order_id"]], "venue_order_id (orderexpired attribute)": [[19, "nautilus_trader.model.events.order.OrderExpired.venue_order_id"]], "venue_order_id (orderfilled attribute)": [[19, "nautilus_trader.model.events.order.OrderFilled.venue_order_id"]], "venue_order_id (orderinitialized attribute)": [[19, "nautilus_trader.model.events.order.OrderInitialized.venue_order_id"]], "venue_order_id (ordermodifyrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderModifyRejected.venue_order_id"]], "venue_order_id (orderpendingcancel attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingCancel.venue_order_id"]], "venue_order_id (orderpendingupdate attribute)": [[19, "nautilus_trader.model.events.order.OrderPendingUpdate.venue_order_id"]], "venue_order_id (orderrejected attribute)": [[19, "nautilus_trader.model.events.order.OrderRejected.venue_order_id"]], "venue_order_id (ordersubmitted attribute)": [[19, "nautilus_trader.model.events.order.OrderSubmitted.venue_order_id"]], "venue_order_id (ordertriggered attribute)": [[19, "nautilus_trader.model.events.order.OrderTriggered.venue_order_id"]], "venue_order_id (orderupdated attribute)": [[19, "nautilus_trader.model.events.order.OrderUpdated.venue_order_id"]], "accountid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.AccountId"]], "clientid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.ClientId"]], "clientorderid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.ClientOrderId"]], "componentid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.ComponentId"]], "execalgorithmid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.ExecAlgorithmId"]], "identifier (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.Identifier"]], "instrumentid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.InstrumentId"]], "orderlistid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.OrderListId"]], "positionid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.PositionId"]], "strategyid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.StrategyId"]], "symbol (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.Symbol"]], "tradeid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.TradeId"]], "traderid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.TraderId"]], "venue (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.Venue"]], "venueorderid (class in nautilus_trader.model.identifiers)": [[20, "nautilus_trader.model.identifiers.VenueOrderId"]], "from_str() (instrumentid static method)": [[20, "nautilus_trader.model.identifiers.InstrumentId.from_str"]], "get_id() (accountid method)": [[20, "nautilus_trader.model.identifiers.AccountId.get_id"]], "get_issuer() (accountid method)": [[20, "nautilus_trader.model.identifiers.AccountId.get_issuer"]], "get_tag() (strategyid method)": [[20, "nautilus_trader.model.identifiers.StrategyId.get_tag"]], "get_tag() (traderid method)": [[20, "nautilus_trader.model.identifiers.TraderId.get_tag"]], "is_external() (strategyid method)": [[20, "nautilus_trader.model.identifiers.StrategyId.is_external"]], "nautilus_trader.model.identifiers": [[20, "module-nautilus_trader.model.identifiers"]], "symbol (instrumentid attribute)": [[20, "nautilus_trader.model.identifiers.InstrumentId.symbol"]], "value (accountid attribute)": [[20, "nautilus_trader.model.identifiers.AccountId.value"]], "value (clientid attribute)": [[20, "nautilus_trader.model.identifiers.ClientId.value"]], "value (clientorderid attribute)": [[20, "nautilus_trader.model.identifiers.ClientOrderId.value"]], "value (componentid attribute)": [[20, "nautilus_trader.model.identifiers.ComponentId.value"]], "value (execalgorithmid attribute)": [[20, "nautilus_trader.model.identifiers.ExecAlgorithmId.value"]], "value (identifier attribute)": [[20, "nautilus_trader.model.identifiers.Identifier.value"]], "value (instrumentid attribute)": [[20, "nautilus_trader.model.identifiers.InstrumentId.value"]], "value (orderlistid attribute)": [[20, "nautilus_trader.model.identifiers.OrderListId.value"]], "value (positionid attribute)": [[20, "nautilus_trader.model.identifiers.PositionId.value"]], "value (strategyid attribute)": [[20, "nautilus_trader.model.identifiers.StrategyId.value"]], "value (symbol attribute)": [[20, "nautilus_trader.model.identifiers.Symbol.value"]], "value (tradeid attribute)": [[20, "nautilus_trader.model.identifiers.TradeId.value"]], "value (traderid attribute)": [[20, "nautilus_trader.model.identifiers.TraderId.value"]], "value (venue attribute)": [[20, "nautilus_trader.model.identifiers.Venue.value"]], "value (venueorderid attribute)": [[20, "nautilus_trader.model.identifiers.VenueOrderId.value"]], "venue (instrumentid attribute)": [[20, "nautilus_trader.model.identifiers.InstrumentId.venue"]], "nautilus_trader.model": [[21, "module-nautilus_trader.model"]], "instrument (class in nautilus_trader.model.instruments.base)": [[22, "nautilus_trader.model.instruments.base.Instrument"]], "asset_class (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.asset_class"]], "asset_type (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.asset_type"]], "base_from_dict() (instrument static method)": [[22, "nautilus_trader.model.instruments.base.Instrument.base_from_dict"]], "base_to_dict() (instrument static method)": [[22, "nautilus_trader.model.instruments.base.Instrument.base_to_dict"]], "fully_qualified_name() (instrument class method)": [[22, "nautilus_trader.model.instruments.base.Instrument.fully_qualified_name"]], "get_base_currency() (instrument method)": [[22, "nautilus_trader.model.instruments.base.Instrument.get_base_currency"]], "get_settlement_currency() (instrument method)": [[22, "nautilus_trader.model.instruments.base.Instrument.get_settlement_currency"]], "id (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.id"]], "info (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.info"]], "is_inverse (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.is_inverse"]], "lot_size (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.lot_size"]], "make_price() (instrument method)": [[22, "nautilus_trader.model.instruments.base.Instrument.make_price"]], "make_qty() (instrument method)": [[22, "nautilus_trader.model.instruments.base.Instrument.make_qty"]], "maker_fee (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.maker_fee"]], "margin_init (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.margin_init"]], "margin_maint (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.margin_maint"]], "max_notional (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.max_notional"]], "max_price (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.max_price"]], "max_quantity (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.max_quantity"]], "min_notional (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.min_notional"]], "min_price (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.min_price"]], "min_quantity (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.min_quantity"]], "multiplier (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.multiplier"]], "native_symbol (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.native_symbol"]], "nautilus_trader.model.instruments.base": [[22, "module-nautilus_trader.model.instruments.base"]], "next_ask_price() (instrument method)": [[22, "nautilus_trader.model.instruments.base.Instrument.next_ask_price"]], "next_bid_price() (instrument method)": [[22, "nautilus_trader.model.instruments.base.Instrument.next_bid_price"]], "notional_value() (instrument method)": [[22, "nautilus_trader.model.instruments.base.Instrument.notional_value"]], "price_increment (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.price_increment"]], "price_precision (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.price_precision"]], "quote_currency (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.quote_currency"]], "size_increment (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.size_increment"]], "size_precision (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.size_precision"]], "symbol (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.symbol"]], "taker_fee (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.taker_fee"]], "tick_scheme_name (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.tick_scheme_name"]], "ts_event (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.ts_event"]], "ts_init (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.ts_init"]], "venue (instrument attribute)": [[22, "nautilus_trader.model.instruments.base.Instrument.venue"]], "accountbalance (class in nautilus_trader.model.objects)": [[23, "nautilus_trader.model.objects.AccountBalance"]], "marginbalance (class in nautilus_trader.model.objects)": [[23, "nautilus_trader.model.objects.MarginBalance"]], "money (class in nautilus_trader.model.objects)": [[23, "nautilus_trader.model.objects.Money"]], "price (class in nautilus_trader.model.objects)": [[23, "nautilus_trader.model.objects.Price"]], "quantity (class in nautilus_trader.model.objects)": [[23, "nautilus_trader.model.objects.Quantity"]], "as_decimal() (money method)": [[23, "nautilus_trader.model.objects.Money.as_decimal"]], "as_decimal() (price method)": [[23, "nautilus_trader.model.objects.Price.as_decimal"]], "as_decimal() (quantity method)": [[23, "nautilus_trader.model.objects.Quantity.as_decimal"]], "as_double() (money method)": [[23, "nautilus_trader.model.objects.Money.as_double"]], "as_double() (price method)": [[23, "nautilus_trader.model.objects.Price.as_double"]], "as_double() (quantity method)": [[23, "nautilus_trader.model.objects.Quantity.as_double"]], "currency (accountbalance attribute)": [[23, "nautilus_trader.model.objects.AccountBalance.currency"]], "currency (marginbalance attribute)": [[23, "nautilus_trader.model.objects.MarginBalance.currency"]], "currency (money attribute)": [[23, "nautilus_trader.model.objects.Money.currency"]], "free (accountbalance attribute)": [[23, "nautilus_trader.model.objects.AccountBalance.free"]], "from_dict() (accountbalance static method)": [[23, "nautilus_trader.model.objects.AccountBalance.from_dict"]], "from_dict() (marginbalance static method)": [[23, "nautilus_trader.model.objects.MarginBalance.from_dict"]], "from_int() (price static method)": [[23, "nautilus_trader.model.objects.Price.from_int"]], "from_int() (quantity static method)": [[23, "nautilus_trader.model.objects.Quantity.from_int"]], "from_raw() (money static method)": [[23, "nautilus_trader.model.objects.Money.from_raw"]], "from_raw() (price static method)": [[23, "nautilus_trader.model.objects.Price.from_raw"]], "from_raw() (quantity static method)": [[23, "nautilus_trader.model.objects.Quantity.from_raw"]], "from_str() (money static method)": [[23, "nautilus_trader.model.objects.Money.from_str"]], "from_str() (price static method)": [[23, "nautilus_trader.model.objects.Price.from_str"]], "from_str() (quantity static method)": [[23, "nautilus_trader.model.objects.Quantity.from_str"]], "initial (marginbalance attribute)": [[23, "nautilus_trader.model.objects.MarginBalance.initial"]], "instrument_id (marginbalance attribute)": [[23, "nautilus_trader.model.objects.MarginBalance.instrument_id"]], "locked (accountbalance attribute)": [[23, "nautilus_trader.model.objects.AccountBalance.locked"]], "maintenance (marginbalance attribute)": [[23, "nautilus_trader.model.objects.MarginBalance.maintenance"]], "nautilus_trader.model.objects": [[23, "module-nautilus_trader.model.objects"]], "precision (price attribute)": [[23, "nautilus_trader.model.objects.Price.precision"]], "precision (quantity attribute)": [[23, "nautilus_trader.model.objects.Quantity.precision"]], "raw_to_f64() (price static method)": [[23, "nautilus_trader.model.objects.Price.raw_to_f64"]], "raw_to_f64() (quantity static method)": [[23, "nautilus_trader.model.objects.Quantity.raw_to_f64"]], "to_dict() (accountbalance method)": [[23, "nautilus_trader.model.objects.AccountBalance.to_dict"]], "to_dict() (marginbalance method)": [[23, "nautilus_trader.model.objects.MarginBalance.to_dict"]], "to_str() (money method)": [[23, "nautilus_trader.model.objects.Money.to_str"]], "to_str() (quantity method)": [[23, "nautilus_trader.model.objects.Quantity.to_str"]], "total (accountbalance attribute)": [[23, "nautilus_trader.model.objects.AccountBalance.total"]], "zero() (quantity static method)": [[23, "nautilus_trader.model.objects.Quantity.zero"]], "limitiftouchedorder (class in nautilus_trader.model.orders.limit_if_touched)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder"]], "limitorder (class in nautilus_trader.model.orders.limit)": [[25, "nautilus_trader.model.orders.limit.LimitOrder"]], "marketiftouchedorder (class in nautilus_trader.model.orders.market_if_touched)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder"]], "marketorder (class in nautilus_trader.model.orders.market)": [[25, "nautilus_trader.model.orders.market.MarketOrder"]], "markettolimitorder (class in nautilus_trader.model.orders.market_to_limit)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder"]], "order (class in nautilus_trader.model.orders.base)": [[25, "nautilus_trader.model.orders.base.Order"]], "orderlist (class in nautilus_trader.model.orders.list)": [[25, "nautilus_trader.model.orders.list.OrderList"]], "stoplimitorder (class in nautilus_trader.model.orders.stop_limit)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder"]], "stopmarketorder (class in nautilus_trader.model.orders.stop_market)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder"]], "trailingstoplimitorder (class in nautilus_trader.model.orders.trailing_stop_limit)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder"]], "trailingstopmarketorder (class in nautilus_trader.model.orders.trailing_stop_market)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder"]], "account_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.account_id"]], "account_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.account_id"]], "account_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.account_id"]], "account_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.account_id"]], "account_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.account_id"]], "account_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.account_id"]], "account_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.account_id"]], "account_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.account_id"]], "account_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.account_id"]], "account_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.account_id"]], "apply() (limitiftouchedorder method)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.apply"]], "apply() (limitorder method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.apply"]], "apply() (marketiftouchedorder method)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.apply"]], "apply() (marketorder method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.apply"]], "apply() (markettolimitorder method)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.apply"]], "apply() (order method)": [[25, "nautilus_trader.model.orders.base.Order.apply"]], "apply() (stoplimitorder method)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.apply"]], "apply() (stopmarketorder method)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.apply"]], "apply() (trailingstoplimitorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.apply"]], "apply() (trailingstopmarketorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.apply"]], "avg_px (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.avg_px"]], "avg_px (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.avg_px"]], "avg_px (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.avg_px"]], "avg_px (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.avg_px"]], "avg_px (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.avg_px"]], "avg_px (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.avg_px"]], "avg_px (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.avg_px"]], "avg_px (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.avg_px"]], "avg_px (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.avg_px"]], "avg_px (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.avg_px"]], "client_order_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.client_order_id"]], "client_order_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.client_order_id"]], "client_order_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.client_order_id"]], "client_order_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.client_order_id"]], "client_order_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.client_order_id"]], "client_order_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.client_order_id"]], "client_order_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.client_order_id"]], "client_order_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.client_order_id"]], "client_order_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.client_order_id"]], "client_order_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.client_order_id"]], "closing_side() (limitiftouchedorder static method)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.closing_side"]], "closing_side() (limitorder static method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.closing_side"]], "closing_side() (marketiftouchedorder static method)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.closing_side"]], "closing_side() (marketorder static method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.closing_side"]], "closing_side() (markettolimitorder static method)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.closing_side"]], "closing_side() (order static method)": [[25, "nautilus_trader.model.orders.base.Order.closing_side"]], "closing_side() (stoplimitorder static method)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.closing_side"]], "closing_side() (stopmarketorder static method)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.closing_side"]], "closing_side() (trailingstoplimitorder static method)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.closing_side"]], "closing_side() (trailingstopmarketorder static method)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.closing_side"]], "contingency_type (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.contingency_type"]], "contingency_type (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.contingency_type"]], "contingency_type (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.contingency_type"]], "contingency_type (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.contingency_type"]], "contingency_type (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.contingency_type"]], "contingency_type (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.contingency_type"]], "contingency_type (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.contingency_type"]], "contingency_type (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.contingency_type"]], "contingency_type (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.contingency_type"]], "contingency_type (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.contingency_type"]], "display_qty (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.display_qty"]], "display_qty (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.display_qty"]], "display_qty (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.display_qty"]], "display_qty (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.display_qty"]], "display_qty (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.display_qty"]], "emulation_trigger (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.emulation_trigger"]], "emulation_trigger (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.emulation_trigger"]], "emulation_trigger (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.emulation_trigger"]], "emulation_trigger (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.emulation_trigger"]], "emulation_trigger (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.emulation_trigger"]], "emulation_trigger (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.emulation_trigger"]], "emulation_trigger (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.emulation_trigger"]], "emulation_trigger (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.emulation_trigger"]], "emulation_trigger (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.emulation_trigger"]], "emulation_trigger (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.emulation_trigger"]], "event_count (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.event_count"]], "event_count (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.event_count"]], "event_count (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.event_count"]], "event_count (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.event_count"]], "event_count (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.event_count"]], "event_count (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.event_count"]], "event_count (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.event_count"]], "event_count (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.event_count"]], "event_count (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.event_count"]], "event_count (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.event_count"]], "events (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.events"]], "events (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.events"]], "events (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.events"]], "events (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.events"]], "events (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.events"]], "events (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.events"]], "events (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.events"]], "events (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.events"]], "events (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.events"]], "events (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.events"]], "exec_algorithm_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.exec_algorithm_id"]], "exec_algorithm_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.exec_algorithm_id"]], "exec_algorithm_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.exec_algorithm_id"]], "exec_algorithm_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.exec_algorithm_id"]], "exec_algorithm_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.exec_algorithm_id"]], "exec_algorithm_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.exec_algorithm_id"]], "exec_algorithm_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.exec_algorithm_id"]], "exec_algorithm_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.exec_algorithm_id"]], "exec_algorithm_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.exec_algorithm_id"]], "exec_algorithm_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.exec_algorithm_id"]], "exec_algorithm_params (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.exec_algorithm_params"]], "exec_algorithm_params (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.exec_algorithm_params"]], "exec_algorithm_params (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.exec_algorithm_params"]], "exec_algorithm_params (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.exec_algorithm_params"]], "exec_algorithm_params (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.exec_algorithm_params"]], "exec_algorithm_params (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.exec_algorithm_params"]], "exec_algorithm_params (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.exec_algorithm_params"]], "exec_algorithm_params (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.exec_algorithm_params"]], "exec_algorithm_params (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.exec_algorithm_params"]], "exec_algorithm_params (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.exec_algorithm_params"]], "exec_spawn_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.exec_spawn_id"]], "exec_spawn_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.exec_spawn_id"]], "exec_spawn_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.exec_spawn_id"]], "exec_spawn_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.exec_spawn_id"]], "exec_spawn_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.exec_spawn_id"]], "exec_spawn_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.exec_spawn_id"]], "exec_spawn_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.exec_spawn_id"]], "exec_spawn_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.exec_spawn_id"]], "exec_spawn_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.exec_spawn_id"]], "exec_spawn_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.exec_spawn_id"]], "expire_time (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.expire_time"]], "expire_time (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.expire_time"]], "expire_time (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.expire_time"]], "expire_time (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.expire_time"]], "expire_time (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.expire_time"]], "expire_time (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.expire_time"]], "expire_time (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.expire_time"]], "expire_time (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.expire_time"]], "expire_time_ns (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.expire_time_ns"]], "expire_time_ns (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.expire_time_ns"]], "expire_time_ns (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.expire_time_ns"]], "expire_time_ns (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.expire_time_ns"]], "expire_time_ns (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.expire_time_ns"]], "expire_time_ns (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.expire_time_ns"]], "expire_time_ns (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.expire_time_ns"]], "expire_time_ns (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.expire_time_ns"]], "filled_qty (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.filled_qty"]], "filled_qty (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.filled_qty"]], "filled_qty (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.filled_qty"]], "filled_qty (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.filled_qty"]], "filled_qty (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.filled_qty"]], "filled_qty (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.filled_qty"]], "filled_qty (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.filled_qty"]], "filled_qty (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.filled_qty"]], "filled_qty (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.filled_qty"]], "filled_qty (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.filled_qty"]], "first (orderlist attribute)": [[25, "nautilus_trader.model.orders.list.OrderList.first"]], "has_price (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.has_price"]], "has_price (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.has_price"]], "has_price (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.has_price"]], "has_price (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.has_price"]], "has_price (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.has_price"]], "has_price (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.has_price"]], "has_price (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.has_price"]], "has_price (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.has_price"]], "has_price (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.has_price"]], "has_price (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.has_price"]], "has_trigger_price (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.has_trigger_price"]], "has_trigger_price (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.has_trigger_price"]], "has_trigger_price (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.has_trigger_price"]], "has_trigger_price (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.has_trigger_price"]], "has_trigger_price (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.has_trigger_price"]], "has_trigger_price (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.has_trigger_price"]], "has_trigger_price (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.has_trigger_price"]], "has_trigger_price (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.has_trigger_price"]], "has_trigger_price (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.has_trigger_price"]], "has_trigger_price (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.has_trigger_price"]], "id (orderlist attribute)": [[25, "nautilus_trader.model.orders.list.OrderList.id"]], "info() (limitiftouchedorder method)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.info"]], "info() (limitorder method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.info"]], "info() (marketiftouchedorder method)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.info"]], "info() (marketorder method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.info"]], "info() (markettolimitorder method)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.info"]], "info() (order method)": [[25, "nautilus_trader.model.orders.base.Order.info"]], "info() (stoplimitorder method)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.info"]], "info() (stopmarketorder method)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.info"]], "info() (trailingstoplimitorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.info"]], "info() (trailingstopmarketorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.info"]], "init_event (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.init_event"]], "init_event (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.init_event"]], "init_event (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.init_event"]], "init_event (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.init_event"]], "init_event (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.init_event"]], "init_event (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.init_event"]], "init_event (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.init_event"]], "init_event (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.init_event"]], "init_event (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.init_event"]], "init_event (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.init_event"]], "init_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.init_id"]], "init_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.init_id"]], "init_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.init_id"]], "init_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.init_id"]], "init_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.init_id"]], "init_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.init_id"]], "init_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.init_id"]], "init_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.init_id"]], "init_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.init_id"]], "init_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.init_id"]], "instrument_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.instrument_id"]], "instrument_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.instrument_id"]], "instrument_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.instrument_id"]], "instrument_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.instrument_id"]], "instrument_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.instrument_id"]], "instrument_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.instrument_id"]], "instrument_id (orderlist attribute)": [[25, "nautilus_trader.model.orders.list.OrderList.instrument_id"]], "instrument_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.instrument_id"]], "instrument_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.instrument_id"]], "instrument_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.instrument_id"]], "instrument_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.instrument_id"]], "is_aggressive (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_aggressive"]], "is_aggressive (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_aggressive"]], "is_aggressive (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_aggressive"]], "is_aggressive (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_aggressive"]], "is_aggressive (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_aggressive"]], "is_aggressive (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_aggressive"]], "is_aggressive (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_aggressive"]], "is_aggressive (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_aggressive"]], "is_aggressive (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_aggressive"]], "is_aggressive (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_aggressive"]], "is_buy (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_buy"]], "is_buy (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_buy"]], "is_buy (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_buy"]], "is_buy (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_buy"]], "is_buy (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_buy"]], "is_buy (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_buy"]], "is_buy (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_buy"]], "is_buy (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_buy"]], "is_buy (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_buy"]], "is_buy (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_buy"]], "is_canceled (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_canceled"]], "is_canceled (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_canceled"]], "is_canceled (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_canceled"]], "is_canceled (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_canceled"]], "is_canceled (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_canceled"]], "is_canceled (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_canceled"]], "is_canceled (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_canceled"]], "is_canceled (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_canceled"]], "is_canceled (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_canceled"]], "is_canceled (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_canceled"]], "is_child_order (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_child_order"]], "is_child_order (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_child_order"]], "is_child_order (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_child_order"]], "is_child_order (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_child_order"]], "is_child_order (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_child_order"]], "is_child_order (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_child_order"]], "is_child_order (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_child_order"]], "is_child_order (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_child_order"]], "is_child_order (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_child_order"]], "is_child_order (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_child_order"]], "is_closed (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_closed"]], "is_closed (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_closed"]], "is_closed (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_closed"]], "is_closed (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_closed"]], "is_closed (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_closed"]], "is_closed (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_closed"]], "is_closed (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_closed"]], "is_closed (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_closed"]], "is_closed (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_closed"]], "is_closed (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_closed"]], "is_contingency (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_contingency"]], "is_contingency (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_contingency"]], "is_contingency (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_contingency"]], "is_contingency (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_contingency"]], "is_contingency (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_contingency"]], "is_contingency (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_contingency"]], "is_contingency (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_contingency"]], "is_contingency (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_contingency"]], "is_contingency (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_contingency"]], "is_contingency (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_contingency"]], "is_emulated (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_emulated"]], "is_emulated (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_emulated"]], "is_emulated (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_emulated"]], "is_emulated (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_emulated"]], "is_emulated (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_emulated"]], "is_emulated (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_emulated"]], "is_emulated (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_emulated"]], "is_emulated (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_emulated"]], "is_emulated (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_emulated"]], "is_emulated (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_emulated"]], "is_inflight (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_inflight"]], "is_inflight (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_inflight"]], "is_inflight (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_inflight"]], "is_inflight (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_inflight"]], "is_inflight (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_inflight"]], "is_inflight (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_inflight"]], "is_inflight (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_inflight"]], "is_inflight (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_inflight"]], "is_inflight (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_inflight"]], "is_inflight (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_inflight"]], "is_open (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_open"]], "is_open (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_open"]], "is_open (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_open"]], "is_open (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_open"]], "is_open (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_open"]], "is_open (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_open"]], "is_open (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_open"]], "is_open (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_open"]], "is_open (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_open"]], "is_open (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_open"]], "is_parent_order (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_parent_order"]], "is_parent_order (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_parent_order"]], "is_parent_order (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_parent_order"]], "is_parent_order (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_parent_order"]], "is_parent_order (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_parent_order"]], "is_parent_order (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_parent_order"]], "is_parent_order (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_parent_order"]], "is_parent_order (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_parent_order"]], "is_parent_order (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_parent_order"]], "is_parent_order (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_parent_order"]], "is_passive (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_passive"]], "is_passive (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_passive"]], "is_passive (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_passive"]], "is_passive (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_passive"]], "is_passive (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_passive"]], "is_passive (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_passive"]], "is_passive (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_passive"]], "is_passive (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_passive"]], "is_passive (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_passive"]], "is_passive (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_passive"]], "is_pending_cancel (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_pending_cancel"]], "is_pending_cancel (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_pending_cancel"]], "is_pending_cancel (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_pending_cancel"]], "is_pending_cancel (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_pending_cancel"]], "is_pending_cancel (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_pending_cancel"]], "is_pending_cancel (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_pending_cancel"]], "is_pending_cancel (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_pending_cancel"]], "is_pending_cancel (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_pending_cancel"]], "is_pending_cancel (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_pending_cancel"]], "is_pending_cancel (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_pending_cancel"]], "is_pending_update (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_pending_update"]], "is_pending_update (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_pending_update"]], "is_pending_update (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_pending_update"]], "is_pending_update (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_pending_update"]], "is_pending_update (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_pending_update"]], "is_pending_update (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_pending_update"]], "is_pending_update (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_pending_update"]], "is_pending_update (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_pending_update"]], "is_pending_update (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_pending_update"]], "is_pending_update (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_pending_update"]], "is_post_only (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_post_only"]], "is_post_only (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_post_only"]], "is_post_only (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_post_only"]], "is_post_only (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_post_only"]], "is_post_only (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_post_only"]], "is_post_only (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_post_only"]], "is_post_only (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_post_only"]], "is_post_only (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_post_only"]], "is_post_only (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_post_only"]], "is_post_only (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_post_only"]], "is_primary (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_primary"]], "is_primary (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_primary"]], "is_primary (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_primary"]], "is_primary (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_primary"]], "is_primary (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_primary"]], "is_primary (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_primary"]], "is_primary (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_primary"]], "is_primary (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_primary"]], "is_primary (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_primary"]], "is_primary (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_primary"]], "is_reduce_only (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_reduce_only"]], "is_reduce_only (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_reduce_only"]], "is_reduce_only (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_reduce_only"]], "is_reduce_only (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_reduce_only"]], "is_reduce_only (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_reduce_only"]], "is_reduce_only (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_reduce_only"]], "is_reduce_only (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_reduce_only"]], "is_reduce_only (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_reduce_only"]], "is_reduce_only (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_reduce_only"]], "is_reduce_only (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_reduce_only"]], "is_sell (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_sell"]], "is_sell (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_sell"]], "is_sell (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_sell"]], "is_sell (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_sell"]], "is_sell (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_sell"]], "is_sell (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_sell"]], "is_sell (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_sell"]], "is_sell (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_sell"]], "is_sell (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_sell"]], "is_sell (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_sell"]], "is_spawned (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_spawned"]], "is_spawned (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.is_spawned"]], "is_spawned (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.is_spawned"]], "is_spawned (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.is_spawned"]], "is_spawned (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.is_spawned"]], "is_spawned (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.is_spawned"]], "is_spawned (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_spawned"]], "is_spawned (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.is_spawned"]], "is_spawned (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_spawned"]], "is_spawned (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.is_spawned"]], "is_triggered (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.is_triggered"]], "is_triggered (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.is_triggered"]], "is_triggered (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.is_triggered"]], "last_event (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.last_event"]], "last_event (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.last_event"]], "last_event (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.last_event"]], "last_event (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.last_event"]], "last_event (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.last_event"]], "last_event (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.last_event"]], "last_event (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.last_event"]], "last_event (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.last_event"]], "last_event (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.last_event"]], "last_event (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.last_event"]], "last_trade_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.last_trade_id"]], "last_trade_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.last_trade_id"]], "last_trade_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.last_trade_id"]], "last_trade_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.last_trade_id"]], "last_trade_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.last_trade_id"]], "last_trade_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.last_trade_id"]], "last_trade_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.last_trade_id"]], "last_trade_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.last_trade_id"]], "last_trade_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.last_trade_id"]], "last_trade_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.last_trade_id"]], "leaves_qty (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.leaves_qty"]], "leaves_qty (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.leaves_qty"]], "leaves_qty (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.leaves_qty"]], "leaves_qty (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.leaves_qty"]], "leaves_qty (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.leaves_qty"]], "leaves_qty (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.leaves_qty"]], "leaves_qty (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.leaves_qty"]], "leaves_qty (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.leaves_qty"]], "leaves_qty (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.leaves_qty"]], "leaves_qty (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.leaves_qty"]], "limit_offset (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.limit_offset"]], "linked_order_ids (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.linked_order_ids"]], "linked_order_ids (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.linked_order_ids"]], "linked_order_ids (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.linked_order_ids"]], "linked_order_ids (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.linked_order_ids"]], "linked_order_ids (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.linked_order_ids"]], "linked_order_ids (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.linked_order_ids"]], "linked_order_ids (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.linked_order_ids"]], "linked_order_ids (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.linked_order_ids"]], "linked_order_ids (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.linked_order_ids"]], "linked_order_ids (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.linked_order_ids"]], "liquidity_side (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.liquidity_side"]], "liquidity_side (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.liquidity_side"]], "liquidity_side (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.liquidity_side"]], "liquidity_side (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.liquidity_side"]], "liquidity_side (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.liquidity_side"]], "liquidity_side (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.liquidity_side"]], "liquidity_side (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.liquidity_side"]], "liquidity_side (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.liquidity_side"]], "liquidity_side (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.liquidity_side"]], "liquidity_side (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.liquidity_side"]], "nautilus_trader.model.orders": [[25, "module-nautilus_trader.model.orders"]], "nautilus_trader.model.orders.base": [[25, "module-nautilus_trader.model.orders.base"]], "nautilus_trader.model.orders.limit": [[25, "module-nautilus_trader.model.orders.limit"]], "nautilus_trader.model.orders.limit_if_touched": [[25, "module-nautilus_trader.model.orders.limit_if_touched"]], "nautilus_trader.model.orders.list": [[25, "module-nautilus_trader.model.orders.list"]], "nautilus_trader.model.orders.market": [[25, "module-nautilus_trader.model.orders.market"]], "nautilus_trader.model.orders.market_if_touched": [[25, "module-nautilus_trader.model.orders.market_if_touched"]], "nautilus_trader.model.orders.market_to_limit": [[25, "module-nautilus_trader.model.orders.market_to_limit"]], "nautilus_trader.model.orders.stop_limit": [[25, "module-nautilus_trader.model.orders.stop_limit"]], "nautilus_trader.model.orders.stop_market": [[25, "module-nautilus_trader.model.orders.stop_market"]], "nautilus_trader.model.orders.trailing_stop_limit": [[25, "module-nautilus_trader.model.orders.trailing_stop_limit"]], "nautilus_trader.model.orders.trailing_stop_market": [[25, "module-nautilus_trader.model.orders.trailing_stop_market"]], "opposite_side() (limitiftouchedorder static method)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.opposite_side"]], "opposite_side() (limitorder static method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.opposite_side"]], "opposite_side() (marketiftouchedorder static method)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.opposite_side"]], "opposite_side() (marketorder static method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.opposite_side"]], "opposite_side() (markettolimitorder static method)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.opposite_side"]], "opposite_side() (order static method)": [[25, "nautilus_trader.model.orders.base.Order.opposite_side"]], "opposite_side() (stoplimitorder static method)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.opposite_side"]], "opposite_side() (stopmarketorder static method)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.opposite_side"]], "opposite_side() (trailingstoplimitorder static method)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.opposite_side"]], "opposite_side() (trailingstopmarketorder static method)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.opposite_side"]], "order_list_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.order_list_id"]], "order_list_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.order_list_id"]], "order_list_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.order_list_id"]], "order_list_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.order_list_id"]], "order_list_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.order_list_id"]], "order_list_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.order_list_id"]], "order_list_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.order_list_id"]], "order_list_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.order_list_id"]], "order_list_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.order_list_id"]], "order_list_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.order_list_id"]], "order_type (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.order_type"]], "order_type (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.order_type"]], "order_type (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.order_type"]], "order_type (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.order_type"]], "order_type (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.order_type"]], "order_type (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.order_type"]], "order_type (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.order_type"]], "order_type (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.order_type"]], "order_type (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.order_type"]], "order_type (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.order_type"]], "orders (orderlist attribute)": [[25, "nautilus_trader.model.orders.list.OrderList.orders"]], "parent_order_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.parent_order_id"]], "parent_order_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.parent_order_id"]], "parent_order_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.parent_order_id"]], "parent_order_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.parent_order_id"]], "parent_order_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.parent_order_id"]], "parent_order_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.parent_order_id"]], "parent_order_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.parent_order_id"]], "parent_order_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.parent_order_id"]], "parent_order_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.parent_order_id"]], "parent_order_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.parent_order_id"]], "position_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.position_id"]], "position_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.position_id"]], "position_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.position_id"]], "position_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.position_id"]], "position_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.position_id"]], "position_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.position_id"]], "position_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.position_id"]], "position_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.position_id"]], "position_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.position_id"]], "position_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.position_id"]], "price (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.price"]], "price (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.price"]], "price (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.price"]], "price (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.price"]], "price (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.price"]], "quantity (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.quantity"]], "quantity (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.quantity"]], "quantity (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.quantity"]], "quantity (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.quantity"]], "quantity (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.quantity"]], "quantity (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.quantity"]], "quantity (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.quantity"]], "quantity (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.quantity"]], "quantity (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.quantity"]], "quantity (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.quantity"]], "side (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.side"]], "side (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.side"]], "side (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.side"]], "side (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.side"]], "side (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.side"]], "side (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.side"]], "side (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.side"]], "side (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.side"]], "side (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.side"]], "side (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.side"]], "side_string (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.side_string"]], "side_string (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.side_string"]], "side_string (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.side_string"]], "side_string (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.side_string"]], "side_string (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.side_string"]], "side_string (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.side_string"]], "side_string (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.side_string"]], "side_string (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.side_string"]], "side_string (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.side_string"]], "side_string (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.side_string"]], "signed_decimal_qty() (limitiftouchedorder method)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.signed_decimal_qty"]], "signed_decimal_qty() (limitorder method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.signed_decimal_qty"]], "signed_decimal_qty() (marketiftouchedorder method)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.signed_decimal_qty"]], "signed_decimal_qty() (marketorder method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.signed_decimal_qty"]], "signed_decimal_qty() (markettolimitorder method)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.signed_decimal_qty"]], "signed_decimal_qty() (order method)": [[25, "nautilus_trader.model.orders.base.Order.signed_decimal_qty"]], "signed_decimal_qty() (stoplimitorder method)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.signed_decimal_qty"]], "signed_decimal_qty() (stopmarketorder method)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.signed_decimal_qty"]], "signed_decimal_qty() (trailingstoplimitorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.signed_decimal_qty"]], "signed_decimal_qty() (trailingstopmarketorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.signed_decimal_qty"]], "slippage (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.slippage"]], "slippage (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.slippage"]], "slippage (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.slippage"]], "slippage (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.slippage"]], "slippage (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.slippage"]], "slippage (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.slippage"]], "slippage (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.slippage"]], "slippage (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.slippage"]], "slippage (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.slippage"]], "slippage (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.slippage"]], "status (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.status"]], "status (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.status"]], "status (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.status"]], "status (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.status"]], "status (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.status"]], "status (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.status"]], "status (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.status"]], "status (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.status"]], "status (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.status"]], "status (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.status"]], "strategy_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.strategy_id"]], "strategy_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.strategy_id"]], "strategy_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.strategy_id"]], "strategy_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.strategy_id"]], "strategy_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.strategy_id"]], "strategy_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.strategy_id"]], "strategy_id (orderlist attribute)": [[25, "nautilus_trader.model.orders.list.OrderList.strategy_id"]], "strategy_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.strategy_id"]], "strategy_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.strategy_id"]], "strategy_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.strategy_id"]], "strategy_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.strategy_id"]], "symbol (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.symbol"]], "symbol (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.symbol"]], "symbol (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.symbol"]], "symbol (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.symbol"]], "symbol (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.symbol"]], "symbol (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.symbol"]], "symbol (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.symbol"]], "symbol (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.symbol"]], "symbol (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.symbol"]], "symbol (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.symbol"]], "tags (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.tags"]], "tags (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.tags"]], "tags (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.tags"]], "tags (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.tags"]], "tags (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.tags"]], "tags (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.tags"]], "tags (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.tags"]], "tags (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.tags"]], "tags (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.tags"]], "tags (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.tags"]], "time_in_force (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.time_in_force"]], "time_in_force (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.time_in_force"]], "time_in_force (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.time_in_force"]], "time_in_force (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.time_in_force"]], "time_in_force (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.time_in_force"]], "time_in_force (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.time_in_force"]], "time_in_force (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.time_in_force"]], "time_in_force (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.time_in_force"]], "time_in_force (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.time_in_force"]], "time_in_force (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.time_in_force"]], "to_dict() (limitiftouchedorder method)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.to_dict"]], "to_dict() (limitorder method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.to_dict"]], "to_dict() (marketiftouchedorder method)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.to_dict"]], "to_dict() (marketorder method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.to_dict"]], "to_dict() (markettolimitorder method)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.to_dict"]], "to_dict() (order method)": [[25, "nautilus_trader.model.orders.base.Order.to_dict"]], "to_dict() (stoplimitorder method)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.to_dict"]], "to_dict() (stopmarketorder method)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.to_dict"]], "to_dict() (trailingstoplimitorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.to_dict"]], "to_dict() (trailingstopmarketorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.to_dict"]], "trade_ids (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.trade_ids"]], "trade_ids (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.trade_ids"]], "trade_ids (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.trade_ids"]], "trade_ids (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.trade_ids"]], "trade_ids (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.trade_ids"]], "trade_ids (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.trade_ids"]], "trade_ids (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.trade_ids"]], "trade_ids (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.trade_ids"]], "trade_ids (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.trade_ids"]], "trade_ids (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.trade_ids"]], "trader_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.trader_id"]], "trader_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.trader_id"]], "trader_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.trader_id"]], "trader_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.trader_id"]], "trader_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.trader_id"]], "trader_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.trader_id"]], "trader_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.trader_id"]], "trader_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.trader_id"]], "trader_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.trader_id"]], "trader_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.trader_id"]], "trailing_offset (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.trailing_offset"]], "trailing_offset (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.trailing_offset"]], "trailing_offset_type (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.trailing_offset_type"]], "trailing_offset_type (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.trailing_offset_type"]], "transform_py() (limitorder static method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.transform_py"]], "transform_py() (marketorder static method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.transform_py"]], "trigger_price (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.trigger_price"]], "trigger_price (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.trigger_price"]], "trigger_price (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.trigger_price"]], "trigger_price (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.trigger_price"]], "trigger_price (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.trigger_price"]], "trigger_price (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.trigger_price"]], "trigger_type (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.trigger_type"]], "trigger_type (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.trigger_type"]], "trigger_type (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.trigger_type"]], "trigger_type (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.trigger_type"]], "trigger_type (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.trigger_type"]], "trigger_type (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.trigger_type"]], "ts_init (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.ts_init"]], "ts_init (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.ts_init"]], "ts_init (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.ts_init"]], "ts_init (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.ts_init"]], "ts_init (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.ts_init"]], "ts_init (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.ts_init"]], "ts_init (orderlist attribute)": [[25, "nautilus_trader.model.orders.list.OrderList.ts_init"]], "ts_init (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.ts_init"]], "ts_init (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.ts_init"]], "ts_init (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.ts_init"]], "ts_init (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.ts_init"]], "ts_last (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.ts_last"]], "ts_last (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.ts_last"]], "ts_last (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.ts_last"]], "ts_last (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.ts_last"]], "ts_last (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.ts_last"]], "ts_last (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.ts_last"]], "ts_last (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.ts_last"]], "ts_last (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.ts_last"]], "ts_last (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.ts_last"]], "ts_last (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.ts_last"]], "ts_triggered (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.ts_triggered"]], "ts_triggered (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.ts_triggered"]], "ts_triggered (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.ts_triggered"]], "venue (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.venue"]], "venue (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.venue"]], "venue (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.venue"]], "venue (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.venue"]], "venue (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.venue"]], "venue (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.venue"]], "venue (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.venue"]], "venue (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.venue"]], "venue (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.venue"]], "venue (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.venue"]], "venue_order_id (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.venue_order_id"]], "venue_order_id (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.venue_order_id"]], "venue_order_id (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.venue_order_id"]], "venue_order_id (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.venue_order_id"]], "venue_order_id (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.venue_order_id"]], "venue_order_id (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.venue_order_id"]], "venue_order_id (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.venue_order_id"]], "venue_order_id (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.venue_order_id"]], "venue_order_id (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.venue_order_id"]], "venue_order_id (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.venue_order_id"]], "venue_order_ids (limitiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.venue_order_ids"]], "venue_order_ids (limitorder attribute)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.venue_order_ids"]], "venue_order_ids (marketiftouchedorder attribute)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.venue_order_ids"]], "venue_order_ids (marketorder attribute)": [[25, "nautilus_trader.model.orders.market.MarketOrder.venue_order_ids"]], "venue_order_ids (markettolimitorder attribute)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.venue_order_ids"]], "venue_order_ids (order attribute)": [[25, "nautilus_trader.model.orders.base.Order.venue_order_ids"]], "venue_order_ids (stoplimitorder attribute)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.venue_order_ids"]], "venue_order_ids (stopmarketorder attribute)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.venue_order_ids"]], "venue_order_ids (trailingstoplimitorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.venue_order_ids"]], "venue_order_ids (trailingstopmarketorder attribute)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.venue_order_ids"]], "would_reduce_only() (limitiftouchedorder method)": [[25, "nautilus_trader.model.orders.limit_if_touched.LimitIfTouchedOrder.would_reduce_only"]], "would_reduce_only() (limitorder method)": [[25, "nautilus_trader.model.orders.limit.LimitOrder.would_reduce_only"]], "would_reduce_only() (marketiftouchedorder method)": [[25, "nautilus_trader.model.orders.market_if_touched.MarketIfTouchedOrder.would_reduce_only"]], "would_reduce_only() (marketorder method)": [[25, "nautilus_trader.model.orders.market.MarketOrder.would_reduce_only"]], "would_reduce_only() (markettolimitorder method)": [[25, "nautilus_trader.model.orders.market_to_limit.MarketToLimitOrder.would_reduce_only"]], "would_reduce_only() (order method)": [[25, "nautilus_trader.model.orders.base.Order.would_reduce_only"]], "would_reduce_only() (stoplimitorder method)": [[25, "nautilus_trader.model.orders.stop_limit.StopLimitOrder.would_reduce_only"]], "would_reduce_only() (stopmarketorder method)": [[25, "nautilus_trader.model.orders.stop_market.StopMarketOrder.would_reduce_only"]], "would_reduce_only() (trailingstoplimitorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_limit.TrailingStopLimitOrder.would_reduce_only"]], "would_reduce_only() (trailingstopmarketorder method)": [[25, "nautilus_trader.model.orders.trailing_stop_market.TrailingStopMarketOrder.would_reduce_only"]], "position (class in nautilus_trader.model.position)": [[26, "nautilus_trader.model.position.Position"]], "account_id (position attribute)": [[26, "nautilus_trader.model.position.Position.account_id"]], "apply() (position method)": [[26, "nautilus_trader.model.position.Position.apply"]], "avg_px_close (position attribute)": [[26, "nautilus_trader.model.position.Position.avg_px_close"]], "avg_px_open (position attribute)": [[26, "nautilus_trader.model.position.Position.avg_px_open"]], "base_currency (position attribute)": [[26, "nautilus_trader.model.position.Position.base_currency"]], "calculate_pnl() (position method)": [[26, "nautilus_trader.model.position.Position.calculate_pnl"]], "client_order_ids (position attribute)": [[26, "nautilus_trader.model.position.Position.client_order_ids"]], "closing_order_id (position attribute)": [[26, "nautilus_trader.model.position.Position.closing_order_id"]], "commissions() (position method)": [[26, "nautilus_trader.model.position.Position.commissions"]], "cost_currency (position attribute)": [[26, "nautilus_trader.model.position.Position.cost_currency"]], "duration_ns (position attribute)": [[26, "nautilus_trader.model.position.Position.duration_ns"]], "entry (position attribute)": [[26, "nautilus_trader.model.position.Position.entry"]], "event_count (position attribute)": [[26, "nautilus_trader.model.position.Position.event_count"]], "events (position attribute)": [[26, "nautilus_trader.model.position.Position.events"]], "id (position attribute)": [[26, "nautilus_trader.model.position.Position.id"]], "info() (position method)": [[26, "nautilus_trader.model.position.Position.info"]], "instrument_id (position attribute)": [[26, "nautilus_trader.model.position.Position.instrument_id"]], "is_closed (position attribute)": [[26, "nautilus_trader.model.position.Position.is_closed"]], "is_inverse (position attribute)": [[26, "nautilus_trader.model.position.Position.is_inverse"]], "is_long (position attribute)": [[26, "nautilus_trader.model.position.Position.is_long"]], "is_open (position attribute)": [[26, "nautilus_trader.model.position.Position.is_open"]], "is_opposite_side() (position method)": [[26, "nautilus_trader.model.position.Position.is_opposite_side"]], "is_short (position attribute)": [[26, "nautilus_trader.model.position.Position.is_short"]], "last_event (position attribute)": [[26, "nautilus_trader.model.position.Position.last_event"]], "last_trade_id (position attribute)": [[26, "nautilus_trader.model.position.Position.last_trade_id"]], "multiplier (position attribute)": [[26, "nautilus_trader.model.position.Position.multiplier"]], "nautilus_trader.model.position": [[26, "module-nautilus_trader.model.position"]], "notional_value() (position method)": [[26, "nautilus_trader.model.position.Position.notional_value"]], "opening_order_id (position attribute)": [[26, "nautilus_trader.model.position.Position.opening_order_id"]], "peak_qty (position attribute)": [[26, "nautilus_trader.model.position.Position.peak_qty"]], "price_precision (position attribute)": [[26, "nautilus_trader.model.position.Position.price_precision"]], "quantity (position attribute)": [[26, "nautilus_trader.model.position.Position.quantity"]], "quote_currency (position attribute)": [[26, "nautilus_trader.model.position.Position.quote_currency"]], "realized_pnl (position attribute)": [[26, "nautilus_trader.model.position.Position.realized_pnl"]], "realized_return (position attribute)": [[26, "nautilus_trader.model.position.Position.realized_return"]], "side (position attribute)": [[26, "nautilus_trader.model.position.Position.side"]], "side_from_order_side() (position static method)": [[26, "nautilus_trader.model.position.Position.side_from_order_side"]], "signed_decimal_qty() (position method)": [[26, "nautilus_trader.model.position.Position.signed_decimal_qty"]], "signed_qty (position attribute)": [[26, "nautilus_trader.model.position.Position.signed_qty"]], "size_precision (position attribute)": [[26, "nautilus_trader.model.position.Position.size_precision"]], "strategy_id (position attribute)": [[26, "nautilus_trader.model.position.Position.strategy_id"]], "symbol (position attribute)": [[26, "nautilus_trader.model.position.Position.symbol"]], "to_dict() (position method)": [[26, "nautilus_trader.model.position.Position.to_dict"]], "total_pnl() (position method)": [[26, "nautilus_trader.model.position.Position.total_pnl"]], "trade_ids (position attribute)": [[26, "nautilus_trader.model.position.Position.trade_ids"]], "trader_id (position attribute)": [[26, "nautilus_trader.model.position.Position.trader_id"]], "ts_closed (position attribute)": [[26, "nautilus_trader.model.position.Position.ts_closed"]], "ts_init (position attribute)": [[26, "nautilus_trader.model.position.Position.ts_init"]], "ts_last (position attribute)": [[26, "nautilus_trader.model.position.Position.ts_last"]], "ts_opened (position attribute)": [[26, "nautilus_trader.model.position.Position.ts_opened"]], "unrealized_pnl() (position method)": [[26, "nautilus_trader.model.position.Position.unrealized_pnl"]], "venue (position attribute)": [[26, "nautilus_trader.model.position.Position.venue"]], "venue_order_ids (position attribute)": [[26, "nautilus_trader.model.position.Position.venue_order_ids"]], "fixedtickscheme (class in nautilus_trader.model.tick_scheme.implementations.fixed)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme"]], "tickscheme (class in nautilus_trader.model.tick_scheme.base)": [[27, "nautilus_trader.model.tick_scheme.base.TickScheme"]], "tieredtickscheme (class in nautilus_trader.model.tick_scheme.implementations.tiered)": [[27, "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme"]], "find_tick_index() (tieredtickscheme method)": [[27, "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme.find_tick_index"]], "get_tick_scheme() (in module nautilus_trader.model.tick_scheme.base)": [[27, "nautilus_trader.model.tick_scheme.base.get_tick_scheme"]], "increment (fixedtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme.increment"]], "list_tick_schemes() (in module nautilus_trader.model.tick_scheme.base)": [[27, "nautilus_trader.model.tick_scheme.base.list_tick_schemes"]], "max_price (fixedtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme.max_price"]], "max_price (tickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.base.TickScheme.max_price"]], "max_price (tieredtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme.max_price"]], "min_price (fixedtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme.min_price"]], "min_price (tickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.base.TickScheme.min_price"]], "min_price (tieredtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme.min_price"]], "name (fixedtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme.name"]], "name (tickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.base.TickScheme.name"]], "name (tieredtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme.name"]], "nautilus_trader.model.tick_scheme": [[27, "module-nautilus_trader.model.tick_scheme"]], "nautilus_trader.model.tick_scheme.base": [[27, "module-nautilus_trader.model.tick_scheme.base"]], "nautilus_trader.model.tick_scheme.implementations.fixed": [[27, "module-nautilus_trader.model.tick_scheme.implementations.fixed"]], "nautilus_trader.model.tick_scheme.implementations.tiered": [[27, "module-nautilus_trader.model.tick_scheme.implementations.tiered"]], "next_ask_price() (fixedtickscheme method)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme.next_ask_price"]], "next_ask_price() (tickscheme method)": [[27, "nautilus_trader.model.tick_scheme.base.TickScheme.next_ask_price"]], "next_ask_price() (tieredtickscheme method)": [[27, "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme.next_ask_price"]], "next_bid_price() (fixedtickscheme method)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme.next_bid_price"]], "next_bid_price() (tickscheme method)": [[27, "nautilus_trader.model.tick_scheme.base.TickScheme.next_bid_price"]], "next_bid_price() (tieredtickscheme method)": [[27, "nautilus_trader.model.tick_scheme.implementations.tiered.TieredTickScheme.next_bid_price"]], "price_precision (fixedtickscheme attribute)": [[27, "nautilus_trader.model.tick_scheme.implementations.fixed.FixedTickScheme.price_precision"]], "register_tick_scheme() (in module nautilus_trader.model.tick_scheme.base)": [[27, "nautilus_trader.model.tick_scheme.base.register_tick_scheme"]], "round_down() (in module nautilus_trader.model.tick_scheme.base)": [[27, "nautilus_trader.model.tick_scheme.base.round_down"]], "round_up() (in module nautilus_trader.model.tick_scheme.base)": [[27, "nautilus_trader.model.tick_scheme.base.round_up"]], "messagebus (class in nautilus_trader.msgbus.bus)": [[28, "nautilus_trader.msgbus.bus.MessageBus"]], "subscription (class in nautilus_trader.msgbus.subscription)": [[28, "nautilus_trader.msgbus.subscription.Subscription"]], "deregister() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.deregister"]], "endpoints() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.endpoints"]], "handler (subscription attribute)": [[28, "nautilus_trader.msgbus.subscription.Subscription.handler"]], "has_subscribers() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.has_subscribers"]], "is_matching_py() (in module nautilus_trader.msgbus.bus)": [[28, "nautilus_trader.msgbus.bus.is_matching_py"]], "is_subscribed() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.is_subscribed"]], "nautilus_trader.msgbus": [[28, "module-nautilus_trader.msgbus"]], "nautilus_trader.msgbus.bus": [[28, "module-nautilus_trader.msgbus.bus"]], "nautilus_trader.msgbus.subscription": [[28, "module-nautilus_trader.msgbus.subscription"]], "priority (subscription attribute)": [[28, "nautilus_trader.msgbus.subscription.Subscription.priority"]], "pub_count (messagebus attribute)": [[28, "nautilus_trader.msgbus.bus.MessageBus.pub_count"]], "publish() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.publish"]], "register() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.register"]], "req_count (messagebus attribute)": [[28, "nautilus_trader.msgbus.bus.MessageBus.req_count"]], "request() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.request"]], "res_count (messagebus attribute)": [[28, "nautilus_trader.msgbus.bus.MessageBus.res_count"]], "response() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.response"]], "send() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.send"]], "sent_count (messagebus attribute)": [[28, "nautilus_trader.msgbus.bus.MessageBus.sent_count"]], "subscribe() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.subscribe"]], "subscriptions() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.subscriptions"]], "topic (subscription attribute)": [[28, "nautilus_trader.msgbus.subscription.Subscription.topic"]], "topics() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.topics"]], "trader_id (messagebus attribute)": [[28, "nautilus_trader.msgbus.bus.MessageBus.trader_id"]], "unsubscribe() (messagebus method)": [[28, "nautilus_trader.msgbus.bus.MessageBus.unsubscribe"]], "httpclient (class in nautilus_trader.network.http)": [[29, "nautilus_trader.network.http.HttpClient"]], "socketclient (class in nautilus_trader.network.socket)": [[29, "nautilus_trader.network.socket.SocketClient"]], "wsmsgtype (class in nautilus_trader.network.websocket)": [[29, "nautilus_trader.network.websocket.WSMsgType"]], "websocketclient (class in nautilus_trader.network.websocket)": [[29, "nautilus_trader.network.websocket.WebSocketClient"]], "as_integer_ratio() (wsmsgtype method)": [[29, "nautilus_trader.network.websocket.WSMsgType.as_integer_ratio"]], "avg_latency() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.avg_latency"]], "bit_count() (wsmsgtype method)": [[29, "nautilus_trader.network.websocket.WSMsgType.bit_count"]], "bit_length() (wsmsgtype method)": [[29, "nautilus_trader.network.websocket.WSMsgType.bit_length"]], "close() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.close"]], "conjugate() (wsmsgtype method)": [[29, "nautilus_trader.network.websocket.WSMsgType.conjugate"]], "connect() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.connect"]], "connect() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.connect"]], "connect() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.connect"]], "connected (httpclient attribute)": [[29, "nautilus_trader.network.http.HttpClient.connected"]], "connection_retry_count (websocketclient attribute)": [[29, "nautilus_trader.network.websocket.WebSocketClient.connection_retry_count"]], "delete() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.delete"]], "denominator (wsmsgtype attribute)": [[29, "nautilus_trader.network.websocket.WSMsgType.denominator"]], "disconnect() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.disconnect"]], "disconnect() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.disconnect"]], "disconnect() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.disconnect"]], "from_bytes() (wsmsgtype method)": [[29, "nautilus_trader.network.websocket.WSMsgType.from_bytes"]], "get() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.get"]], "host (socketclient attribute)": [[29, "nautilus_trader.network.socket.SocketClient.host"]], "imag (wsmsgtype attribute)": [[29, "nautilus_trader.network.websocket.WSMsgType.imag"]], "is_connected (socketclient attribute)": [[29, "nautilus_trader.network.socket.SocketClient.is_connected"]], "is_connected (websocketclient attribute)": [[29, "nautilus_trader.network.websocket.WebSocketClient.is_connected"]], "is_running (socketclient attribute)": [[29, "nautilus_trader.network.socket.SocketClient.is_running"]], "is_running (websocketclient attribute)": [[29, "nautilus_trader.network.websocket.WebSocketClient.is_running"]], "is_stopping (socketclient attribute)": [[29, "nautilus_trader.network.socket.SocketClient.is_stopping"]], "is_stopping (websocketclient attribute)": [[29, "nautilus_trader.network.websocket.WebSocketClient.is_stopping"]], "max_latency() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.max_latency"]], "max_retry_connection (websocketclient attribute)": [[29, "nautilus_trader.network.websocket.WebSocketClient.max_retry_connection"]], "min_latency() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.min_latency"]], "nautilus_trader.network": [[29, "module-nautilus_trader.network"]], "nautilus_trader.network.http": [[29, "module-nautilus_trader.network.http"]], "nautilus_trader.network.socket": [[29, "module-nautilus_trader.network.socket"]], "nautilus_trader.network.websocket": [[29, "module-nautilus_trader.network.websocket"]], "numerator (wsmsgtype attribute)": [[29, "nautilus_trader.network.websocket.WSMsgType.numerator"]], "port (socketclient attribute)": [[29, "nautilus_trader.network.socket.SocketClient.port"]], "post() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.post"]], "post_connection() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.post_connection"]], "post_connection() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.post_connection"]], "post_disconnection() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.post_disconnection"]], "post_disconnection() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.post_disconnection"]], "post_reconnection() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.post_reconnection"]], "post_reconnection() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.post_reconnection"]], "real (wsmsgtype attribute)": [[29, "nautilus_trader.network.websocket.WSMsgType.real"]], "receive() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.receive"]], "reconnect() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.reconnect"]], "reconnect() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.reconnect"]], "request() (httpclient method)": [[29, "nautilus_trader.network.http.HttpClient.request"]], "send() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.send"]], "send() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.send"]], "send_json() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.send_json"]], "session (httpclient attribute)": [[29, "nautilus_trader.network.http.HttpClient.session"]], "ssl (socketclient attribute)": [[29, "nautilus_trader.network.socket.SocketClient.ssl"]], "start() (socketclient method)": [[29, "nautilus_trader.network.socket.SocketClient.start"]], "start() (websocketclient method)": [[29, "nautilus_trader.network.websocket.WebSocketClient.start"]], "to_bytes() (wsmsgtype method)": [[29, "nautilus_trader.network.websocket.WSMsgType.to_bytes"]], "unknown_message_count (websocketclient attribute)": [[29, "nautilus_trader.network.websocket.WebSocketClient.unknown_message_count"]], "nautilus_trader.persistence": [[30, "module-nautilus_trader.persistence"]], "portfoliofacade (class in nautilus_trader.portfolio.base)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade"]], "account() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.account"]], "analyzer (portfoliofacade attribute)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.analyzer"]], "balances_locked() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.balances_locked"]], "initialized (portfoliofacade attribute)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.initialized"]], "is_completely_flat() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.is_completely_flat"]], "is_flat() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.is_flat"]], "is_net_long() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.is_net_long"]], "is_net_short() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.is_net_short"]], "margins_init() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.margins_init"]], "margins_maint() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.margins_maint"]], "nautilus_trader.portfolio": [[31, "module-nautilus_trader.portfolio"]], "nautilus_trader.portfolio.base": [[31, "module-nautilus_trader.portfolio.base"]], "net_exposure() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.net_exposure"]], "net_exposures() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.net_exposures"]], "net_position() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.net_position"]], "unrealized_pnl() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.unrealized_pnl"]], "unrealized_pnls() (portfoliofacade method)": [[31, "nautilus_trader.portfolio.base.PortfolioFacade.unrealized_pnls"]], "fixedrisksizer (class in nautilus_trader.risk.sizing)": [[32, "nautilus_trader.risk.sizing.FixedRiskSizer"]], "positionsizer (class in nautilus_trader.risk.sizing)": [[32, "nautilus_trader.risk.sizing.PositionSizer"]], "calculate() (fixedrisksizer method)": [[32, "nautilus_trader.risk.sizing.FixedRiskSizer.calculate"]], "calculate() (positionsizer method)": [[32, "nautilus_trader.risk.sizing.PositionSizer.calculate"]], "instrument (fixedrisksizer attribute)": [[32, "nautilus_trader.risk.sizing.FixedRiskSizer.instrument"]], "instrument (positionsizer attribute)": [[32, "nautilus_trader.risk.sizing.PositionSizer.instrument"]], "nautilus_trader.risk": [[32, "module-nautilus_trader.risk"]], "nautilus_trader.risk.sizing": [[32, "module-nautilus_trader.risk.sizing"]], "update_instrument() (fixedrisksizer method)": [[32, "nautilus_trader.risk.sizing.FixedRiskSizer.update_instrument"]], "update_instrument() (positionsizer method)": [[32, "nautilus_trader.risk.sizing.PositionSizer.update_instrument"]], "nautilus_trader.serialization": [[33, "module-nautilus_trader.serialization"]], "nautilus_trader.system": [[34, "module-nautilus_trader.system"]], "economicnewseventfilter (class in nautilus_trader.trading.filters)": [[35, "nautilus_trader.trading.filters.EconomicNewsEventFilter"]], "forexsession (class in nautilus_trader.trading.filters)": [[35, "nautilus_trader.trading.filters.ForexSession"]], "forexsessionfilter (class in nautilus_trader.trading.filters)": [[35, "nautilus_trader.trading.filters.ForexSessionFilter"]], "newsevent (class in nautilus_trader.trading.filters)": [[35, "nautilus_trader.trading.filters.NewsEvent"]], "newsimpact (class in nautilus_trader.trading.filters)": [[35, "nautilus_trader.trading.filters.NewsImpact"]], "currencies (economicnewseventfilter attribute)": [[35, "nautilus_trader.trading.filters.EconomicNewsEventFilter.currencies"]], "currency (newsevent attribute)": [[35, "nautilus_trader.trading.filters.NewsEvent.currency"]], "fully_qualified_name() (newsevent class method)": [[35, "nautilus_trader.trading.filters.NewsEvent.fully_qualified_name"]], "impact (newsevent attribute)": [[35, "nautilus_trader.trading.filters.NewsEvent.impact"]], "impacts (economicnewseventfilter attribute)": [[35, "nautilus_trader.trading.filters.EconomicNewsEventFilter.impacts"]], "local_from_utc() (forexsessionfilter method)": [[35, "nautilus_trader.trading.filters.ForexSessionFilter.local_from_utc"]], "name (newsevent attribute)": [[35, "nautilus_trader.trading.filters.NewsEvent.name"]], "nautilus_trader.trading": [[35, "module-nautilus_trader.trading"]], "nautilus_trader.trading.filters": [[35, "module-nautilus_trader.trading.filters"]], "next_end() (forexsessionfilter method)": [[35, "nautilus_trader.trading.filters.ForexSessionFilter.next_end"]], "next_event() (economicnewseventfilter method)": [[35, "nautilus_trader.trading.filters.EconomicNewsEventFilter.next_event"]], "next_start() (forexsessionfilter method)": [[35, "nautilus_trader.trading.filters.ForexSessionFilter.next_start"]], "prev_end() (forexsessionfilter method)": [[35, "nautilus_trader.trading.filters.ForexSessionFilter.prev_end"]], "prev_event() (economicnewseventfilter method)": [[35, "nautilus_trader.trading.filters.EconomicNewsEventFilter.prev_event"]], "prev_start() (forexsessionfilter method)": [[35, "nautilus_trader.trading.filters.ForexSessionFilter.prev_start"]], "ts_event (newsevent attribute)": [[35, "nautilus_trader.trading.filters.NewsEvent.ts_event"]], "ts_init (newsevent attribute)": [[35, "nautilus_trader.trading.filters.NewsEvent.ts_init"]], "unfiltered_data_end (economicnewseventfilter attribute)": [[35, "nautilus_trader.trading.filters.EconomicNewsEventFilter.unfiltered_data_end"]], "unfiltered_data_start (economicnewseventfilter attribute)": [[35, "nautilus_trader.trading.filters.EconomicNewsEventFilter.unfiltered_data_start"]]}})